{"hash":"ba682612d17231fa937fa58fc3af4342278ec20c","data":{"TagPosts":{"title":"Collaborations","belongsTo":{"totalCount":18,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"title":"Robonomics Helps Enable Rust for ROS 2","path":"/blog/ros-2-rust-report-2022/","date":"December 29, 2022","description":"This is the story of our collaboration with Esteve Fernandez, a former member of the original team that created Robot Operating System 2. He has been developing Rust bindings for ROS 2 for several years. We want to share the story of this project, explain how we helped Esteve, and why having Rust is useful for robotics applications.","content":"import Card from '~/components/TextCard.vue'\n\n## From ROS 1 to ROS 2\n\nROS was initially created as the development environment for specific types of robots. Primarily, the first version of the operating system was intended for single robots with computing resources on board and a reliable network connection with no need for real-time control. Accordingly, developers initially thought that ROS 1 would be best suited for research and academic applications.\n\nHowever, ROS eventually went beyond the research community and was adopted for commercial use. To meet the needs of new use cases, developers set out to add new features, such as support for multi-robot and small embedded systems, and integration with real-time. They also decided to improve the API and incorporate new technologies that had emerged since the release of ROS 1. At the same time, they chose not to change the existing version of the Robot Operating System, as this would have had a major impact on existing applications. As a result [ROS 2](https://design.ros2.org/) was born. \n\n## About Esteve\n\nEsteve was one of the original team who [started developing](https://www.ros.org/news/2016/04/dirk-thomas-esteve-fernandez-and-william-woodall-osrf-state-of-ros-2.html) the second version of ROS. He is a robotics engineer with more than two decades of experience in open source development and self-driving cars. Even after leaving the core ROS 2 team , he has continued to actively contribute to the project's repositories. \n\nOne of Esteve's personal goals was to develop projects that enable developers to write ROS 2 applications in Rust (bindings, code generator and more), providing them with a powerful tool to create efficient, robust robotics programs. However, the project developed rather slowly at first, as Esteve worked on it practically alone for 4 years, in his free time. \n\nAbout a year and a half ago, we met Esteve and agreed to help him with the development of ros2-rust. Thanks to this, Esteve was able to allocate extra time to work on the project and attract more attention to it. The ROS2 community on Rust has grown, and others have also started to contribute to the project with reviews by Esteve. Now the [main repository](https://github.com/ros2-rust/ros2_rust) has 27 contributors, 75 forks and 466 stars on Github.\n\n## Progress of Development\n\nAt the moment, ros2-rust has already implemented support for message generation, publisher/subscriber mechanism, clients and services. One of our big goals is to develop Robonomics as ROS 2 Middleware, and this requires adding a Robonomics transport layer for ros2-rust. To implement this functionality, support for the libp2p communication library is being added instead of the standard Data Distribution Service (DDS) for ROS2. DDS provides a publish-subscribe transport in a distributed discovery way, allowing any two programs to communicate without the need for a centralized tool like the ROS master. But DDS requires developing an additional bridge for adding Robonomics to ROS2, while libp2p allows native Robonomics integration.\n\n![ros-2-stack](./images/ros-2-rust-report-2022/ros-client-library-api-stack.png)\n\n*Diagram of the ROS client library API stack showing the position of the ROS 2 Middleware (rmw). Source: [ROS 2 Documentation](https://docs.ros.org/en/foxy/Concepts/About-Internal-Interfaces.html)*\n\n## Why ROS2 on Rust?\n\nBesides being the main language for Robonomics on Substrate, Rust has significant advantages for robotic applications.\n\nGenerally, for the most widely used robotic platforms intended for commercial and large-scale deployment, C++ is used, and so it was added first for ROS. This is due to its ability to work ‘close to the hardware’ and its suitability for robotic applications with limited computing resources. However, this also makes C++ more dangerous, as it is very easy to make a critical mistake during development, and these mistakes are only discovered later on real (and broken) hardware.\n\nThis is where the advantages of Rust come in. It enables low-level development, like C++, but with added memory safety. This safety comes without additional runtime costs, preserving the application's high execution speed. Furthermore, Rust makes the development of complex and risky robotic projects more efficient.\n\n## Future Plans\n\nIn the near future, Esteve plans to add actions (asynchronous calls to a node’s functionality) in ros2-rust. They allow a client to track the progress of a request, get the final outcome, and optionally cancel the request before it completes. This, in particular, allows robots to create queries, for example, for navigation and localization purposes.\n\nLong-term plans include building a ROS 2 prototype launched on top of the Robonomics Network. This will allow us to use Robonomics on Substrate to create a WebAssembly app that can run ROS2 from a browser on the Robonomics decentralized cloud. We look forward to a new course at [Robonomics Academy](https://robonomics.academy) dedicated to ROS 2 and working directly from any browser!","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/cover.62c183a.268586f3596831daf0d2d0fa2c885458.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.268586f3596831daf0d2d0fa2c885458.jpg 480w","/assets/static/cover.6b2ed88.268586f3596831daf0d2d0fa2c885458.jpg 1024w","/assets/static/cover.62c183a.268586f3596831daf0d2d0fa2c885458.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-5417e22015af8beea4d00164d88e273f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-5417e22015af8beea4d00164d88e273f)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGgAAAgMBAQAAAAAAAAAAAAAAAAMEBgcFAf/EACsQAAEDAwMDAwMFAAAAAAAAAAECAwQABRESIUEGMVFhgZETMqEUIyRxkv/EABgBAQADAQAAAAAAAAAAAAAAAAUCAwQG/8QAJxEAAQQBAwMDBQAAAAAAAAAAAQACAxEEEiFBBXGBEzEyQlFhkbH/2gAMAwEAAhEDEQA/AMDp8GI7OlIjx06nVnCU%2baRXV6ejSjNRNYGhiIoOuvLyEJSO4JA5G2BSsbdTwEdPJ6cZcDR4v78JN4tUi1OstShhbiNewOBv2zz7eanwOnXZMFElxwpDgyhKEpUQONWVA7gE4GdhVu6/eiiylTkUureIDLw3CD3znjbjmqzbLtIbtjX8d76bCgVLaCcPAAgJVkcDI2ztxW%2bTGhhmLHbikPDnZOTiiVgp10fbft/FX5UZyNKXHcxrScZB2PII9Mb0pQ0qI8eKmPyf1cxyS6EIKzshGwSAMAAeMYFIkFKjqSRnxR7gLOlMsc6gH%2b9b90miiioK1eoSVrSkd1EAe9Xa%2bzBablbracC1pbQHmhsHASQc/GapTR0uoPhQP5rXZEKO7f46pDLTxUwsD6iArTgpII/0RSWDEZGu0mjYQXV52wyR%2boLFO2/NDfuOFGvFhbetc5CHJL6y1%2bwlbpUEY3ASP7HOaqt4kP8AT9kj2ZCkGQ8hT0g4B0auyR8HetAuTyo1olPN41tMqWnI2yBtWOXKc9cZrsuSQXXDk42A8Aela%2bouZD8NnEV4R3Q2yZViU2xpvzVDxz3Uxs25LiS4EFABzpSTwcbbelMQbZrRkNBBUe5Xkfdkq8j7cfmuNRQ4lrgLpTj39R/amSRHTDYDSm1u6iVFIUCBwCD859qh0UVBxtXNbpFXa//Z' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Robonomics & Moonriver Started XCM Integration","path":"/blog/xcm-integration-with-moonriver-started/","date":"November 22, 2022","description":"We are happy to announce that Moonbeam, a сross-сhain connected smart contract platform, and Robonomics Network have started collaborating by opening a set of bilateral HRMP channels between Moonriver and Robonomics parachains.","content":"\nWe are happy to announce that [Moonbeam](http://moonbeam.network/), a сross-сhain connected smart contract platform, and Robonomics Network have started collaborating by opening a set of bilateral HRMP channels between Moonriver and Robonomics parachains. The XRT token can now be used as [xcXRT](https://moonbeam.network/announcements/moonriver-adds-cross-chain-capabilities-and-xcksm/) across the Moonriver ecosystem.\n\nWith this integration, Robonomics can leverage Moonriver smart contracts into our parachain on Kusama. In particular, we are interested in a scenario where the launch and datalog functions are called from a smart contract. This feature allows us to take on-chain data and be able to translate that into real-world events, which is especially important for smart device applicability.\n\nIn August, Moonbeam announced a proof-of-concept of [XCM-to-EVM functionality](https://moonbeam.network/announcements/xcm-to-evm-functionality-moonbase-alpha/) on Moonbase Alpha TestNet. This allows developers on remote chains to trigger function calls on the Moonriver/Moonbeam platforms, allowing them to tap into the features of the developer-friendly EVM on their home chains. If remote EVM calls through XCM are enabled on Moonbeam ecosystem, then IoT devices and applications of Robonomics will be able to remotely call smart contracts on Moonriver with the native security of the Kusama chain, through XCM. This opens up an entirely new realm of possibilities for IoT devices that work on Robonomics parachain, as they’ll be able to access the immutability and security of smart contracts.\n\nWe are looking forward to new functional upgrades to build a truly decentralized world of robotics, IoT and smart devices!\n\n## About Moonbeam\n\nMoonbeam is a smart contract platform for building cross-chain connected applications that can access users, assets, and services on any chain. By uniting functionality from Ethereum, Cosmos, Polkadot, and more into a single platform, Moonbeam solves today’s fragmented user experience — unlocking true interoperability and paving the way for the next generation of applications. The Moonbeam platform uses integrated cross-chain messaging to allow developers to create smart contracts that access services across many remote blockchains. This approach, plus Moonbeam’s developer-friendly EVM platform, vast tool support, and modern Substrate architecture, creates the ideal development environment for building connected applications.\n\n## About Robonomics\n\nRobonomics Network — a decentralized cloud for secure and reliable control of IoT applications. It incorporates decentralization, blockchain technologies and token-based economics for the protection of smart devices and their data. Robonomics is aimed at: 1) control of smart devices with security and global availability, 2) serverless IoT applications for users for their privacy, 3) performing technical & economic transactions between people to machines and machine to machine for service efficiency. Moreover, the Robonomics parachain has an IoT subscription function that allows users to send device transactions without fee, for a period of one month. This allows, in particular, to make the smart home completely sovereign of centralized service providers, while keeping the ability to securely and remotely access devices at home.","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/cover.62c183a.58cc5225382b60764694061b7a08c001.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.58cc5225382b60764694061b7a08c001.jpg 480w","/assets/static/cover.6b2ed88.58cc5225382b60764694061b7a08c001.jpg 1024w","/assets/static/cover.62c183a.58cc5225382b60764694061b7a08c001.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a8ee58a1409f01fb455afb73495f7bc7'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a8ee58a1409f01fb455afb73495f7bc7)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAAUEBwIDBgH/xAArEAACAQQBAwIFBQEAAAAAAAABAgMABAURIQYSMUFhIlFSkcEHExQysdH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQYCA//EACMRAAICAQMDBQAAAAAAAAAAAAECABEDBBJBIiQxMmFiwdH/2gAMAwEAAhEDEQA/AKAoorfaRGWVQADyAAx0Cx8A%2b34FVYFwZgoszXLE0RUPrZUMNHfmsK6fqjDWdla2MmOv4rwSx6mCttknH9hr6WGiD44IpNhrJchkIbd7m2tlZht7iTsUjYGgdHnnim42GjOeHIMiBpz58muo6Q6FznVcMs%2bLgiW2jbsM88nYhb6RwST/AJS/q3ExYXP3tlBdW9zFFPIiGGX9wqquVAc6Gm0OasDofq6%2bwvSlmILq2js7XvZ4n7fi25J3xvZ9OflUnrzqzi7Kt/y8V%2bzSPhRrz3XtK66jwWR6cyb2GXtzDcKAw0e5XU%2bGUjyKWVYX6w9QNnr7GGW2S3lgicdqtskEg88/b81Xtb0bZ3wKdSu1%2bQPH3BzjLE4ja8RrGgdtF1Tjy3ipKppBH/ItioJPI3z9vaodFVANQZd3Mlr8J7hNbAroghB/ysJE7GMq3ERcN3Ds2Dve9jio9e0XEEo3cXzSSTzySyuZJpHLM7nlmJ2ST7n1p02MgSOaKyzWNkhmVA5lJjbYO9AEeN%2bvrr5UiPk0VOurE9LVAEciN77HuySXM2Yx9w4XfFwWdvYDW6UUUU0Vh6jcRrgVP//Z' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/az/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"az"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/de/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"de"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/es/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"es"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/fr/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"fr"}},{"node":{"title":"Testando l’EVM di Neon con gli Smart Contract di Robonomics","path":"/blog/it/testing-neon-with-robonomics/","date":"October 3, 2022","description":"Lo scopo di questi test è stato quello di validare quanto la piattaforma Neon fosse pronta per passare alla fase di produzione utilizzando gli smart contract di Robonomics, che consentono ai sistemi cyber-fisici (robot) di effettuare transazioni tecnico-economiche.","content":"\n## TL;DR\n\nLo scopo di questi test è stato quello di validare quanto la piattaforma  [Neon](https://neon-labs.org/) fosse pronta per passare alla fase di produzione utilizzando gli smart contract di Robonomics, che consentono ai sistemi cyber-fisici (robot) di effettuare transazioni tecnico-economiche.\n\nNel Robonomics Network, l’interazione è stabilita fra due parti: Promisee — chi ordina il servizio, invia una descrizione dell’attività tecnica e trasferisce i fondi per la sua esecuzione; Promisor — chi esegue un servizio. È stato testato un tipico scenario dove un contratto di responsabilità viene concluso fra un Promisee e un Promisor, seguito poi dalla validazione (effettuata da una terza parte) del lavoro conseguente e dal pagamento di una commissione al nodo che ha seguito il contratto fra le parti.\n\nPer questo esempio è stata utilizzata la simulazione di un braccio robotico, a cui è stato chiesto di eseguire una sequenza di azioni. I test hanno avuto esito positivo.\n\n## SCOPO E OBIETTIVI DEL TEST\n\nGli ingegneri di [Multi-Agent Systems](https://multi-agent.io/) lavorano da diversi anni con [Robonomics Network](https://robonomics.network/). La prima implementazione del Robonomics Network è stata creata per la rete Ethereum ed è un insieme di smart contract per la comunicazione da macchina a macchina.\n\nIl fulcro di Robonomics è il contratto di Responsabilità ([Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol)) uno smart contract che riproduce la tipica relazione fra il cliente di un servizio (Promisee) e il fornitore del servizio stesso (Promisor) e comprende i parametri tecnici ed economici della loro transazione. Le parti possono essere un agente autonomo e una persona (interazione uomo-macchina) o due agenti autonomi (interazione macchina-macchina). Il Promisee e il Promisor trasmettono messaggi con i parametri della loro transazione tecnico-economica, che viene fornita da un apposito nodo — il Provider — che ricerca una corrispondenza nei parametri. I Provider sono controllati da un [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), uno speciale smart contract che esegue una transazione quando il provider stabilisce una corrispondenza di mercato fra le parti.\n\nEsistono tre scenari dove può avvenire l’adempimento di un’obbligo:\n\n1. Un semplice impegno (senza verifica del risultato finale e senza commissioni pagate ai nodi Provider)\n2. Obbligo con una commissione pagata al Provider\n3. Impegno con commissione al Provider e validazione dei risultati con l’aiuto di una terza parte, l’observing network.\n\nLo scopo di questo test è verificare il terzo scenario di Robonomics sulla piattaforma EVM Neon.\n\n## DESCRIZIONE DEGLI SCENARI DI PROVA\n\nMentre sviluppiamo le zone industriali e le infrastrutture delle città moderne, l’emergere di imprese e servizi completamente automatizzati, controllati da sistemi cyber-fisici (CPS) e che forniscono i loro servizi come agenti autonomi è estremamente probabile. In tal senso, possiamo aspettarci anche la creazione di reti di CPS autonomi al fine di aumentare la velocità e la qualità della comunicazione nel processo di produzione e fornitura dei servizi.\n\nPer sfruttare appieno le possibilità degli smart contract, è stato scelto uno scenario di interazione fra due agenti economici autonomi. Considera il ciclo di vita della responsabilità nel Robonomics Network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nLa figura qui sopra mostra come il provider di Robonomics chiami il contratto Lighthouse, che a sua volta chiama la [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) per creare il Liability contract. Il contratto di Responsabilità contiene i dati sulla transazione, come i termini di riferimento, il pagamento del servizio, l’indirizzo del validatore e la scadenza.\n\nPer saperne di più sui possibili casi d’uso di Robonomics, dai un’occhiata alla pagina [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer)!\n\nPer replicare tutta infrastruttura Robonomics su rete Neon, implementeremo lo scenario dell’avvio di un robot tramite un contratto di responsabilità simile a quello in [questo](https://wiki.robonomics.network/docs/en/kuka/) esempio. Se lo script può essere ripetuto, tutte le funzioni funzioneranno.\n\n## PRODOTTI FINALI\n\nIl codice sorgente dei contratti Robonomics è disponibile [qui](https://github.com/airalab/robonomics_contracts).\nI contratti utilizzano molte funzionalità della Ethereum VM, che includono:\n\n- Token [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) ERC20\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Contratto proprietario per [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) dei contratti\n- Vari modificatori e ruoli nei contratti\n\nIndirizzi dei contratti nella devnet Neon https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Codice sorgente](https://github.com/Multi-Agent-io/neon-kuka-demo) dello scenario.\n\n## MODIFICHE APPORTATE AI CONTRATTI ORIGINALI\n\nGli smart contract sono scritti per Solidity 0.5.0. e per tanto, non sono state necessarie modifiche durante la distribuzione e l’utilizzo dei contratti.\n\n## WORKFLOW DEL TESTING\n\nIn generale, il test consiste nell’invio di messaggi corrispondenti da un agente all’altro.\n\nSuccessivamente, il Promisor trova un nuovo contratto di responsabilità nella rete e inizia ad eseguirlo. Al termine dei lavori, viene inviato un messaggio con l’esito, che viene poi registrato nel contratto.\n\nTrovate le istruzioni dettagliate per l’avvio nel [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## I RISULTATI DEI TEST IN DETTAGLIO\n\nScreencast del processo\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nAll’avvio della simulazione viene creato un messaggio di offerta e un messaggio di domanda arriva dal Promisee, dopodiché viene creato un contratto di Responsabilità utilizzando la funzione createLiability del contratto Lighthouse. I token vengono poi trasferiti dall’indirizzo del Promisee all’indirizzo del Liability contract con l’aiuto del contratto XRT.\n\nDopo che un nuovo contratto di responsabilità viene scoperto sulla devnet di Neon l’agente inizia a lavorare. Il risultato del lavoro (telemetria) viene scritto in un file e inviato a IPFS, mentre l’hash del file viene salvato di conseguenza.\n\nQuando il lavoro è completato, il contratto di Responsabilità viene finalizzato utilizzando la funzione finalizeLiability() del Lighthouse contract e i token vengono trasferiti dall’indirizzo di Responsabilità agli indirizzi del Promisor e del Validatore.\n\nLa corretta esecuzione della simulazione ha mostrato che tutti i contratti e la piattaforma Neon funzionavano perfettamente.\n\n## INCONVENIENTI DELLA PIATTAFORMA NEON\n\n### IL TRUFFLE FALLISCE SE NON RICEVE RISPOSTA DALLA RETE\n\nDurante il processo di distribuzione dei contratti, si è scoperto che il proxy non restituisce sempre una risposta in tempo, motivo per cui il Truffle termina con un errore:\n\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nNon è stato possibile trovare una relazione fra le condizioni del test e il verificarsi di un errore, ma molto probabilmente la Neon EVM non può inviare una ricevuta di transazione e il Truffle non può elaborare una risposta Null.\n\nSe aggiungiamo un timeout e riproviamo qui [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), allora la distribuzione dovrebbe procedere senza errori.\n\n### NESSUN ENDPOINT WS/WSS\n\nA differenza di Ethereum, la Neon EVM non ha un endpoint WS/WSS, il che rende impossibile sottoscrivere gli eventi dalla rete. Durante i test abbiamo quindi monitorato gli eventi manualmente.\n\n### NESSUN EVENT NAMES\n\nLa Neon EVM restituisce descrizioni degli eventi piuttosto scarse dopo una transazione, ad esempio:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\n\nInvece di 0, 1, ecc. ci aspettavamo di vedere degli eventi con un nome.\n\n## CONCLUSIONE\n\nUtilizzando la piattaforma Neon EVM, è stato testato con successo uno scenario in base al quale si conclude un contratto di responsabilità fra un Promisee e un Promisor, con con una terza parte che convalida il risultato del lavoro svolto. Con anche un Provider che ha verificato la coincidenza di domanda e offerta tra le parti e ha ricevuto una commissione per il servizio.\n\nLa dimostrazione ha utilizzato la simulazione di un braccio robotico che è stato assunto per eseguire una sequenza di azioni. A seguito del lavoro, il robot ha inviato un file con la telemetria ricevuta durante l’attività.\n\nNonostante alcune particolarità nel funzionamento della rete, alla fine tutti i contratti partecipanti hanno mostrato la loro operatività in ambiente Neon.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"it"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/ja/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"ja"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/ko/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"ko"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/pt/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"pt"}},{"node":{"title":"Testing Neon EVM with Robonomics Smart Contracts","path":"/blog/zh/testing-neon-with-robonomics/","date":"October 3, 2022","description":"The purpose of these tests were to validate the readiness of the Neon platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.","content":"\n## TL;DR\n\nThe purpose of these tests were to validate the readiness of the [Neon](https://neon-labs.org/) platform to move to the production stage using Robonomics smart contracts, which allow cyber-physical systems (robots) to make technical-economic transactions.\n\nIn the Robonomics network, interaction is established between two parties: Promisee - the one who orders the service, sends a description of technical task and transfers funds for its execution; Promisor - one who performs a service. A typical scenario was tested, whereby a liability contract is concluded between a Promisee and a Promisor - this was followed by validation of the resulting work by a third party, and a commission payment to the node that accompanied the contract between the parties.\n\nFor this example, a simulation of a robotic arm was used, which was asked to perform a sequence of actions. The tests were successful.\n\n## Scope and Goals of Testing\n\nEngineers of [Multi-Agent Systems](https://multi-agent.io/) have been working with [Robonomics Network](https://robonomics.network/) for several years. The first implementation of the Robonomics Network was created for the Ethereum network. It is a set of smart contracts for machine-to-machine communication.\n\nThe core of the Robonomics Network is the [Liability](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Liability.sol) contract, a smart contract that reproduces the typical relationship between the customer of a service (Promisee) and the service provider (Promisor), and includes the technical and economic parameters of the transaction between them. The parties can be either an autonomous agent and a person (human-to-machine interaction), or purely two autonomous agents (machine-to-machine interaction). The Promisee and Promisor broadcast messages with the parameters of their technical-economic transaction, and then the conclusion of the transaction is provided by a special node - the Provider - which looks for matches of these parameters. Providers are controlled by [Lighthouse](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Lighthouse.sol), which is a special smart contract that executes a transaction when the provider establishes a market match between the parties.\n\nThere are three scenarios in which the fulfillment of an obligation can take place:\n\n1. A simple commitment (with no verification of the final result, and no commission paid to Provider nodes)\n2. Obligation with a commission paid to the Provider\n3. Commitment with a commission to the Provider and validation of the results with the help of a third party - observing network.\n\nThe purpose of this test is to test the most complex, third Robonomics scenario on the Neon EVM platform.\n\n## Testing Scenarios Description\n\nAs we develop the industrial zones and the infrastructure of modern cities, the emergence of fully automated enterprises and services that are controlled by cyber-physical systems (CPS) and which provide their services as autonomous agents is highly likely. In this regard, we can also expect the formation of networks of autonomous CPS in order to increase the speed and quality of communication in the process of production and provision of services.\n\nIn order to take full advantage of the possibilities of smart contracts, a scenario of interaction between two autonomous economic agents was chosen. Consider the liability life cycle in the Robonomics network:\n\n![Liability Life Cycle](./images/testing-neon-with-robonomics/step-by-step-3.jpg)\n\nThe figure above shows that the Robonomics network provider calls the Lighthouse contract, which in turn calls the [contract factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol) to create the Liability contract. The Liability contract contains data about the transaction, such as the terms of reference, payment for the service, validator address and the deadline.\n\nTo learn more about the possible use cases for Robonomics, check out the Robonomics [R&D](https://wiki.robonomics.network/docs/en/r-and-d-based-on-robonomics-network/#launching-a-drone-under-the-control-of-a-decentralized-computer) page!\n\nTo replicate the entire Robonomics infrastructure on the Neon network, we will implement a robot launch scenario through a Liability contract similar to this [example](https://wiki.robonomics.network/docs/en/kuka/). If the script can be repeated, then all functions will work.\n\n## Deliverables\n\nThe source code for the Robonomics contracts is available [here](https://github.com/airalab/robonomics_contracts).\nThe contracts use many features of the Ethereum VM which includes:\n\n- ERC20 [XRT](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/XRT.sol) Token\n- [Factory](https://github.com/airalab/robonomics_contracts/blob/master/contracts/robonomics/Factory.sol)\n- Own contract for [ENS](https://github.com/airalab/robonomics_contracts/blob/master/contracts/ens/ENS.sol)\n- [Proxy](https://github.com/airalab/robonomics_contracts/blob/master/contracts/misc/SharedCode.sol) for contracts\n- Various modifiers and roles in contracts\n\nAddresses of contracts in the Neon devnet network https://devnet.neonevm.org\n\n| Contract Name  | Address                                    |\n|----------------|--------------------------------------------|\n| Migrations     | 0x1DC538bE2C8572509a571B150f11aB55E52EF12E |\n| ENS            | 0xa7AEa12F60D0278F01e14DBC7cc459d04d051406 |\n| DutchAuction   | 0xF44F8803548D72Dbc3E28340EFD7b5328aa4F058 |\n| Liability      | 0xA694196351dc1488e3884eCc6b650F0d8D55346a |\n| Lighthouse     | 0x80FB5CC4c396E272b56700E6ffF5DBf4661013A8 |\n| XRT            | 0x3322d7D99cF65Cab5A92073c928b5E9674af3c29 |\n| PublicAmbix    | 0x85c03bE5ccFf11E79a0A776D183eF067590549d1 |\n| Factory        | 0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C |\n| PublicResolver | 0xAC9E9AA8A4cB524FE87f2b14489F1D6bE68dc46e |\n\n[Source code](https://github.com/Multi-Agent-io/neon-kuka-demo) for the scenario\n\n## Changes Made to Original Contracts\n\nThe contracts are written for Solidity 0.5.0. As such, no changes were required when deploying and using the contracts.\n\n## Testing Workflow\n\nIn general, the test consists of sending corresponding messages from one agent to another.\n\nNext, the Promisor finds a new liability contract in the network and begins to execute it. Upon completion of the work, a message is sent with the result, which is then recorded in the contract.\n\nStep-by-step instructions for launching are in [README.md](https://github.com/Multi-Agent-io/neon-kuka-demo/blob/main/README.md)\n\n## Testing Results in Detail\n\nScreencast of the process\n\nhttps://youtu.be/fYJVF7KrNnI\n\n![Liability](./images/testing-neon-with-robonomics/liability.jpg)\n\nWhen the simulation starts, an offer message is created, and a demand message comes from the Promisee, after which a Liability contract is created using the createLiability function of the Lighthouse contract. With the help of the XRT contract, tokens are transferred from the Promisee’s address to the address of the Liability contract.\n\nAfter a new Liability contract has been discovered on the Neon devnet, the agent starts working. The result of the work (telemetry) is written to a file and sent to IPFS, the hash from the file is saved as a result.\n\nAfter the work is completed, the Liability contract is finalized using the finalizeLiability() function of the Lighthouse contract and the tokens are transferred from the Liability address to the addresses of the Promisor and Validator.\n\nThe successful execution of the simulation showed that all contracts worked correctly and the Neon platform works.\n\n## Neon Platform Drawbacks\n\n### Truffle fails if it doesn't get a response from the network\n\nDuring the process of deploying contracts, it turned out that the proxy does not always return a response on time, which is why Truffle ends with an error:\n\n```\nTypeError: Cannot read properties of null (reading 'from')                                    \n    at Web3InterfaceAdapter.<anonymous> (/usr/lib/node_modules/truffle/build/webpack:/packages\n/interface-adapter/dist/adapter/web3/index.js:71:1)                                           \n    at Generator.next (<anonymous>)                                                           \n    at fulfilled (/usr/lib/node_modules/truffle/build/webpack:/packages/interface-adapter/dist\n/adapter/web3/index.js:5:43)                                                                  \n    at runMicrotasks (<anonymous>)\n    at processTicksAndRejections (node:internal/process/task_queues:96:5)\nTruffle v5.5.23 (core: 5.5.23)\nNode v16.14.0\n```\n\nIt was not possible to find a relationship between the test conditions and the occurrence of an error, but most likely Neon EVM cannot send a transaction receipt, and Truffle cannot process a Null response.\n\nIf we add timeout and retry here [index.ts#L75](https://github.com/trufflesuite/truffle/blob/develop/packages/interface-adapter/lib/adapter/web3/index.ts#L75), then the deployment should proceed without errors.\n\n### No WS/WSS Endpoint\n\nNeon EVM does not have a WS/WSS endpoint unlike Ethereum, which makes it impossible to subscribe to events from the network. Therefore, during testing, we monitored the events manually.\n\n### No Event Names\n\nNeon EVM returns rather poor descriptions of events after a transaction, for example:\n\n```\n events: {\n    '0': {\n      address: '0xCFa833bF0D46369D9024f95c9C8dFa1E4a07806C',\n      transactionHash: '0x9894a984e6b3f6ce469c8837e11739f6e50d00216cf7c5bc3d32da106a58d50a',\n      transactionLogIndex: '0x1',\n      blockHash: '0x72040f317d3a469d30327d4e1def903790b70dbede46b4f0ea4f28f30a679a80',\n      blockNumber: 156073183,\n      transactionIndex: 0,\n      logIndex: 1,\n      id: 'log_e51e2f9f',\n      returnValues: Result {},\n      event: undefined,\n      signature: null,\n      raw: [Object]\n    },\n...\n```\n\nInstead of 0, 1, etc. we expected to see named events.\n\n## Conclusion\n\nUsing the Neon EVM platform, a scenario was successfully tested whereby a liability contract between a Promisee and a Promisor is concluded with subsequent validation of the result of the work done by a third party. Additionally, a Provider participated, who checked the coincidence of supply and demand between the parties, and received a commission for this work.\n\nThe demonstration used a simulation of a robotic arm that was hired to perform a sequence of actions. As a result of the work, the robot sent a file with telemetry received during the task.\n\nDespite some peculiarities in the operation of the network, in the end, all participating contracts showed their operability in the Neon environment.\n\n\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/blog_cover_neon_multi-agent.9ea8d39.6231caf624da0ea84dd55d0582533702.jpg 480w","/assets/static/blog_cover_neon_multi-agent.6b2ed88.6231caf624da0ea84dd55d0582533702.jpg 1024w","/assets/static/blog_cover_neon_multi-agent.62c183a.6231caf624da0ea84dd55d0582533702.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6809607028734338a4644390df615667'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6809607028734338a4644390df615667)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMAAwAAAAAAAAAAAAAAAgUDBAYBBwj/xAAuEAACAQMDAgQFBAMAAAAAAAABAgMABBEFEiEGMRRBQlETUnGBkQciMkNyobH/xAAYAQADAQEAAAAAAAAAAAAAAAAAAQMCBP/EACARAAIDAAICAwEAAAAAAAAAAAECAAMREjEhQTJxofD/2gAMAwEAAhEDEQA/APL0UXxFc7gNoz2qOiSRkBCnAPettddCi36et9V8aJI7jTxepGAAysFyykHuO2CPI11VUvccQdStNFlpPAbkw9HAqvIFclVPcgZP4rZWv6fz3Ns08Ws6WVXYGUu27ceSoGMk8gD5jwOaVa/09JoAhdr20u3ZtrJCTlDjIzke34PB5qIMkevESXMaxTMiljtJB3DBB9iKAxuApKNhslTjv5cVahWG4uH8ZN8A/wCJbLfXyrfab0zjRJjbiSSWJC8Mwm%2bGWZkDEKApwBkDk4J9qZgNzzOtSCO4I%2boqSSLZEj7gd3lg021/T721LvqM8ksgYBCxLZX3z%2bP90naRmUKT%2b0dqBA76g1ea8vp7SNZL2ZobcFI42kOEBGCFHkCOKo0ayMsbIP4t3pgkR6w%2bJkf2FP8AobSU1jqW1t5wfCJumuGHpjUZJ/4PvSGtV0W6JpfUG6PcwtgyMGKlSA3PHfv2NStV2QqnZlaWRbA1nQ/v2UtZk0G6txcaet3b3juVeB8MgA/sBA9Xy44Oe4q/o3VEqW62MkT7ZI1hYpOyBsKEHHpO0YJGM45rJDtXNCJwGbv3MO3M8iIx1i%2buNUl8ZdOmTwqKMbR7UuozKxiEfpBzQVSYG%2b5//9k=' /%3e%3c/svg%3e"},"locale":"zh"}},{"node":{"title":"Robonomics & Crust Networks Strategic Partnership!","path":"/blog/robonomics-and-crust-networks-strategic-partnership/","date":"July 22, 2022","description":" This partnership means there will be much deeper integration between the Crust and Robonomics parachains on Kusama, as well as an interesting new approach for cross-chain collaboration to simplify the user experience.","content":"\nimport RoboList from '~/components/blocks/List.vue'\nimport RoboListItem from '~/components/blocks/ListItem.vue'\n\nWe are happy to announce that Crust and Robonomics have started collaborating to bring resilient data storage infrastructure to robotics and smart devices. This partnership means there will be much deeper integration between the Crust and Robonomics parachains on Kusama, as well as an interesting new approach for cross-chain collaboration to simplify the user experience.\n\nThere are two main objectives that we are looking to achieve together:\n\n<robo-list>\n    <robo-list-item>\n        The resilient storage of data that comes from Internet of Things (IoT) and robotics devices. Currently, the Robonomics parachain uses IPFS both on our robotics controllers and centralized pinning services to make it persistent. Having access to Crust’s decentralized pinning service will offer users cryptographic proofs of storage in many redundant storage locations.\n    </robo-list-item>\n    <robo-list-item>\n        Decentralized hosting of dApps. This is something that was not available before, and as a result, Robonomics dApps had to be hosted by traditional cloud providers or using owned hardware. With Crust, dApps can have decentralized hosting, which guarantees that services will remain available. The fact that developers can create services with no single point of failure, that will remain available for users globally, is extremely important for robotics and any physical world deployments in general.\n    </robo-list-item>\n</robo-list>\n\n<p align=\"center\">\n  <img src=\"./images/robonomics-and-crust-networks-strategic-partnership/spot.gif\">\n</p>\n\nRobonomics team has already started exploring Crust Network and has been impressed by the diligent approach to documentation. You can already launch a [Boston Dynamics robot in Bay Area lab](https://spot.merklebot.com) via a Robonomics parachain transaction, whilst the data will be recorded on Crust. Feel free to try it out for yourself on [spot.merklebot.com](https://spot.merklebot.com).\n\n![Demo web app](./images/robonomics-and-crust-networks-strategic-partnership/demo.png)\n\nNow, we will focus on XCM integration between the Crust Shadow and Robonomics parachains. This will allow us to send transactions for storage directly from smart devices in a fully decentralized way. It should be noted that there is an interesting set of questions related to transaction fees when services are delivered by one parachain to another, which needs to be answered.\n\nWe believe that the user should only pay for a transaction within the parachain they were using. In our case, when a Robonomics parachain user wants to save the data from robotics and smart devices to the Crust Network - they will only have to pay for services in XRT.\n\nThe Robonomics parachain is working on deploying a special pallet that would be able to send a transaction to Crust Shadow with the requirement to save the data and pay from the Robonomics parachain account directly in CSM tokens.  The user will be charged some XRT to compensate for the storage cost automatically.\n\nEventually, parachains will automatically sell native tokens on a DEX to replenish the balance of other parachain tokens that offer additional services. It is mindblowing to realize that this fully decentralized and autonomous scenario is already realistic!\n\nWe are looking forward to an exciting future collaborating on truly decentralized solutions in the field of robotics, IoT and smart devices.\n\n## About Crust\n\nCrust Network is a versatile, purpose-built storage blockchain that delivers truly decentralized file storage and hosting capabilities for the entire Web3 ecosystem, empowering privacy and data ownership. Crust Network enables dApp hosting, NFT metadata storage and encrypted file storage across a wide range of blockchains as well as business cases.\n\nJoin Crust Network now and enjoy access to around 1,000Pb storage across more than 2,300 nodes!\n\n[Website](https://crust.network/) | [Twitter](https://twitter.com/CommunityCrust) |[Wiki](https://wiki.crust.network/) | [Telegram](https://t.me/CrustNetwork) |[GitHub](https://github.com/crustio) | [Facebook](https://www.facebook.com/CrustNetwork/) | [Discord](https://discord.gg/wjDDpb5)\n\n[Decentralized Cloud Foundation](https://decloudf.com/) | [Uniswap](https://medium.com/crustnetwork/decentralized-uniswap-interface-hosting-on-ipfs-18a78d1209ac) | [Polkadot](https://dotapps.io/) | [NFTs](https://medium.com/@bluna.io/bluna-future-of-metaverse-b7fc96fcff6a)\n\n## About Robonomics\n\nRobonomics is an open-source platform for IoT applications. We support a new generation of internet technologies (web3) that implements the exchange of technical and economic information in the form of atomic transactions between user applications, IoT services, and complex robotics.\n\nRobonomics contains a complete set of tools for developing IoT applications, both on the robotics and the user interface sides. Communication between the user and device happens using the most successful technologies from the Web3 world – IPFS, Ethereum, and Polkadot. Thus, developers can create modern and secure applications from Smart Home to Industry 4.0.\n\n[Website](https://robonomics.network) | [Twitter](https://twitter.com/AIRA_Robonomics) | [GitHub](https://github.com/airalab/) | [Wiki](https://wiki.robonomics.network/en/) | [Discord](https://discord.gg/PuBEDkTzSx) | [Blog](https://robonomics.network/blog/)\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.1ab2ecde50db774cf2a9561594cc3e16.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.1ab2ecde50db774cf2a9561594cc3e16.png 480w","/assets/static/cover.6b2ed88.1ab2ecde50db774cf2a9561594cc3e16.png 1024w","/assets/static/cover.62c183a.1ab2ecde50db774cf2a9561594cc3e16.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6133bcfe9adc33eed38013b7605a7e0f'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6133bcfe9adc33eed38013b7605a7e0f)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAAAsSAAALEgHS3X78AAAGVUlEQVRYw%2b1YaWxUVRSeiAJK16Ht7MvrFGkLEcpSdi38ILhrFJBSWtphtVAMSCEaNjtQ6MJSRCiKbBFbKAhBBQwEpPxxCQiIQCQEEjXBhBATE5j33sznuffNe52ZTstgzFCBHyd3f3PPd7/z3XNHl97djdhbCTdnshsnZ2cB6/S4XZUGsSb2pnsEwCMA7t0BgZX6El4KKVNC2g8HA1RnqXR1KwhpP/AACCoDkoshGKbDNHRlKCMeZABCqJ44GQ57GZILd0NIm6YA8jAAIAQBYe/xLnfenjFPAyA6LfgfAhDiXBKdvqMMduEduBKLOABOSyn1F0epBQEA9FPQXNarTQC81anttmMOgAYCKb%2btZzmvO%2bMLIaRO1drRsUAByJZQjOPT0oE6BYBgB7V6rbHFIrVrDEHrDKFzwtuBNcG/o/s3p293zYVgngmraSbyShqQrS%2bGjRjhcM7h422BILA%2bdnOkuGEn5vTLnI8rmyYBtYm4U23QNqcad25FN3g9neFd/qTSz0rWXvEUtVPgXRmvrKvSUz2Ryu40p4sypzIe3lVJgfVdFQs4r5a6e4p7inOncQZsmQvQs8t4dH51C0pP%2bTDp%2bVqkdcmHI2shZ0NbN4IKQEbqFJi6TsDLY9YCFxsUZyKcDnNA2jMWvqvHIO2fzAGR9hVA%2bmompIbXIK6xQtyWx50W1/eA%2bMlgiOucNLcI0pczIG4fBbG%2bL6QDbkh7J0BqeiuMMVEC0HL6xZzqzEmXfTZ0G66h7MRtNO68RPHshsP8tiKIEVggBOmCkFyCtCfGY3ReFeTTWyB66MSqUkKo7K2Mg3zSA/9fv8F3YQ/kM1v5mHSgBNKhMviuHIZ0ZC58vzQpQO1%2bA/IPGyE3V1LfXsjHF0NqJJC2DIHv4j74b5yDfHQBhYEpegBaCZ91Flf%2bjM7jkDTrIHRNf6Nw6%2b84fcaL6dN2wtBpHJyZ5Zwlka5FlQE1nr3Y13AKRw6dg//mr/Cd3c4dET8dRjROUDbJAPhpG51cPrwLdfB%2b8Jhyul/P4qfru3wQMgPg/C54Kx6HtOsFyN9/CPnYe/xbDDyp8XV4l%2biICSMh/1gP71Kdpgt3DQEhPOVlokXUT08ohGWAB3F1N2Gfeh1ZL13GhPI/ULfzBnKzy2ElJtiZIEa4FlUABmXPRW7PMhTlb6bT3Q1xQybEzQOI0jYe10ysWKz7Lu2H79oJDoz0%2bSsQd4yC/88LdLpL4L91lSifC9/1ZogbexMrZnMw2DekpvGQv6uj0DnKnZb2jOMsYhqhCeNdGcAoG9i8i5x2EOUdDhK5%2bALYey9DRu%2bP8LRrDTKy1sHsXI1eORvRv9f7cMYVwEEi6aRwSCeh00AICgE7JVF63ZsUAtXA%2bR10up0UsWLOq/FPoibW9yMQDsAvi5wNYn0OpMNzOBvkE8sImKGQv5nPQfT93AjpszFcI%2bSzO7hJXxRyARS3Dufhwn4jagCChY/d%2bZY%2bi5VTpSswPZGuvsSJlMgUQEgqgEtPTifkc2VPZ48jUnlLv6UKCCoTwkTQFjcJeYMrcOtwBeRVpNY1xpBbgOsAhQMLBfHjgYrKB0wZS1Tm0jgHj81lxm4GNo/1VcYrc9nNwJ0P/n4QAOFU14yccXWbCMPo9Uh9cRMcNqYB87jQMS2wZ7SYg7eVfjav%2b9jtMA2phIsYob4YWzRBSYQclAl%2bW5rZTh5g0JxtncQE3fFa2xA2boicW4QzoE0AIj19o7R2v6dlgu2nwq0SnLA7PBqLCoCQ5yzFO1N89tjhdaIwi2WX1l%2bk9KttNs7KpMB8Ns76Auu4Ba9j9QAIdwMgZm8B9ZpzWkthfK4GlpwlMA9eAeOIah77jMrMLP2X8dKc64Fp2CpYn1nEx5mx/IA9jc2DlsPSl9YPqFDm0Xf4OppvfLYa1j6LCBwFhA7zGFKTHPagYU7wDVNpHLma180DKwiYWu4c6zcNr%2bLGHFWdZekxA4%2bBZsteyPWAzTEP9HAgOBgjaE3O0sBjqQMxoFUIqLROKAqqF3KQNDqrVGdr1FDg/ZNbh4BaTygKDYEOxYB2ROu/to79f0DwQ6adejhgEf8DCF/z6G/xDgiAoHf7Y23kPDcCwE8A%2bAkAPwHgpw3F3O4TA9zaNdjMGECZ4J37yAAp1kanz40AkIgBEjFAIgZItKGY2z/cDo7luV8PiAAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"RMRK x Robonomics Network: Pallet integration and Kanaria rewards","path":"/blog/partnership-with-rmrk-announcement/","date":"December 23, 2021","description":"Robonomics is thrilled to announce we have partnered with RMRK to bring a robotics theme to the Kanaria project and support RMRK2.0 standards! Kanaria is the most advanced NFT project in the world built on the world’s most advanced NFT protocol: RMRK.","content":"\n[Kanaria](https://kanaria.rmrk.app/) is the most advanced NFT project in the world built on the world’s most advanced NFT protocol: [RMRK](https://rmrk.app/).\nKanaria NFTs are birds that can own and even equip other NFTs, building an item economy that can span not only different projects (automatic cross project compatibility) but also different chains due to being launched on Kusama - a “Layer 0” for chains to connect through. Kanaria are also the precursor to RMRK’s upcoming metaverse - [Kanaria: Skybreach](https://url.rmrk.app/meta).\n\nRobonomics has committed to supporting the addition of RMRK’s pallets into their runtime, thereby integrating natively with the world’s most advanced NFT logic (the addition is still subject to community governance vote). This integration allows RMRK 2.0 NFTs to natively exist on Robonomics' upcoming parachain, and has implications for the extension and exploration of how NFTs built on the RMRK standard can be utilized in IoT applications and complex robotics.\n\nAs one of the first projects engaging and building within the Polkadot ecosystem, Robonomics offers a platform to build Web3 robotic solutions and applications for use cases within supply chain, payments systems, production, digital passports, and *robots-as-a-service*.\n\nRMRK on the other hand will reward the top 500 crowdloaners [participating in Robonomics crowdloan](https://robonomics.network/kusama-slot/). These champions will be airdropped a special Kanaria-compatible item - a child NFT that can be equipped onto one’s Kanaria bird, and may bestow advantages in [RMRK’s metaverse](https://url.rmrk.app/meta).\n\nYou do not have to have a Kanaria bird to get this bonus item, but you do have to be in the top 500 contributors.\n\n## About Robonomics\n\nRobonomics is an open-source platform for IoT applications. They support a new generation of internet technologies (web3) that implements the exchange of technical and economic information in the form of atomic transactions between user applications, IoT services, and complex robotics.\n\nThe Robonomics platform provides tools for working with the robot economy network. Robonomics allow designers of smart cities and industry 4.0 zones to build trust among the autonomous robots services, provide direct user access via dapp for ordering products from autonomous factories and services of urban sensor networks. This in turn allows Robonomics and it’s users to put in place a decentralized system that globally monitors the activities of cyber physical systems.\n\n\n## About RMRK\n\n[RMRK](https://rmrk.app/) is a team spearheading the development of the RMRK protocol for creating highly composeable “NFT legos” using NFTs on the [Kusama](https://kusama.network/).\n\nAmong others, RMRK brings the following features to the NFT table:\n\n* emoting to NFTs on chain\n* custom burn messages\n* NFTs owning NFTs\n* NFTs that have conditional rendering (if this, show that)\n* NFTs that have slots for upgrades\n* NFTs that have multi-resources (i.e. contain both code for a game and high-res cover art)\n* NFTs that can be governed as DAOs\n\nIt thereby far exceeds what the current ERC721 / ERC1155 standards and their derivatives can do.","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.66d3ac0daebfd1e49baa052361ed7534.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.66d3ac0daebfd1e49baa052361ed7534.png 480w","/assets/static/cover.6b2ed88.66d3ac0daebfd1e49baa052361ed7534.png 1024w","/assets/static/cover.62c183a.66d3ac0daebfd1e49baa052361ed7534.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3c9847db960a35a123fa4b111cad9ccc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3c9847db960a35a123fa4b111cad9ccc)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAAAsTAAALEwEAmpwYAAAMJ0lEQVRYw81YaVSU1xmeXz2nOadpf7S/mqbVxIUdB2UHZxhmY5NFQPZVAxGVHUU2qeKKa0zcoomaKGkxUcS4L%2byzzzCAKIioSU6SniZpT5L2tCfn6XvvNwwzikp7jtof77nf/e797nff5Xne917RPKUeHuEGSBJ60dEziPPX7uBKxwgM5lvQGEahNY5CZxpBR%2b9NnLkwgl7tTdQ0XcfchXqIVQaw7%2bcpDS9MvBXCHljrKjXALWxiTG8fc96j3mlMJCxi4oOqlCsQKzoQlalFyyc6fNTahpN/bsPHbRextPQG3GUGhCddR2hsJzzlxikWfxEiKOOj0mBxvhYxWRrMU2jtCnrJDXAP00%2bKzNloZAAdKd2FBRGdSMragcycMqTn1COvoAHFJSUoWrkKK4rLkZq9geYxI5hJ%2bckFhMVevAFYm1KoQVyehpQWnMKUD1ykhTpdB1mykYsqTUO66iYjQBLfhW1vX8G7u3fi%2boUWbN21H%2bUVxagsW4qqyhI0Njairq6WnivgF3mNPjRD/NjwenZKCpEq/E9s/6fzvxkE3GWTY160x8CoXoJsP0F4GGcvDSOvlK2jtc8RyRbfwMEWI271nsJ3lndx/nIn1tTtRELGEWS/sQvl5ZXIycsmWQb/yA6yqkmwOltAoX9uOPe2/csznIW08I5xkKeccZiOj/moDZzPPBzCnPX9IjXwj9YiJLaPR4cTBAKirqB642ns27kH7TuS0Xm9E5WNFxCg%2bgCl5evQUF9JsCiGNHqPfRPPH/uTERASp0dMjg5%2bUVrMCu6Df4wFofEDZBQtEbMGyhQNcZieOME5ShkcvOST/QkCF3krNAiIvERh1YE5C%2brx%2btxgJKauxrr61Vi%2bsg7yuP1gc7wUVocwNDgY41l5XT%2blAcKT9Th04AY%2baB2H1vx36E3D6NH2wDL4Dc5c/AoffWwgLtDaeWqe8lGnMSKcEypARCSQBYW1ygpP6VX4hq5EdGwc0tOTkV/YCFnMLoilRzE3qJU%2bNjlv7hkZga3vaADHkPUM1yM%2bVYuitcPoH/ob7t2/jZu3%2bvDgs%2b%2bwbd84kgoG4BctzHP8dkJ5L7kOqtQ%2b5BRr4R/VxwxgG1QQjlT9Aq6kbQiN3IvisgYUvplNUFiD%2bLQ9WBC8HF6yizTfImzyqZ77bz3t/E7A68OKGDCXyM5FwsK9l5jdAkXKIBRLCOdEeDMDdQ9FqTNhMsPIl2iRXqTl2UDkHNa29ECG8FIM8NCXxp5Cau4ulFY2Iy83DX6y7aT4AFj6fDgCHH/MNv80eRhOjp73IDaPyxsgzJse8SbDcmg8g4OWDKEn0RHJCYp521Oj/rFEKkDAMAmBiXC2MzuLBiUzhpGwZIGbrJ%2b3kog/QiqPJ77o5mNTEeHET/yijPAl8Y82IiDGJPQjjbzlfXrPos051G2ep3ZBhBELF5sRFGvifUePThhCrBLeT6wz0Z86Ch9KpSr9ZCX4qAKODEqFkpKR4BD8VYehiM6Av/oj6vcLUWDHl8CsblIdarbcxVtHPkfz/gfY9NZ9NO4YJ3w%2bwM5Dn2Erteu2j2MPjddtvcvTGFPQQ%2ba86cBFJkgTzVwWRBjsxY0jHzg%2bP%2bzl6Yro6elHbwt18riiE7K4JsqrbbQhiy1KDE4VIdtA5YY7OPXpX3C1%2b1u0X/krLnd%2bw4X1W9q%2bxrWeb9HQPI43q2/zb0LizYjLH7TDgkVOUKwZHdrvUVQ7xvO7j8qRIJ09OgkdvdM%2bBEjrpyTWaRrABg27pc2Yr%2b6AD0FgvlLLoSJmIWjDHIsAD8Lr%2bl33cLz1SxwjOfEJpSZSmil%2b/NRXOPThFzh5%2bivsO/YF1m4e4xHAICFPsdi8TDlcbcTqphHcvH0fbx8dgTTJwqPAU66fIhUbbXs18iwlKM0InSpWNaVulcnhAPRo9hJNrwhxwB2Jq3wAr4aNw015G%2btXNODklgoYWnZiX/UGzJaYUbjmFtZsHENZ4ygpMorSdSOoorascYSUvsP7Dc1jKKq5JWyWIomlJ9aq0i3kfSPV7wYoU7upqNEQHIz03M/5w8vJCMQP4d38W6/wHniHd5DClKGUxFnSi3ANOgYP6WXuOG9%2bQHqUI0TTVV5Mm/Mhr78mu43ERcdxLD8N0pAitDYtxb8%2bzcWP55ahtWo5XMP7iQe0nAsYQ88MNOP1IDNmBpj48wx/E16j9g/UMpkbahFkoYWY2UKRMEwRMEBKWYkbBimqrFzxqCwrJ0QhIwieZ8aY5bYYHsFvwSP0GNxDTsBD0g4vyQl4LXwfgdHt8JEdII9fhzhieEqCFD0N%2b0z5%2bUSCHnJSQjaKvRlpMCx9BZ1FgUiQqLFx1RJY31Hin62ROLe1Ci4yC8FEz7NEcFwP0la0IWX5WeSUnkNu%2bTlkl7YjY1U78ug5t0zoszHWZpW0I7XoLB9PLmxD6vLTiMi4REobiSR1dogI%2bdwMRfJhFKytQUHDTryxthmxKesRKsmCb5AShev2omLTQVRseQdLa7bCO6CQoqTDBhP90w0ghLyOK8%2b8HhxxA8dzY3E2Zz5Sog8QBO4RJruQmLAWBRklWL%2bqEquW7iBDkcHUOswOsSK/4k8AFPjppyhYrQvR3ROEoSEJHjyQobc3CH2aYP6ury%2bYP5tMoeineXpDCH74IZK%2bleH89UrMDrXyNSeJjyJSsg3h6kREZLdBnXMe6oxWzJfugUdAM7xDtyOp6BBKN2xDZulBROV%2bAI/AZjJgD4%2bcpxpACHk93InpZ4SNYEVSMzoKvFCduBqzZDfhIh/kJMhLU4WFlO7H3DALXMKMNhLT0UFlgLjgJCkRSCLBrWFv9Pa4YnTEGz9%2b7w%2bdxg1Dg14YHvJCV6cL%2bs0esPZ7YtDqiTs0h30D%2bKJLt5Kv5aMWOILVI4GRZ1BeVgBpRBXcJV10ELKSMOzfxDz1LZozjMTlR7Cs7m2CUA%2bNMUIcfkT5xxhAz/HuRkolxRzH1cJgnMiOgFR1Dq%2bFj2K%2bSsPHnWtsHTeY4z2Bh8xEZeoNVG86TGnxCGq3vY86ktqt76N683to2H6U97k0C%2b/ZnJot7/Hnqqb36PkQsktO8bUmT3VGXsMXl22Hn/osKW0iJXW2fRNUZUbKGmdQvKkZivQ26pv5%2bLRJkF8v0UKvh48jRtGIgwm/gDziDIIIAoyxWVTYDaDQOxVCE6nG0QgzA4aI/IYwI2DQLuzdDP/JvtNzgDBX%2bGaIiNH6SOHjRfwyZ%2bGg7SpP71AiU1aQ9yKvei8yK48Q5ukbpfEJ94OPiQA3IrzEuDNIkqkwx90FP1SI8I/anxPxLUBYxDkeHWJ7EaR/4jXVfLX2fxQdb31UztE2WQbrnPrccfRNfMGHKNqwCyEJ53l6FKv6bPcAhukVQmLCtqtiBLmRy5ClyiQvarEpYRm%2bLfsZsFGErpVSuLP0pNT9H1yIThqGhXpG8QnU7tqDZTW7kVFxAJkVB5FfcwSS5MuUNUxT7nfKs4CYqigXKiB%2b5Z6O%2bKgt2JBVjdWLa3A6yx174l/CQvlBeCoHab72mV%2bMTN8AJqSt2ofSph0UAQdQ0nwY5TveRemWbXRcPk7jVtvZZRqlMMO6L5WRvw86ivqIV4EaEb6rehnBvmqIZs7CDPFimmd%2bbH39PG%2bCWfnNTnbsbOIXdRbRSwoRsyQTEYn5kCR9QlBoh2/EJZ7/2byJ%2bQ7X4lMfZ8UKDVyUd5Cm3I3xJSJ8nSHCofCXIPb4HeXUWiIXKz8LvAgDOF54uknZbbCJMkMXAqMuI6twPdKyMxGbXEhOvErvuzGXynO3MD2/NXaVCu3E/aDo8ddRZFV20yrvgzHxVfw7V4SfSHRLZsCX1e5K0wvkAD2/85Mm6hCXq4EsqQdNO7px4YoWLacu49Tp82hpvYBPLxtwtEWDyIw%2bxGRruSzK0SE2V0eG0XEjiJ50JycmJV1lncgI8ENd6K/xx/DfIFsSCPfwa3xs3guCADsezwrRo2mnFmN3R6EzDsJkGcLt0bu4e%2b9zjNy5h9Gx%2bxgbv4e79z/HnXEmX2Ds3pd0whxHd68WCfl9PBKeYAAtVU83Mdt3M16e%2bQp%2bOdsTv50XyJ/dAxuo4hp2Ki6er%2bgo/C2ISTuB1cT4a%2boPY3XtfmqPo6y%2bDyX1OpSSFNdqULnejNrNOlTVHKA5B1BcsRvL3lyPkJjzvKr8D6%2bB9dvEpMOfAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Monetizing Logs of Boston Dynamics Spot with Ocean Datatokens","path":"/blog/monetizing-logs-of-boston-dynamics-spot-with-ocean-datatokens/","date":"September 9, 2021","description":"In the last article, we presented our ROS package - ocean_ros, which connects the Ocean API and ROS, and also partially touched on the use case for selling technical logs from the robots. Today we will dive deeper into this use case and describe a specific example of devices’ data tokenization.","content":"import Card from '~/components/TextCard.vue'\n\nIt is time for a new stage of integration with Ocean Protocol. In the [last article](/blog/ocean-protocol-p-2/), we presented our ROS package - ocean_ros, which connects the Ocean API and ROS, and also partially touched on the use case for selling technical logs from the robots. Today we will dive deeper into this use case and describe a specific example of devices’ data tokenization.\n\nFirst, we need to understand what real practical utility such data and datatokens created from it can bring. It is clear that the service information obtained during the operation of robots and devices is constantly reused to improve algorithms or user experience. But for the most part, this information does not go beyond the device's manufacturer itself. Difficulties begin when devices with a similar principle of operation appear on the market (e.g. robotic vacuum cleaners) or an open platform is released, which is positioned as the basis for other solutions (Raspberry Pi, Arduino, TurtleBot from ROS). For the first case, many of the same types of devices around the world generate gigantic amounts of data dedicated to one specific task. For the second case, developers of open platforms receive unique datasets in their projects in a variety of tasks. However, this experience is not aggregated and shared. It remains unavailable for analysis, which limits the system improvement and makes it hard to find new approaches in the control process.\n\nFor example, for motion planning of manipulators, inverse kinematics is a challenge. The joints’ parameters of the kinematic chain need to be found to move the end of the chain to the desired position and orientation. In other words, in order to move the end of the arm to the right position - we need to calculate the positions of every joint the arm has. Often this problem is solved analytically or numerically, but sometimes these approaches have problems, not least computational ones. With the rise of machine learning, [neural network approaches](https://doi.org/10.1016/j.protcy.2013.12.451) began to be used to solve the inverse kinematics, but they require [datasets](https://mint-lab.github.io/awesome-robotics-datasets/) that have information about the motion of a real device for training the model.\n\nSuch data needs to be collected and provided to interested parties. This is where [Ocean Protocol](https://oceanprotocol.com/) datatokens come in. They allow automating this process and spur the market of robot datasets. Now this niche is occupied mostly by open datasets, but their main drawback is low quality for business use cases. Let’s move on to our example of robotic data tokenization.\n\n##  Meet Boston Dynamics spot selling its telemetry\n\nSpot is a relevant example of a complex multi-purpose platform with a wide variety of application scenarios. The fact is that working with real Spot telemetry is quite difficult, and this can greatly slow down the development of custom modules for the robot, and even more if the developer wants to use machine learning. Examples of operations that the developer could recover and study would be very useful here, but so far there is very little data available on the use of the robot, especially outside the United States. That's why we want our Spot to become a supplier of high-quality logs of the actual telemetry obtained when performing the same operations. This will give developers multiple repeated records of the same scenario, which should help them develop or improve their own solutions.\n\n## Implementation\n\nThe main integration with the Ocean API is provided by our previously written ROS package - [*ocean_ros*](https://github.com/LoSk-p/ocean_ros) To link Spot SDK with ROS abstractions and to work with robot logs inside this operating system, we use [a driver](https://clearpathrobotics.com/assets/guides/melodic/spot-ros/ros_setup.html) created by Clearpath Robotics. You can learn more about how to collect telemetry using the Spot SDK in the [educational program](https://spot-sdk.education/) from our colleagues at Merklebot.\n\nAfter Spot executes any command, we get a file in rosbag format with data from the /tf ROS topic, which describes the position of Spot frames relative to each other. Frames represent parts of robots and surrounding objects that the robot can see with technical vision. The relationship between two frames is described by a three-element translation vector, which describes the difference between the positions of the origin of two frames, and a rotation quaternion, which shows the difference between rotations of the coordinate systems of two frames. The position of each frame is calculated in relation to the parent frame (for example, the hip relative to the body), the initial frame is the position of Spot at the start.\n\nAfter Spot executes any command, we get a file in rosbag format with data from the /tf ROS topic, which describes the position of Spot frames relative to each other. Frames represent parts of robots and surrounding objects that the robot can see with technical vision. The relationship between two frames is described by a three-element translation vector, which describes the difference between the positions of the origin of two frames, and a rotation quaternion, which shows the difference between rotations of the coordinate systems of two frames. The position of each frame is calculated in relation to the parent frame (for example, the hip relative to the body), the initial frame is the position of Spot at the start.\n\n![Different parts of Spot and the diagram of the relationship between frames](./images/monetizing-logs-of-boston-dynamics-spot-with-ocean-datatokens/spot-scheme.png)\n\n*Different parts of Spot and the diagram of the relationship between frames. Source: https://dev.bostondynamics.com/docs/concepts/about_spot.html*\n\nhttps://youtu.be/6i9zYpCMzn8\n\nThe video shows the sequence of commands for creating, selling and buying Spot telemetry datatokens (for more details on how the ocean_ros package works, [see here](https://www.youtube.com/watch?v=Ssit8-u6dZY)). It should be noted that the rosbag file is pre-loaded into the IPFS file system to access it via a hash link, which is used when minting datatokens.\n\n![Spot on a 3D robot model](./images/monetizing-logs-of-boston-dynamics-spot-with-ocean-datatokens/Spot-on-a-3D-robot-model.jpg)\n\nThe video also demonstrates the purchase of these datatokens and an example of restoring the entire sequence of commands executed by Spot on a 3D robot model. To do this, we use the [rviz](http://wiki.ros.org/rviz) visualization tool for ROS. Thus, developers can work with any real Spot telemetry, even without having access to the robot.","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Robonomics_Ocean_p3_blog.62c183a.886ec03470834bc488dbc058e44e348f.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/Robonomics_Ocean_p3_blog.9ea8d39.886ec03470834bc488dbc058e44e348f.jpg 480w","/assets/static/Robonomics_Ocean_p3_blog.6b2ed88.886ec03470834bc488dbc058e44e348f.jpg 1024w","/assets/static/Robonomics_Ocean_p3_blog.62c183a.886ec03470834bc488dbc058e44e348f.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-3af47f1e4b2b46d1d5c9bef03e6585dc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-3af47f1e4b2b46d1d5c9bef03e6585dc)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAAAwQFBgECBwD/xAAvEAABBAAEBAMIAwEAAAAAAAABAgMEEQAFBiESEzFBFCJhMlFicYGRodEWcpLw/8QAGQEAAgMBAAAAAAAAAAAAAAAAAwQAAgUG/8QAJREAAgIBBAEDBQAAAAAAAAAAAQIAEQMEITGBYQUSoRQyQVFx/9oADAMBAAIRAxEAPwDlM6ay2s0lJNXuT%2b8LQpy5DxYQkBKhZIJ29caSMoU4ricpN9ib/AwEFOXwnFMg8xXlCr/OOvZTdniYGPFQ%2b4nszTNZbsZxKWnl3XmF9MRq85ljfxMlJ/v%2b8eQ0uU4aSpQAK1kDfh/7b64PqKIzwMuwnnJHAynncTZTyyDRAvqkbV6H0wszVuJqYFFgGBb1NMaPnUHU/EKP3GCTtR5iy4WVR/DOgAlLgVxAEWNjXYg4W0rmbWU5umS82hVBPCVJsoIWlXED1BoHcEHfriT1jqGNmUJuK02gqQUKC6BUkUbANbAkiwKut7IvCj5nBoRk4U5qRTueTXi0Ey3W9gFkGt/fggzma0pwJmvOAewVUQfniJgrbTIQp0ApF9RYvth3xa0ynXWg2OIFPlG1YiuT%2bYFlANATo0LKWPBJm5vmLWXsOVyU1zHXU3RIQNwPcTQwReQZHmiJAiZ%2beGO1z31uMFKWmwQCdxud6AuySBiOcylt0gKdXYGyh1GNEZQQyWhLdDbtc1IApdbj7E3imq02qzEsmoK77ABaA7BN155/QgNO%2bPEoVsYPZu%2bjXxK1mDrDEh1qEpEiM2oht11kBS0%2b8jthRbcpQ4kRG1A9wyCMWY6YZWkHxLgv4Rga9KlV1mLwB%2bAYZZH9oC7/ANhUyqp3lQQmRHeW4Y7ZJG4cR5RfcDtjAmNzH2GJiWI0cuJDjrLA4kpvc%2btDti1/w%2b%2buZO/4H7wNWiGQCTNdNb%2bwMLNgykG4X6hI8/pLTEGFDfmaoWI8pCnYzrcUqDibroAaUCKKSbB%2bYwnP09Eby12dpjOWc0ZSlZkMqTyn229vNy1bqHWym62PyK5pPmRkRzmDvh2lKW23wCkqUACfrwp%2b2Ms6RYaBT4x88Q3IAH0wjg9O1mIhmzEm%2bCFqugDdeefG0u%2bpwsK9g%2bZ//9k=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Polkadot for the IoT market: Robonomics is ready for real world use cases on Kusama!","path":"/blog/polkadot-for-iot-with-robonomics/","date":"August 31, 2021","description":"The Robonomics team wants to impact the Kusama network development with four scenarios from the real world. These use cases describe unique opportunities for the crypto audience and all participants of the IoT market.","content":"import Card from '~/components/TextCard.vue'\n\nOur team already has various business cases that are ready to leverage the parachain technology. But before we can roll out these use cases we need to obtain a parachain in the [Kusama Parachain Auctions](https://kusama.network/auctions/). So, let’s talk about each of these current use cases.\n\n## Meet Spot, our Robodog\n\nhttps://youtu.be/_xBLkszEwWk\n\nThis summer, the first group of engineers learned to work with our own Spot as part of the [spot-sdk.education](https://spot-sdk.education) course. By the end of September, anyone, anywhere in the world can take our course and get his hands on with the robodog from [Boston Dynamics](https://www.bostondynamics.com/spot). The course is developed by robotics specialists from the [ITMO University](https://en.itmo.ru/) in St. Petersburg and [Merklebot](https://merklebot.com/) acting as the local operator in the San Francisco Bay Area lab, the home of our Spot. \n\nAccessing Spot is organized through the use of two parachains - the Robonomics and Statemine parachains. Logs of the students passing the course will be recorded on the Robonomics Parachain where the [Statemine parachain](https://polkadot.network/statemine-upgrade-launches-new-phase-of-parachain-functionality/) is being used to replace user accounts with unique access tokens that students will receive after payment of their course.\n\n## An Urban Sensor Network on the Volga river\n\nOne experiment that is leveraging the power of [IPFS](https://ipfs.io/) and [Substrate](https://www.substrate.io/) based Blockchain technologies is currently taking place in Tolyatti. The focus here is creating an alarm network detecting high levels of air pollution without a commercial focus and being dependent on a government, but solely being supported by the citizens of Tolyatti and the Russian Airalab organization. The automatically collected information on exceeding the level of air pollution will be used for a quick response of the mobile laboratory, which is already capable of conducting a detailed analysis of particles in the air.\n\nAll data collected by the Urban Sensor Network will be securely recorded in the Robonomics parachain to avoid any possibility of intervention in the measurement history and provide security from disabling the network during attacks of the main server. \n\nIt is an example of the social impact the Robonomics project can have in these times where [90% of the world's population breathes dirty air](https://www.bloomberg.org/blog/accelerating-clean-air-action-one-data-point-at-a-time/). Thus, with the help of Kusama we can have a trustable, immutable way of storing pollution data which can be used for science to create a better world for all [protected against corrupted actors on both corporate and government level](https://www.brookings.edu/blog/up-front/2020/06/05/corruption-is-a-threat-to-planet-earth/).\n\n<Card>\n\nWatch **a step-by-step process** of how to connect an SDS011 Air Quality Sensor to the Robonomics Decentalized Sensor Network from our Community member\n\nhttps://youtu.be/AQ7ZzgbN7jU\n\n</Card>\n\n## Digital Twins for Smart Leasing\n\nThere is an interesting new use case in Robonomics. For four months already, an industrial manipulator has been operating in a manufacturing facility in the United States with an hourly wage. At the end of each shift, the manipulator updates its digital twin instance stored in the parachain. Based on the changes in the digital twin, an invoice is issued for the use of the manipulator structured as IoT-enabled leasing. \n\nThus, we can say that Kusama will be an example of a fintech solution from web3 for the new industry 4.0. [Someday the public will understand the significance of this use case](https://www2.deloitte.com/content/dam/Deloitte/us/Documents/manufacturing/us-supply-chain-of-the-autonomous-robots.pdf), and we will see a boom of DeFi for this modern industry!\n\n## Digital Passports for IoT systems\n\nTwo projects — one is from New Zealand — are using parachains for recording data about production manufacturing. In one case, data about the content of substances in the ground on farms is collected, in the second — data about the final assembling of medical equipment. \n\nBoth scenarios would help the Kusama network to expose itself as a registry for global production distributors.\n\n<Card>\n\n**Project 1** New Zealand’s premier industry is considered to be Agriculture. Climate change and clean water in our rivers are also at the forefront of New Zealand’s concerns. Luckily, with the advances in precision agriculture and the efficiency of our world-leading practices, our sheep and beef farmers can claim to produce less Greenhouse Gas Emissions to get a piece of meat to a dinner table in London than the comparable farmers in Wales:\n\nhttps://www.youtube.com/watch?v=vZGMeYKInAk\n\n</Card>\n\n<Card>\n\n**Project 2** Demonstration of the work of an automated workstation for video recording of the assembly process and testing of complex technical products.\n\nhttps://youtu.be/wmeBIbNaBlQ\n\n</Card>\n\n## Second Wave of Kusama Crowdloans\n\nWe would love to see your support for [Robonomics during its crowdloan](https://robonomics.network/kusama-slot/) for the 6-10th parachain slot on the Kusama network so we can implement each use case as soon as possible!\n\nWhile these use cases are just scratching the surface of the potential that the Robonomics Network will bring to the industry 4.0 after obtaining a parachain slot on [Kusama](https://kusama.network/), they demonstrate the numerous capabilities of Web3 that are not yet being explored or utilized. \n\n*This is only the beginning of Robonomics' Web3 journey, and ultimately we plan to enable millions of interoperable IoT devices in the Polkadot ecosystem, including many of which have not yet been conceived, but are already possible with [the technology of Robonomics](https://blog.aira.life/a-brief-introduction-to-robonomics-9b7884172e77)!*\n\n<Card :icon=\"'/icons/icon-future.png'\">\n\n### Want to be a part of the future?\n\nHead over to the [Robonomics Crowdloan page](https://robonomics.network/kusama-slot/) or the [Kusama Portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama-rpc.polkadot.io#/parachains/crowdloan) and support us building the infrastructure for the Smart Robotic grid of tomorrow!🦾\n\n</Card>\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/cover.62c183a.f40e47ee35e5c8b8f2fdd58d0788c762.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f40e47ee35e5c8b8f2fdd58d0788c762.jpg 480w","/assets/static/cover.6b2ed88.f40e47ee35e5c8b8f2fdd58d0788c762.jpg 1024w","/assets/static/cover.62c183a.f40e47ee35e5c8b8f2fdd58d0788c762.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-2eeab5788dceda9365a51bc1b0cc047e'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-2eeab5788dceda9365a51bc1b0cc047e)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAABQYEBwACAwj/xAAyEAABBAECBAMGBQUAAAAAAAABAgMEEQUAEgYhMUEHEyIUFUJRcYEWMmGR8CMzobHB/8QAGwEAAQQDAAAAAAAAAAAAAAAABAIDBQcAAQb/xAAtEQACAQMCBAQFBQAAAAAAAAABAhEAAwQhMQUSQVETcYGRBiIjMkJhwdHh8P/aAAwDAQACEQMRAD8AS8LiW8s6zEYfCJ7zu1KXPS2EBJJJV1u%2bgA1AkRjGlusOlKi2soUUGwSDXI/LUiBDdnT2orHlpUsi1LUQEjqVH9AASfpo9wX%2bH2%2bOWoWZPvLGLaWCQ0tI3V6SnYdx9QquXXmBrpHygkyek1ZmVmWcZ2VmLTpyga7kEgmJE6d5pahtMLfCZK1IbPcaFZrJw8USHVlaz/bbSLUodvpq8lOeHKFqS41jQpJoj2ebyPf4/nrk214VJQVKh43ziQveliYPVfW916HbPYj5FPtTF7iF5l%2bjj3AT1KTHpP71XfB0KJkMJIl5VlLLqCkuJU6QW2ylRtAH5lirogj97AuLGQ8shx9tkCua7/5q4EveGYCfMZg7t1qpiZW2u3q660D/AIa7k2zjtvf%2bjNv7erWLnMNwfat2811mbF07fj/fWqnVEYbksJclIUytQ8xbYJKBfPl9Nc5zTDct1MRxTkcKpC1CiRo7xmzj3M9kH%2bFmFJxFj2YqQvaPSLvdzrdel2K2%2bmOgStvn/HtNi77HRK5BME1I2AL11Ss/bqNIBkaN1DDt51P4Eh5XKcXY9uIhsuoUp9e/8pQ2CtQPaqFffVzcaeGOLx%2bNhT8PKgYh8zG9r0te1K0q5%2bWlXRNUSLu67aXODGE4rOtrYAPtCFRVgj4Viv3BAP21ZviniY8nw%2bY3Kdpt5ohKllQvmOh5d9I4n4VziFrHiIAO06GRVR2s/IIa%2bLhnz7a15%2b4kW1M4my8x7KRmIK5jiIuxsuuvISqtwSOiaF7jV60jFiAhWTjTo0tDBLQZl48qS64UWBsJFgXZV0HLrou5w/FcNq%2bVch/n6jWK4fjKUlW9e4UAf9/v30SOCheVUuEKsCAEjlAiNVJk9TPfQUQPiTK8LwS5iI3P8xHpQ3C5H8ScQRmMvExsIbFpjtxI/s7ch815bbiwTsSo8t1cr7XYBZKRk25slqbGYjSG1llxpDIHlqT6Smge1deZPz07xsUzGktPt15jS0uJ3JsWDYsfbW8/HonTZMp/b5shxTy9qaG5Rs0O3M6lFxLCvIQRFDLx7NRAqXmEfqaScbkc1IbXjhNZYiqHpDidqau1XV/qa/TUfLyMlCeajMjHykoSCX2UEAg8%2bvc8/lp39yx/4NZ7lj/waS%2bFZe5zMJWNv9r6bU2vGMhVZVcjmMmNJJ3JiJJ7nWv/2Q==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Robonomics Network x Ocean Protocol p. 2&#58; Monetizing Data from Robots and IoT Devices","path":"/blog/ocean-protocol-p-2/","date":"July 1, 2021","description":"First results of collaboration between Robonomics Network and OCEAN Protocol","content":"import Card from '~/components/TextCard.vue'\n\n## Introduction\n\nThis article [expands the integration](/blog/article-ocean-p1/) between Robonomics Network and Ocean Protocol. There will be described specifically how to connect robotic devices to the protocol, as well as possible use-cases where such integration will add value to the operation of the autonomous system.\n\nFor those who are not familiar with Ocean Protocol: the idea is to transform any data into a full-fledged asset by tokenization, with the ability of buying / selling and transferring ownership. In short, when tokenizing data, you deploy and mint an ERC20 token (datatokens), the ownership of which allows you to have access to the data assigned with it (1 datatoken = access the dataset). The protocol allows you to flexibly manage access, for example, organize temporary access to data or give access to their analytics without violating privacy. Thus, it becomes possible to monetize tokenized data, create markets for them and use the full power of decentralized finance tools.\n\nThe Robonomics team is well aware of the value of monetization through tokenization, but even better, we understand the value of automation. We have already learned how to automatically monetize the useful activities of robots and IoT devices, so why not automate the monetization of the results (logs and data) of this activity? With Ocean Protocol, almost any robotic device that generates valuable data can be turned into a simple source of income for its owner. Or the device can become a consumer of useful data to finish its task.\n\n## Aspects of integration for ROS-devices\n\nIn order for Robonomics to work with many different types of devices, we use the Robot Operating System, a middleware suite that allows us to conveniently deploy software for robotic devices. Thanks to ROS, it is quite easy to connect a new type of device to the network. The active ROS community has developed hundreds of ready-to-use packages for various robots and IoT devices over the years.\n\nThe three main abstractions in the ROS environment are nodes, topics, and messages. A node is a process / program that performs a certain task and communicates with other nodes through topics. A node subscribes to a topic, waiting for messages, or publishes its own messages to them. In this implementation, the different-type components of the robotic system are able to interact with each other at the same level.\n\nThe figure below depicts a typical process for accepting and completing a task by a robotic device (promisor) in Robonomics v1 running on the Ethereum network. The AIRA сlient block is a deployed image of the required software for the device, including ROS. The figure shows (in blue frames) that the device communicates with the decentralized network through the AIRA client by receiving and sending messages in the corresponding ROS topics. The mission of the device ends with the final sending of the resulting message to the IPFS network, which contains a link to data potentially acceptable for monetization.\n\n![\"The process of Robonomics v2\"](./images/ocean-protocol-p-2/uml-robonomics-ver1.png)\n\nIn Robonomics v2, which is being developed as a [parachain](https://parachain.robonomics.network/) of the Polkadot ecosystem, the process is slightly different. Currently, the `launch()` and `datalog()`&nbsp;[functions](https://wiki.robonomics.network/docs/en/rio-overview/) are available for device control; the first function allows you to perform transactions to turn the device on / off, and the second one sends datastring to the blockchain. But logs and device data are still collected using ROS topics. They can then be passed either directly to `datalog()`, or sent to IPFS first.\n\nTherefore, the first task in integrating Ocean Protocol with Robonomics Network is to bring the protocol API to the ROS environment. Further, such a package for ROS can be integrated into the AIRA client and automatically deploy the creation of datatokens.\n\n## Example of Ocean integration with ROS\n\nThis section provides a description of the ocean_ros repository, created by Robonomics engineers, which is a ROS package that implements the integration of Ocean Protocol API and ROS. Ocean Protocol offers several API options for working with it, in this case the [ocean.py](https://github.com/oceanprotocol/ocean.py) Python library is used, since ROS has the Python client library [rospy](http://wiki.ros.org/rospy). The main purpose of the package is to create three ROS nodes, through which a robotic device can deploy and mint datatokens, create a pool for placement on the market, or buy datatokens for the use. Let's go through the installation and launch of the package.\n\nThis example is also available as a screencast on YouTube:\n\nhttps://youtu.be/Ssit8-u6dZY\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Requirements & Installation\n\nThe package requires:\n\n* Ubuntu\n* Python 3.8.5 or later\n* ROS, Melodic ver. (installation instructions [here](http://wiki.ros.org/melodic/Installation/Ubuntu))\n\nInstalling the package:\n\n```sh\ngit clone https://github.com/LoSk-p/ocean_ros\ncd ..\ncatkin_make\nsource devel/setup.bash\n```\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Setting Ethereum network & node\n\nIn the example, the Infura provider is used to set up the connection. Infura allows you to remotely use the Ethereum infrastructure without the need to launch a full node, which is very convenient for a compact robotic device with limited computing power.\n\nNote that for the example, a connection to Rinkeby, the Ethereum testnet, is being configured. If you need to switch to the mainnet or another, refer to the Ocean [documentation](https://docs.oceanprotocol.com/concepts/networks/).\n\nThe steps to set up are as follows:\n\n* Go to https://infura.io and sign up.\n* At the Infura site, create a new project.\n* Within the project settings page, note your Infura project ID value. This will be used in the next step.\n* Create `config.ini` file in the config directory (example of configuration you can find in `config_template.ini` file).\n* Write your Infura project ID for the network in the config file.\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Setting Ethereum account and getting Rinkeby ETH tokens\n\n* Install Metamask wallet to your browser and generate an Ethereum account. Instructions are [here](https://docs.oceanprotocol.com/tutorials/metamask-setup/).\n* Get Rinkeby ETH tokens from a [faucet](https://faucet.rinkeby.io/).\n* [Export](https://metamask.zendesk.com/hc/en-us/articles/360015289632-How-to-Export-an-Account-Private-Key) the private key from Metamask and create a file with your private key:\n\n```sh\necho <private_key> > private_ocean\n```\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Installing Python libraries\n\nInstall Python module venv for creating virtual environments:\n\n```sh\nsudo apt-get install python3.8-venv\n```\n\nCreate Python virtual environment and install necessary libraries:\n\n```sh\npython3.8 -m venv venv\nsource venv/bin/activate \npip install ocean-lib rospkg catkin_pkg\n```\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Getting Rinkeby test OCEAN tokens\n\nGet Rinkeby OCEAN via this [faucet](https://faucet.rinkeby.oceanprotocol.com/).\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Running ocean_ros\n\nIn the terminal with Python virtual environment run ROS launch file:\n```sh\nroslaunch ocean_ros datatokens.launch\n```\n\nNow you can access ROS topics to work with datatokens.\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Creating datatoken\n\nTo create a datatoken, you need to publish a message to the topic `/ocean/create_datatoken`. The message should contain the path to the private key file from your Metamask account, IPFS URL to data from device, OCEAN and datatoken liquidity. Message example:\n\n```sh\nrostopic pub /ocean/create_datatoken ocean_ros/Metadata \"private_key_path: '/home/user/private_ocean'                     \ndata_created: '2021-12-28T10:55:11Z'\ntype: 'dataset' \nname: 'test_ros'\nauthor: 'author'             \nlicense: 'CC0: Public Domain'    \nfiles_content_type: ['text/text']\nfiles_url: ['https://gateway.ipfs.io/ipfs/QmWRjFcQi4Xcisqi8FP3AbGS3PB3gNHgtnfzbcpodKKCBP']                 \ntokens_nomber: 100.0\nocean_amount: 10.0\"\n```\n\nThe corresponding ROS node will create a datatoken and it will become available for sale. You can see information about datatoken in `/ocean/token_response` topic:\n\n```sh\nrostopic echo /ocean/token_response\n```\n\n</Card>\n\n<Card orientation=\"vertical\" alignContent=\"left\">\n\n### Buying datatoken\n\nTo buy a datatoken, you need to publish a message to the topic `/ocean/get_datatoken`. The message should contain the path to the private key file from your Metamask account and information about the datatoken you want to buy (you can find it on the [market](https://market.oceanprotocol.com/) or from the `/ocean/token_response` topic). Message example (don't forget to change `destination` in the message):\n\n```sh\nrostopic pub /ocean/get_datatoken ocean_ros/BuyDatatoken \"{private_key_path: '/home/user/private_ocean', destination: '/home/user/', token_address: '0x9fb21F68257F1d718d764B68b1430B6460796e42', did: 'did:op:9fb21F68257F1d718d764B68b1430B6460796e42', pool_address: '0xcF295B85ef5ADd0E513B789477C6d14eA6Bc718a'}\"\n```\n\nYou can see path to the downloaded datafile in `/ocean/buying_response` topic:\n\n```sh\nrostopic echo /ocean/buying_response\n```\n\n</Card>\n\n## Use-cases\n\nThis section will describe potential examples of the application of automatic tokenization of data received by robotic devices.\n\n### Environmental data\n\nPerhaps the most interesting illustration of application would be the tokenization of environmental data. The value of such data is only growing, taking into account the increasing interest of the population, companies and regulators in the problems of environmental management. The main problems here are the scale of ecology (air, water, soil multiplied by the enormous and often inaccessible territories of the Earth) and the issue of trust in the collected data. A mobile automatic device (air or water drone) or a network of stationary sensors perfectly solve the first problem, and blockchain and decentralized technologies mitigate the second. With the ability to tokenize this data using the Ocean Protocol, completely new markets are opening up where concepts such as citizen science and carbon credits fit perfectly. \n\nRobonomics has been working with devices for ecology for a long time. For example, the package [sensors-connectivity](https://github.com/airalab/sensors-connectivity) was developed, which allows you to turn ROS-compatible sensors into telemetry agents. Robonomics engineers are developing various models of [water drones](https://blog.aira.life/water-drone-2-0-first-stage-of-development-db8ad6c81d3c) to collect chemical indicators in rivers and lakes, and are also exploring the possibility of using [UAVs](http://www.ijeetc.com/uploadfile/2019/1009/20191009035041545.pdf) to assess air quality.\n\n```\n1556199372.384576 <=>\\x86##5E1567057C105409#DOV01SW#0#WT:6.53#PH:8.89#DO:90.4#COND:348.9#\n```\n\nExample of collected water data: temperature, PH value, dissolved oxygen, conductivity\nIn each case, the devices generate sensor and GPS logs, which are then [published](https://gateway.ipfs.io/ipfs/QmWRjFcQi4Xcisqi8FP3AbGS3PB3gNHgtnfzbcpodKKCBP) to IPFS and provided by the device as a result. This is where we can add value to this data by creating a datatoken by Ocean Protocol. Robonomics Network will ensure that the data was collected by a specific robot for a specific task, and Ocean Protocol will ensure that only those who own the datatoken can access it.\n\n### Marketing data\n\nThe trend of robotics in everyday life is growing and it is easy enough to find examples of robot promoters or a robot for customer service. The experience of interaction of such robots with people can be used for marketing research, similar to sites that collect data about users. Moreover, the value of this data will be even higher, because the interaction with the person occurs at a closer level.\n\nWe can imagine a robotic device that, in the process of performing its specific task (for example, a robotic waiter), simultaneously collects visual, sound or other information about the client. In this case, machine learning tools can be used for creating a completely new type of data about customer reaction to a particular type of service or product. This is a great scope for using datatokens, both for raw data from robots and for those analyzed by algorithms. Moreover, Ocean Protocol has a Compute-to-data function that allows us to provide private data for analytics without violating confidentiality.\n\n### Technical logs\n\nImproving the algorithms of robots also requires the analysis of their operating data. This primarily concerns machine learning, which requires datasets, but we can also talk about sharing three-dimensional maps (for example, for simultaneous localization and mapping) between devices operating in the same or similar environment. Monetization of such technical logs will be more field-specific, but the value will lie in their uniqueness and rarity.\n\nExamples include the tokenization of data generated by robotic vacuum cleaners for the improvement of their performance (bypassing obstacles, better recognition of the environment in apartments). Another example is service data of a production line, whose processing will optimize operating or production costs.\n\n## Conclusion\n\nThe examples show that the combination of Robonomics Network and  Ocean Protocol creates a fundamentally new type of assets, previously unavailable due to poor automation of technical processes and the impossibility of secure control and exchange of their results. Moreover, these are only obvious ideas, and in the future, with the proliferation of IoT and robots, completely new markets for cyber-physical data may appear.","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Robonomics_Ocean_p_2.62c183a.b0cdd904f46ec8194690b17a224c64f9.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/Robonomics_Ocean_p_2.9ea8d39.b0cdd904f46ec8194690b17a224c64f9.jpg 480w","/assets/static/Robonomics_Ocean_p_2.6b2ed88.b0cdd904f46ec8194690b17a224c64f9.jpg 1024w","/assets/static/Robonomics_Ocean_p_2.62c183a.b0cdd904f46ec8194690b17a224c64f9.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-7676271f5f57cbc1052c75e0787320a0'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-7676271f5f57cbc1052c75e0787320a0)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgIDAQAAAAAAAAAAAAAABAUBAwACBwb/xAAsEAACAQMDAgUDBQEAAAAAAAABAgMABBEFITEGEhNBUWFxFCKRIzJCYoGh/8QAGgEAAgIDAAAAAAAAAAAAAAAAAwQBBQACBv/EACERAAICAgIBBQAAAAAAAAAAAAECABEDIQQxQRITMmGB/9oADAMBAAIRAxEAPwDll3MokJCJjGcsxzVVpdrcxXf0zhkgUF2yQAT5D1NL73UNPAH1ExaMbEIDv/uKPs7STUrNF0iNUslcsx7z2l8Y89yfWuvtWalo/UoMOBvbtib/AGJbnUbhSe12GPQ0K2tXQ3FzcAj0fNEajZyQ6hLbSL90e7lNwo5JqrqGzjiEEltcxXIEKmTwgf0vLtPxsM%2beRSzErcs%2bOo0G7msfU95EfvIlX%2b2x/wCVk/VV4wIijSM%2bpJY1T0tdWVnqwl1CCGaPA7RKuQrd6nODtwGG4I34pt1vq1hf2yLFDG12PDPjEZftC7gnz/jznYDGBtSjZnBqNHCndRZdaxeO8KwXswLDdg4AP%2bDioXWdQhaRTeSuQcKTgg7%2beaWab4JuB44UqBsGOxPvVjjvkkeOPtQHhdwtQHY%2bYL0qDVQrQ9GudV1IW9uwSQjveVtwi53Pufaui3l9a9L6bbWMbeLKEPYHbBIzux%2bTnigLCBLTUmTTwLaNDgBQGzwNyeea8L1FdzXutXUtw5Zw5QewGwAqxVBxlsfIyDbajS81KSaeSaSNGlcnubLKSPTY8cfil8lzI4YCEMDyO5yMfmok2oGZ2BOGI%2bDSuZvMzESBqQsghld5bZHU5ARsgD4rW7u4powsdnDCRuWQsSfyaodieST8mqzSRJPcOSa3CRcs1vHCQAiEnI86KZ1RnSB28NgAd/3UJZXL2zOyBSWUqe4Z5rEOBWytA1uf/9k=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Robonomics Network x Ocean Protocol Collaboration p.1","path":"/blog/article-ocean-p1/","date":"January 12, 2021","description":"Announcement of the collaboration between OCEAN Protocol and Robonomics Network","content":"import Card from '~/components/TextCard.vue'\n\nWe’re glad to announce that Robonomics Network enters into a partnership with OCEAN protocol.\n\n> Robonomics.network - is a tool that allows developers and engineers to connect IoT & all ROS compatible devices to the digital economy.\n\nWith Robonomics, robots and IoT devices can become autonomous economic agents, meaning they can enter into legal obligations, own things, and do whatever humans can do on the open labor market and even more!\n\nRobots are producing a lot of data daily; some pieces of that data are quite valuable and could be monetized by a robot or its developer. Here comes the OCEAN protocol.\n\n> OCEAN - is a protocol that allows monetizing any kind of data. Participants of the protocol can earn by selling and curating/staking on data.\n\nThe integration aims to create a sandbox for testing collaboration of both technologies for further development of pilot projects and products in 2021.\n\n<Card :image=\"'/avatars/Sergei-Lonshakov.jpg'\" :back=\"'transparent'\">\n\n### Sergei Lonshakov - Software architect at Robonomics.Network - \n\n\"Joint experiments of Robonomics and OCEAN teams on the crossing subjects, specifically launch of the cyber-physical-systems and processing produced data will allow merging teams knowledge and could lead to marvelous discoveries within 1 year.\"\n\n</Card>\n\n<Card :image=\"'/avatars/Manan-Patel.jpg'\" :back=\"'transparent'\">\n\n### Manan Patel - Growth Accelerator at Ocean Protocol -\n\n\"With this collaboration Ocean Protocol will help Robonomics to leverage their technology and discover new use cases in securely monetising plethora of data generated by robots and helping robots and related IoT devices become revenue generating machines.\"\n\n</Card>\n\nOne of the first milestones for this collaboration will be creating a course.\nIt’ll explain how to launch a device on Robonomics Network then store and monetize data on OCEAN protocol in virtual environment.\n\nWe’ll release 2nd part of this article to dive deeper into the possible use-cases of this integration.\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Robonomics_Ocean_1.62c183a.d9c64314843892a205d7c12282e59ca2.jpg","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/Robonomics_Ocean_1.9ea8d39.d9c64314843892a205d7c12282e59ca2.jpg 480w","/assets/static/Robonomics_Ocean_1.6b2ed88.d9c64314843892a205d7c12282e59ca2.jpg 1024w","/assets/static/Robonomics_Ocean_1.62c183a.d9c64314843892a205d7c12282e59ca2.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-4bade9bcaa17e22e739571e2bbf658e3'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-4bade9bcaa17e22e739571e2bbf658e3)' width='1500' height='676' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAgMBAQEAAAAAAAAAAAAAAwUAAgQBBgf/xAAsEAACAQMDAgUDBQEAAAAAAAABAgMABBEFEiETMQYiQVFhcYGhMpGxwdHw/8QAGQEAAgMBAAAAAAAAAAAAAAAAAgQBAwUG/8QAHxEAAgICAgMBAAAAAAAAAAAAAAECEQMhEkEEBRMx/9oADAMBAAIRAxEAPwD54%2boAegFYNQ1bCAA4BH91k0lF1C96UswijClmOQCR7D5ql3p8d5JJFHKy7FPRy2R3NdVzV0YuH1EJO5Cq8vi5PmpRNLuPfNSJHmlZcMVQZcrzgf8AcfetviO2ijaOSzuhdqsKdRlQqEPbbyOwOAD6gilsk%2bzQXjxxPihYXHrUfKsVdWVh3BGCPtTDwnqdtp2pma7hilXaAvUXO0h1OR7HAI%2b9N/Gut2mpQJFFEhnVlPWIy%2b3zZG7vjlf2FKSybosSPPXAhMkSQYAIALFs5/ygMEUyLksQcKRwPmr6e0QnzOFK443diaHLmR5JI49sYPO0eVaFuyF%2b0MOthgTzihTynbyc5HP196GxoUhpuc9Gr80iC5MabRFEfkg5P5oazySNtSCJ/jBOfzQpK5OghI7kkZ9qSnIVza0Ei6lu7vLbRsGGMOOF57irXN6s6BVtbaHHOY1IJ/NYWdj3Jx7V0GqbFqfZrNw0kMUTfoj9v5q0roHdLd2ETY4J7/Wh2tzJbFzFjzrtOR6UL0ouWga2f//Z' /%3e%3c/svg%3e"},"locale":"en"}}]}},"allPostsTags":{"edges":[{"node":{"locale":"ru","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Мерч","title":"Мерч","path":"/blog/tag/%D0%9C%D0%B5%D1%80%D1%87/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Merch","title":"Merch","path":"/blog/tag/Merch/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ru","tags":[{"id":"Robonomics в Ethereum","title":"Robonomics в Ethereum","path":"/blog/tag/Robonomics%20%D0%B2%20Ethereum/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"},{"id":"Умные контракты","title":"Умные контракты","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D1%82%D1%8B/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"pt","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ko","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ja","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"fr","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"es","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"az","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"},{"id":"Умный дом","title":"Умный дом","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BC/"},{"id":"Интернет вещей","title":"Интернет вещей","path":"/blog/tag/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82%20%D0%B2%D0%B5%D1%89%D0%B5%D0%B9/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"}]}},{"node":{"locale":"ru","tags":[{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"pt","tags":[{"id":"Filosofia da Robonomia","title":"Filosofia da Robonomia","path":"/blog/tag/Filosofia%20da%20Robonomia/"}]}},{"node":{"locale":"it","tags":[{"id":"Filosofia della Robonomics","title":"Filosofia della Robonomics","path":"/blog/tag/Filosofia%20della%20Robonomics/"}]}},{"node":{"locale":"es","tags":[{"id":"Filosofía de la Robonomía","title":"Filosofía de la Robonomía","path":"/blog/tag/Filosof%C3%ADa%20de%20la%20Robonom%C3%ADa/"}]}},{"node":{"locale":"en","tags":[{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"XRT токен","title":"XRT токен","path":"/blog/tag/XRT%20%D1%82%D0%BE%D0%BA%D0%B5%D0%BD/"}]}},{"node":{"locale":"pt","tags":[{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"},{"id":"Gettone XRT","title":"Gettone XRT","path":"/blog/tag/Gettone%20XRT/"}]}},{"node":{"locale":"fr","tags":[{"id":"Parachaîne Robonomics","title":"Parachaîne Robonomics","path":"/blog/tag/Paracha%C3%AEne%20Robonomics/"},{"id":"Jeton XRT","title":"Jeton XRT","path":"/blog/tag/Jeton%20XRT/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"az","tags":[{"id":"Robonimika parachain","title":"Robonimika parachain","path":"/blog/tag/Robonimika%20parachain/"},{"id":"XRT tokeni","title":"XRT tokeni","path":"/blog/tag/XRT%20tokeni/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"}]}},{"node":{"locale":"pt","tags":[{"id":"Colaborações","title":"Colaborações","path":"/blog/tag/Colabora%C3%A7%C3%B5es/"},{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"}]}},{"node":{"locale":"it","tags":[{"id":"Collaborazioni","title":"Collaborazioni","path":"/blog/tag/Collaborazioni/"},{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"}]}},{"node":{"locale":"az","tags":[{"id":"Əməkdaşlıq","title":"Əməkdaşlıq","path":"/blog/tag/%C6%8Fm%C9%99kda%C5%9Fl%C4%B1q/"},{"id":"Robonimika parachain","title":"Robonimika parachain","path":"/blog/tag/Robonimika%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"es","tags":[{"id":"Eventos","title":"Eventos","path":"/blog/tag/Eventos/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"de","tags":[{"id":"Veranstaltungen","title":"Veranstaltungen","path":"/blog/tag/Veranstaltungen/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Mapa ruta","title":"Mapa ruta","path":"/blog/tag/Mapa%20ruta/"},{"id":"Nuevo lanzamiento","title":"Nuevo lanzamiento","path":"/blog/tag/Nuevo%20lanzamiento/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Fahrplan","title":"Fahrplan","path":"/blog/tag/Fahrplan/"},{"id":"Neue Version","title":"Neue Version","path":"/blog/tag/Neue%20Version/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"ko","tags":[]}},{"node":{"locale":"ja","tags":[]}},{"node":{"locale":"es","tags":[]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Gemeinschaft","title":"Gemeinschaft","path":"/blog/tag/Gemeinschaft/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"ko","tags":[]}},{"node":{"locale":"es","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"ko","tags":[]}},{"node":{"locale":"es","tags":[]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[]}},{"node":{"locale":"ko","tags":[]}},{"node":{"locale":"es","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Demo","title":"Demo","path":"/blog/tag/Demo/"}]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"ko","tags":[]}},{"node":{"locale":"es","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"ko","tags":[{"id":"로봇공학 파라체인","title":"로봇공학 파라체인","path":"/blog/tag/%EB%A1%9C%EB%B4%87%EA%B3%B5%ED%95%99%20%ED%8C%8C%EB%9D%BC%EC%B2%B4%EC%9D%B8/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"},{"id":"XRT 代币","title":"XRT 代币","path":"/blog/tag/XRT%20%E4%BB%A3%E5%B8%81/"},{"id":"RWS 令牌","title":"RWS 令牌","path":"/blog/tag/RWS%20%E4%BB%A4%E7%89%8C/"},{"id":"质押","title":"质押","path":"/blog/tag/%E8%B4%A8%E6%8A%BC/"},{"id":"新版本","title":"新版本","path":"/blog/tag/%E6%96%B0%E7%89%88%E6%9C%AC/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Токен RWS","title":"Токен RWS","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20RWS/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"},{"id":"Стейкинг","title":"Стейкинг","path":"/blog/tag/%D0%A1%D1%82%D0%B5%D0%B9%D0%BA%D0%B8%D0%BD%D0%B3/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"zh","tags":[]}},{"node":{"locale":"ru","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}}]}},"context":{}}