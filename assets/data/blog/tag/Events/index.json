{"hash":"3eb877c8c18bdd73355385e47b0cc1673421e2af","data":{"TagPosts":{"title":"Events","belongsTo":{"totalCount":20,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"title":"Robo Season Pass 2025: Welcome to the Paper St. Club","path":"/blog/robo-season-pass-2025-welcome-to-the-paper-st-club/","date":"October 17, 2024","description":"Today, we live in a world where we rely more on technology more than ever before, the fear of being disconnected is real, and it’s only growing. With the number of smart, useful devices set to skyrocket in the next five years, the idea of “cutting the digital umbilical cord” from corporate clouds and surviving sounds impossible.","content":"\n\nToday, we live in a world where we rely more on technology more than ever before, the fear of being disconnected is real, and it’s only growing. With the number of smart, useful devices set to skyrocket in the next five years, the idea of “cutting the digital umbilical cord” from corporate clouds and surviving sounds impossible.   \nBut the engineers at Robonomics know how to guide you toward a self-sovereign digital life where your tech only answers to you.\n\n**The event consists of three key elements:**\n\n**AI Agent “Tyler Durden”** – Your personal guide to unplugging from corporate clouds.\n\n**Season Pass: “Monkey Astronaut”** – Your access pass to the Paper St. Club, and once activated you’ll earn achievements and participate in exclusive community events.\n\n**Achievement System “The Digital Freedom Hall of Fame”** – Track your and the community's progress and try to become a part of the next generation of digital autonomy, a virtual Martian colony.\n\n## The Paper St. Club   \nYes, we’re referencing Fight Club. Just like Tyler Durden’s frustration with the consumer culture, today’s world is even more complex. We’re not just losing ourselves to materialism, but to corporate-controlled technology. Afraid of surrendering your life to centralized systems? It’s already happening, worse yet, we’re balancing on the edge of digital enslavement, with tech giants like Amazon pulling the strings. We’re here for those daring enough to experiment and reclaim their digital freedom.\n\nFor years, our team has developed a complete chain of open-source solutions; from software to hardware devices that empower you to break and live free from corporate cloud control. For the first time, you’ll have the chance to join us in reshaping our digital spaces.\n\nTogether, we’ll share experiences, compete, and host exclusive offline events. This is your invitation to the basement at Paper St., but you’ll need your “Monkey Astronaut” card to get in.\n\n## AI Coach “Tyler Durden”   \nNothing supernatural here, just the magic of AI. We will create an AI agent, loaded with Tyler Durden’s rebellious spirit, and train it with a three-year development program from the Robonomics engineers. Tyler will assist all the \"Astronauts Monkey's\" in the club helping the transition to digital autonomy.\n\nTyler will assign tasks - not as eccentric as in the original work, but we hope just as interesting. The main goal is to help you achieve digital autonomy at the household level within a few months. Tyler will help you create a digital twin of your environment and monitor its status throughout the season pass duration. He’ll guide you in transitioning from corporate solutions to open-source technologies and will recognize your achievements on the club’s \"Hall of Fame.\"\n\n## Season Pass: “Monkey Astronaut”\n\n![Card-2.png](./images/robo-season-pass-2025-welcome-to-the-paper-st-club/card-2.png)\n\nEntrance to the club is by pass only. This helps us manage the workload of supporting participants. The pass not only grants you entry but includes the training and hardware devices needed for the journey with free worldwide shipping!\n\nThe starting price of the season pass is 420 DAI, available on OpenSea starting November 7, 2024.\n\n### First Offline Event for Club Members\nHeading to Bangkok from November 7 to 15? We’ve planned a [city quest inspired by Neuromancer](https://x.com/AIRA_Robonomics/status/1844293067009929439) by William Gibson, exclusively for season pass holders.\n\n## The Digital Freedom Hall of Fame\nAchieving digital autonomy unlocks far more than just control over your devices, it’s the gateway to the future of networked communities or the so called “network states.” The Hall of Fame will track community progress, gauging who is ready to build the first autonomous enclave under the slogan; “Who is John Galt?”\n\n## In Conclusion  \nThis is going to be an exhilarating experience. Choose the months that work best for you in 2025, activate your season pass, and let Tyler guide you. At the very least, you’ll understand the digital shadows your personal devices cast. At best, you’ll become one of the 0.001% truly free people in the modern world.\n\n“It’s only after we’ve lost everything that we’re free to do anything.”   \n*See you at the Paper St. Club,\nSergey, Architect of Robonomics.*","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.5e4f68fb331b6800bd1fba1456968ddb.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.5e4f68fb331b6800bd1fba1456968ddb.png 480w","/assets/static/cover.6b2ed88.5e4f68fb331b6800bd1fba1456968ddb.png 1024w","/assets/static/cover.62c183a.5e4f68fb331b6800bd1fba1456968ddb.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-23e357b68a4a8ad977c1559882bc84ac'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-23e357b68a4a8ad977c1559882bc84ac)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAALeklEQVRYw8WYSXNTSRLHZWNZtiRrsfbVtmR5t2VL8oaRFwxmawxMAM1AExDQzAQxHCaiCQYOcyKYvva1v0lHf7mc%2buVzys/CwHCaQ0W9pV5W5j//udQLtNtt%2bX%2bNVqvVmxcWFmRxcVHm5uZkdnZWlpaWeu9sXbPZ1HeNRkNWV1dlbW3tszU92efIr1SqMj3tfdvpdPRdwL/oe5T%2bnm%2b%2bJQuFMpmMU25aFeUa41Cyfw8DYWVlRb/rB9Iv2w8ccqdqNX22sbEh9XpdotGoBPyLvwXG2ff9o/1NYPzf%2b/fDkGw2q0pidKFQkK2tLX23vr6u94ADKDAE5VmLYebJzxjgk7%2b4uKSsKZbKyrKZmRkZGRmRQCBwygC/oK8BwbNOx5tX15zya25ebUlzdc3Na07J1hkDT%2bV9DpYnq6OGAcDExIQamM/newBgKIqmUin1HGDNz8/rPrCAcf5%2bp3sgH7BmZmZVHp5Pp9MSDAYl0HQCeQlCFlNf89ZKsyW3bmzK/t66bG%2btSfdSR/Z2N%2bRgf0u63S33bNN5bUOVxXuMdhsqt538toK15pOJQcQ7RmPk2NiYhMNh1cmAAQCUZS3fAACGozMGfclRzMjgO8bk5JQkEgnJ5XJSLBblwoULEpifX5BSqaQP2NSUOo8BeH5paU0eP7wkVw8aEo8NSyYVkXwuJqViUmpTWWnUC7K0WJWVpSnptGZka3NBujsrDpimu16VSzvI8UBYXl5WOmKIH4Dh4WH1ErHO/cDAgIJQLpcVUGiMYbzn2rxsxvodaaAB1Pj4uIYTOQa5Q0NDEjD0QQVUWcizVp%2bXlK6OvvMLTfnbiz25f9xQpS53K1IuRiWTHpHYWFDmGglJjYekWo5K1j0bT4bcRgGdM%2blRKeQisu1AWXVKAjr7ohDK4Z1kMqmhADCVSkUVTSbH9X5/f1/1I0zQkRmd/V5ePWE04LLGEiDgGsh4PhQKeSFgWZdhQpmNBc3mqiLNJqBdnajLj/d3ZHkxrwC8eLIk169MycO7s9LdLsvDe7Py/K9LcsM9O%2bhW5YF7PjQ0KOutvMzPpvSb5vKENKZrzstjanQ8HtfZQCDJvXnzRvcNh0dUWfY%2bPr7TAwDdMJIBCOeFAN8bAHiefWATnicJKgDEE6gwDD2MRSgCrO56dbTsAJiWf/7jUG5fr6uwR3%2bZk8lqTP7%2bvCn378zIzaOaArF/qSKXd6vy8qdlNXp9Le/CI6nXjemsi%2b1Uz3C8zv6wwZITBrx8%2bdLRvqTfwIDDwyuqHwCgK6CgP4zxhwBr7L0lScDF84wzALDIkEcw9zCARDQ4OKhKEXvQNZvNOCSr8uTHHdnqFFWxXJZ1AVmaT0mrmZW8u49GgnK4V3XP0nJxo%2bjeezFso1qOO0MTSm0Mhn14iFxk8WlZ//HjxxKJRDSD37hxQz2OU6ge6ItufAcIGG7etxBgxgZYhOEGQg%2bAqSkvM2IwnoB%2boE0iYpCFUY6Rz%2bcklc7JzettObrSlEp5XIqFuExUnfeyMR35bFSK%2bTGplGLu3Zh7FnHxP%2bLkO9RDbnMHVqOedvKyPe/jAIBg5h4A0g4Anh0cHKgOePTBgwdqFPox11xjY8AxYyxJ0nIXa5ABgKOjo2o4rGXGXuwLsCEXvGBASxSIxWKqoD9GWZvNFuRwf9GVv3VXVqoOsJLsdjfk8sFFWe8sy3S9LPNzU1KvlVzY1GW16TL1wpSrCjVprkxJbTLhgITy6R4dYRr7sQ%2bDaxQGkG53V59B5Xv37mlDNDk5qUaT1JhtmPN4T2hUq1XVGVkwymSnTsDVKsDmRk0UsvIAPfjQkOJ6ZCQk8URKdncartTRSsY1kU24%2btpsrjkvlNwGgDauI5cvaPfF81KpokYjm28s1vEOOmAsijGjA4Bj4O7urtIVelMFCBHC0ahvw8KUwT0VBOpjMPtYorcBqxQAq7H/CwD6LDwmG23n%2bVpRjfXom1KBqdRpTDO867QaQoySQ6LRiK7jO%2bTG4zHdF0/xjYWAJUUAQB88S3xjEPKgPPLNcGb/4D1r0R%2b9Ta%2bk23dkNOKAHzsfAFNAw%2bCEkjQljFjMPY8lZaNTdTGekrATYiGDx/Am37MxgEBFPAE16TjxTCg0rN9g4GliHOjty7cGADIAgHti%2bvDwUNlg3RyJzTx%2b3kAWOjFYrza4vQcvBCU4POIB4M/ODD4ymoEaXmJTGIDyrGk1HdXyCfduRN9ZwvQzJp3O6PGTWJxzI5fLqwLB4JAqxB7xuEu8iYirGqOSdQoCDO8wGC%2bjQ7fbVTCYb9%2b%2brfuzhj28cIqqLLwO4AzYxnMcik7IRRZy4/GEXBgKyXBo9BQAFhpSdlDAcwiGIRhJQqlWKzIUHNGSR9fHt6xhUyjdDybjZJPeiETC6sFiIS%2bvnrflP//el92LE04x2tR8LweYE/b29hQA4p8yiAzN3m6GAazHu1QzYxyzMcxjrpfQuU4kkg6AYQ%2bAYNADAJSgG4azGKEoYN4wj3llxzU4ewsy06hooqMWQ1NrU1nDZoBmZYck51UZb69YzAut8Oiwux51z0K6r/XpKEpIwAJKG6zy%2bpBsD0jzLM8wmn1Zj%2b6mv5736TxdAr1z546uJQQ8Bpz0Aed5TRschypCKT/Hx8cax3Nz/KlZlaPDFVfyOGPPalkCfY6nVAJOfdRuFLbQgAUMK7U2iP2BgUEFyBIv6/WU9gW9zKvoZ95HN6M/uthAf23XX7yQ33//XR4%2bfCB5BzIAkAi/CgDexPDd3a48ffpUa/DTpz/J3Xv35e7tLZmdqbq4LWqZo8RN1equHNZ0Xl5eUY8ix28whtqwrgwlGP57f2L2D95bAsSbeJl4x1AznnsbPDeGPH/%2bXH799deTY/CQ5ozhfgCgLbRiZgHe397ecvQ5lps3b8rPP7%2bUX375l9y7c9GhXnZdYV4y2ZxMTtWkVp/WMeeO142ZWf0LQ7xZHvD34f0Do%2b0d1/7exAbPCEVrloz%2b1hhZDiCMCB/WEjoAYaWdFnp7e1u7Shx0wrSzCcsoa89QCOEwglb0hx/uyub6pGQzY07AsKurrnlJuXwRHdNGB0bEXKYNOwUSyfEzIWBGGhh%2bo/1gGADGBEt2GMywIzQeNu/7Q4DZS9pVvcZw5Ozs7Miff/4pf/zxh7x%2b/VrlBr4Wa34QiLtiseDmhKwsZiUZD/VoicL%2bPpvDj137Pe03vB8A/3V/vJPcrGW37yxpGjCAYq2xxb%2bBAUvsv%2bJvv/0m7969k48fP9rvtsAZtP1xa9Trj0kASI2Pnnlvse03up/2XwPADxTGorD3PyCsgwrVa9Cc8RhGmBLf0NzPAu7xvuUCrukk%2be7KlSvy/v17efbsmX4bMIPNgC8BwjuamB4AydEeA/zGfMnI8975M7/f%2byh969Ytefv2rRwdHanR5mVLaoCDtymHllSJe5KkdZGst9MiMvmvwXoSoSXp3mHIH3f%2brH323gNlecEdJtJRLWNfMvpbAFhZ9O9rx1QUfvXqlXz69En/DD169EirkJ0xMASKY5T9zsMogLG495dDCwXLGX0hHjgTw/2Ut3ven5QNx4CcO6%2bH3fXgN43/Ukgg1zs3xKXd2pBKuarVhwrSane0sbrpOr8nT57Ihw8ftBRbh4r3MYr6zyC2mf2hYHnAntXrXrIkFAC4B8B59PdT26N%2b8IRmXoOyOJeWXCZ6psR9jQn9idC8D12vXj2Sa9duaRNFBanVGzIzOyfLK03Z3NzSygMIly9fVu9jvP0IyboSXHCeLxS8kykHHKoRs9dtJrTlHQ1HdG2p5J0cAYEy2gPAPG3GmocsO7PGe%2b4BsOwYkEmfMsDWfw8DNJM7JTBsAg85L25sbqrxS66R6qxvyNG1a7J/sN/r%2bvAmADBjDAeuTCar5Tccjmp3Fx1zR%2bBIVAbciY9TH33/4IVhvR4KhvSetRMTk9oO/xeuHoawPIZbJwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"The Experiment With Beer Bar at the Polkadot Decoded 2024","path":"/blog/beer-bar-decoded2024/","date":"July 19, 2024","description":"Last week, the Robonomics team visited the Polkadot Decoded event in Brussels. They did an experiment to measure different readings from sensors around the Free Beer Stand from ChaosDAO. The team wanted to see how many people attended and how interested they were in the bar. Read this article to find out what they discovered.","content":"\nLast week, the Robonomics team visited the Polkadot Decoded event in Brussels. They did an experiment to measure different readings from sensors around \nthe [**Free Beer Stand from ChaosDAO**](https://polkadot.polkassembly.io/referenda/821). The team wanted to see how many people attended and \nhow interested they were in the bar. Read this article to find out what they discovered.\n\n## Equipment\n\nFor the experiment, a set of sensors was chosen:\n\n- temperature and humidity sensors\n- motion sensors\n- door sensors\n- air quality sensor\n- beer meme-counter in the form of a light bulb and two buttons\n\nA Raspberry Pi 4 with Home Assistant installed and Robonomics integration were used to save all the data in the Web3 cloud. \nAt the end of the article, you will see a description of how to obtain this data.\n\n## Installation\n\nHere’s what the bar looked like:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/bar.jpg\" alt=\"Beer bar\" /> \n\nThe main counter where beer was handed out. Behind the counter, there was a tap and 2 refrigerators with drinks. \nThere were also small couches and a PlayStation 1 with racing games on the right.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/play-zone.jpg\" alt=\"play zone\" /> \n\nThe door sensors fit perfectly on the refrigerators. This allowed us to count how many times they were opened to take out a bottle.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/fridges.jpg\" alt=\"fridges\" />\n\nA motion sensor was installed in the PlayStation area so that it would only trigger when a person approached the TV to take a gamepad:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/sofas.jpg\" alt=\"PlayStation zone\" />\n\nA motion sensor was also placed at the main bar counter and oriented to trigger only when a person was directly at the counter. \nIt can be seen on the left on the column. A temperature and humidity sensor was also installed nearby:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/column.jpg\" alt=\"motion sensor installation\" />\n\nSeveral more temperature sensors were placed inside the bar counter and at the coffespot which was nearby.\n\nA beer meme-counter was also installed, which would light up green for 5 seconds if the “Beer” button was pressed, or red if the “do not press” button was pressed:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/mem-beer.jpg\" alt=\"mem-beer counter\" />\n\n## Data Obtained\n\n**Disclaimer: In this section, all data will be shown in the Home Assistant interface for convenient visualization.** \nThis same data can be obtained from the Robonomics parachain and compared. Instructions are to be provided later.\n\nStudy period: For the study period, we will take the time from 16:00 on July 11 to 20:00 on July 12, which corresponds to half of the first day of \nDecoded and the entire second day.\n\nIt is also important to clarify that the bar opened at 12 noon, which also limits the measurable interval.\n\n### Temperature and Humidity\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/temperature.jpg\" alt=\"temperature sensor\" />\n\nFirst day (July 11) - as can be seen from the graphs, a comfortable temperature of 25-27 degrees was maintained indoors.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/temp11.png\" alt=\"temperature 11th\" />\n\nSecond day (July 12) - the temperature dropped by a few degrees but remained comfortable.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/temp12.png\" alt=\"temperature 12th\" />\n\nThe temperature drop is related to the rain on the second day, which is clearly visible on the humidity graphs. Humidity increased by 10-15%. First day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/hum11.png\" alt=\"humidity 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/hum12.png\" alt=\"humidity 12th\" />\n\n### Motion Sensors\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/motion-sesnors.jpg\" alt=\"motion sensor\" />\n\nYellow indicates the time when someone was near the bar, gray - when there were no people. Motion sensor at the bar - first day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/motionbar11.png\" alt=\"motion sensor at the bar 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/motionbar12.png\" alt=\"motion sensor at the bar 12th\" />\n\nAnd PlayStation area - first day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/motionplay11.png\" alt=\"motion sensor at the play zone 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/motionplay12.png\" alt=\"motion sensor at the play zone 12th\" />\n\nFrom the sensors, we can see that almost all the time the bar was opened, someone was standing at the counter. \nAlso, almost half the time, someone was playing on the PlayStation.\n\n### Door sensors\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/door-sensors.jpg\" alt=\"door sensors on fridge\" />\n\nGreat, we've looked at the general indicators around the bar, now let's try to get some numbers. For this, we have door sensors. \nThere were 2 refrigerators. On the example of one of them, let's see how to count the number of openings.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/door.png\" alt=\"door sensor example\" />\n\nOf course, you could count the number of yellow stripes on this graph, which are the moments when the door was opened. \nBut you can export this to a csv file and get the following:\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/doorcsv.png\" alt=\"door csv example\" />\n\nHere, each individual row shows the time of the sensor state change. So, by simply dividing the number of rows in half, \nyou can get the number of refrigerator openings.\nAs a result, we get the following table:\n\n|          | fridge 1 | fridge2 |\n| -------- |--------|---------|\n| First day  | 76     | 78      |\n| Second day | 111    | 87      |\n| summary    | 187    | 165     |\n\nA total of 352 refrigerator openings. And we can confidently say that this is the lower bound of the number of beer/water \nbottles that were taken over two days, as multiple bottles could be taken at one door opening.\n\n### Beer  meme-counter\n\nAnd lastly, the beer meme-counter. It was installed only on the second day. There were 2 buttons, one labeled “Beer” and \nthe other “Do not press”. How many times was each button pressed?\n\n| Beer       | Do not press |\n|------------|--------------|\n| 83         | 44           |\n\nAs you can see, about 2/3 of the people chose the right button.\n\n## Data Verification\n\nLet's move on to obtaining this data from the blockchain. All data is stored in the datalogs of this \naccount - “4EsopMUbxQH5NseBXiJcPkTy5ZRhs7XrjuMBqmoCzBqWQ9gB”. Let's open it in [Subscan](https://robonomics.subscan.io/account/4EsopMUbxQH5NseBXiJcPkTy5ZRhs7XrjuMBqmoCzBqWQ9gB).\n\nWe will see all its extrinsics. Let's filter them by date. We will get about 140 extrinsics.\n\n<rb-image zoom src=\"./images/beer-bar-decoded2024/subscan.png\" alt=\"subscan extrinsics\" />\n\nEach of them contains an IPFS CID with telemetry. Let's take any extrinsic and extract the data from it. \nFor example, [this one](https://robonomics.subscan.io/extrinsic/0x4f1bd898b367f32414fd397094e132262fbeaa8b50e7288d9aed908a138382f7). \nIPFS CID inside it - `QmZMkJo6StbfDVvGCqVnV3sZeG7R3cftt7WXfdUVdpJ4c3`.\n\nThen all you need to do is use this script to decrypt the data. Replace the IPFS CID in line 11 with the one you need:\n\n```\nimport requests\nfrom substrateinterface import Keypair, KeypairType\nfrom robonomicsinterface import Account\nimport typing as tp\nimport json\nimport os\n\nADMIN_SEED=\"client teach develop blush just ginger depart sister orange rather measure park\"\nIPFS_HASH=\"QmZMkJo6StbfDVvGCqVnV3sZeG7R3cftt7WXfdUVdpJ4c3\"\n\ndef decrypt_message(data: tp.Union[str, dict]) -> str:\n\n    \"\"\"Decrypt message that was encrypted fo devices\n    :param data: Ancrypted data\n    :param sender_address: Sender address\n    :param recipient_keypair: Recepient account keypair\n\n    :return: Decrypted message\n    \"\"\"\n    try:\n        account = Account(ADMIN_SEED, crypto_type=KeypairType.ED25519)\n        admin_keypair = account.keypair\n        print(account.get_address())\n        sender_public_key = admin_keypair.public_key\n        if isinstance(data, str):\n            data_json = json.loads(data)\n        else:\n            data\n        if admin_keypair.ss58_address in data_json:\n            decrypted_seed = _decrypt_message(\n                data_json[admin_keypair.ss58_address],\n                sender_public_key,\n                admin_keypair,\n            ).decode(\"utf-8\")\n            decrypted_acc = Account(decrypted_seed, crypto_type=KeypairType.ED25519)\n            decrypted_data = _decrypt_message(data_json[\"data\"], sender_public_key, decrypted_acc.keypair).decode(\n                \"utf-8\"\n            )\n            return decrypted_data\n        else:\n            print(f\"Error in decrypt for devices: account is not in devices\")\n    except Exception as e:\n        print(e)\n\ndef _decrypt_message(encrypted_message: str, sender_public_key: bytes, admin_keypair) -> str:\n    \"\"\"Decrypt message with recepient private key and sender puplic key\n    :param encrypted_message: Message to decrypt\n    :param sender_public_key: Sender public key\n\n    :return: Decrypted message\n    \"\"\"\n    if encrypted_message[:2] == \"0x\":\n        encrypted_message = encrypted_message[2:]\n    bytes_encrypted = bytes.fromhex(encrypted_message)\n    return admin_keypair.decrypt_message(bytes_encrypted, sender_public_key)\n\ndef main():\n    account = Account(ADMIN_SEED, crypto_type=KeypairType.ED25519)\n    admin_keypair = account.keypair\n    response = requests.get(f\"<https://gateway.pinata.cloud/ipfs/{IPFS_HASH}>\")\n    print(response)\n    with open(\"telemetry.txt\", \"w\") as f:\n        decrypted_content = decrypt_message(response.text)\n        print(decrypted_content)\n        f.write(decrypted_content)\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nAs a result, you will get a \"telemetry.txt\" file with json inside. It will contain all the same data we reviewed above. You will just need to parse it.\n\n## Conclusions\n\nThanks to all these indicators, we can say that the idea of “free beer” from ChaosDAO was successful, and people actively used it, \neven though some the beer didn't run out. And thanks to the sensors and the Robonomics team, you can see quantitative and \nqualitative indicators of this event with data saved in the Kusama network.\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.fe70e4359427333ee63b6d89158536ab.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.fe70e4359427333ee63b6d89158536ab.png 480w","/assets/static/cover.6b2ed88.fe70e4359427333ee63b6d89158536ab.png 1024w","/assets/static/cover.62c183a.fe70e4359427333ee63b6d89158536ab.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-813079ed5b23b588d9ce05e2e5dfb096'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-813079ed5b23b588d9ce05e2e5dfb096)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAAYJ0lEQVRYwzWYB3Rb15WukbyWFZeJLVuyJav3YomU2HvvvTeQBEEQJAEQ7EQjAVaQYO9FJMUqUpJNUZXqvVh17DiSZVtO/Cw7WXbi8WScGTsZv3zvRLMGa%2b117j0XuDy7/fv/KfF3csVr9zoC7d7GdcsWvHasxW/3aoLs1hFqtxH/XRvFuoGwfRsJsl%2bHv3gWIGz5std4Y9ly3nz1dd74p1fIdlqJ0nMtGu/1aH23kOe5hRyvTSj81pHqvo4Mz9Vk%2b75FhvdqktzXk%2bGzCanvJrL8t5EVsItMfzsyffeQ4SXMw41k5wgyXZJReStR%2b6pQiDXPNwZ5oB9ZQR6k%2bTuTEOhIpM92wrw2EuGzlSDPbYR4byHUexMhYi/Ye6O4F2f33UaQxxY8HNbi4bgSz33LcbZ7DTf7FUg8XCLZvH4P29c5smWNPZtW2bNzgzM7xPX2t%2byx3%2bSC4y53secg7h3Yt9sdO3tXNr2%2bgVdfeoOXX17Oqy%2b8RuCOUFR%2bWsr8jSg8VLjt8MF1qy9e2wJx3OSJi7h23uqH3SYP9u7wZZ%2bd2HcIxMkhAId9ocKixHUc7o4KvOxq8Fzfgu/rM4QsXyLkjVMErZ0kZOM4PttacdidwZ5dLuzYKpLm7oN/WCw77VzYtn03mzdsYduWHWzfuoPNm7ezZu1GNm3YzLaNm9m5ZavwdROrV65mxfJVvPnmGiTxiYmY6xrJzpbh5%2b3DujfWsnr5ata8sYq3123CadtOnLe9zcY1G9i6aTO7t29n%2bKVkPpNUcuvnKnxe3cWvxG/SXTPI90jGEFyILlBFZYgGqWs8sU7%2bxLkFEeHgTbi9B6H7PPG18xBOehHhFUZ4YDzJCXlkpWtIiZIR5pFKpIOO9H0DFOx%2bj8rdDyjedw2d523yd7%2bD1Gc/4b6JBDu54Gu/l717HImIS8Hd3Q8fZwdCXe0JdXck0Hkvvg52uNntwsvhbfyc7PC224Hn7m04vb0VD/sduNrvQjI0MsLI%2bCjDU%2bNMHpnj4Nws8eGROG3fRbiLB0m%2b/iT6BuDs4cjI%2bnT63kxi6PVknkhKOCpJR/GiJ7Mv52H1MtGdqKM32cRgjoXW1AKashUUhkWiiY0lNzyC7MBAZCEhRIn3ZsYkECQy5x%2bWSF21CVtTA/2tTeQnJxHvGUmaq4q6oAs0Csct/rdoCX9EmecCRamDZIrvxHp5EuXtxVsr3mKPvQvh4XEkhQeQGupJUrA3sX4uRHq7kODvTqy/G/GBHkR7O4k9R6L9nQj188bTJwZJpc6Ek6sn69ZvxdHVHX2Nmbi4RDau3siWtZvYtnozK1evIuU1V5C0sCCR8sLyV3jrV2/ys5deIOkFF7HfwMM3LLRHmjlmnuTq2Yu8OzbL4f3jzI2NUynN5NjBOep1Omb3jzE2MMLY2AGOnFxicGSc48eOcXrpNAO9PTTVmDCUaPG3y0breo8mv19T7/sIi/cTDP4XyI3sIyE8nqQAX1JCgtkmzu3q7k9MVCIx4eGkhPuKIHiRIHAiPsBdBMCNxGBPERBXYvxdBD644Oq4DzevaJw8E5BEJiSTW6imsLiEvCItmrJyomLiWfvmWtYJW7PsLV569RXK/qcPX0p0hP1yF8uWLWP9slWsFEHY8MoGzv9CxW1JPuWeucyWdNFfZqO1yEBfkxWbxUKb2UxPczMt1TU0mqppMNUwNjlFXZON2nobbS0ttDZbabSYsZiMmE0mfHdKKXF%2bQJPbE1qcvqDd6/dUB1wkN6aHjJhEsiNCyIkLFTiwBU//AJLik8mIjyY7LghZXCBZwjKj/JBG/FdAkoSlBLkTF%2bgusu%2bGX0AiHn5JSMpr6zi4cJgv/vCMjz//lDuP3mdyeppQZ3dR/oHEu4vedXcncO0%2bZCtcBXLuIsxun5gaAmhWrsdptx0puxKxrSvkbPwA99XzHNON05Ovp1YEtFKaRWNJ6fMqsKjUVOcpqVLmc2BunqKqGjSlBkZ6umkUQTqwf4TujnZ62lpRpxTRn3%2bLobhPmcv6Etue32H0miYnwkx2bJSYBF7IgmJxEADr7y7KPzGdnPhgFDH%2bZEf6IBfOy8V1ZoQ3GRE%2bpImKqArxI8XHmRhfB6Ki0/EKSkaSkpBDWKToO9GvBZU6bIMDdPX2ib73JS8mEnlosOgtH9rXpvCFAD6zWwoZUQFECFDZsX47ie4eXFym5ekvazgV3MIT6xKnjyxy4tC7nBJlPT40xJh43/TYGIdE1t%2bZP8T8zCxXrl5lcmqa6elZZkXAm61WThw/ztTEJIfm5hjoGhLtcoJDw0scHbuEfustyrz7yUvRI4%2bPpza7nhuL7/PtV39l3DZPomMOmiQpmpQAFLF%2byKJ8RJX4kBHmhTTMmxR/V5I8nUjwdRT4sQdv72B2O/ohufXgLuevXaWusxNVhZGswmKy5PnIwgNRx4ahigpFFhtAtX2y6HUrd1YbqWuxUpgYywb77WjW%2bYv9Jo7%2bPJ2TyTaeaBc4kNdAdWoetQoldbk5mAtzMcmk1KryMOVmUa7IoaWziwpzPVpjA1k5CspKSzHq9Rh1Riq0GlHqMmqk%2b2n1uU%2bz6w3qXS9jDB6iKKea3poZfvjX/8c/PiemDvLjv/0ZRaKU4DUR1Ctyqc6NoiIzCp0sRqzRFKdFoEkOIj8hAE1aiLBg5Dm5pMtVSErFIToFUI3NH2FQvKyopha5opDcqDDUUSEUx4ejjvAnNSWZjtdSqX8hknP%2bDXz%2bT0bOLytk0kXG1C/SqbaT8VgxzRfKI1yMaaQhXEp/SRlt8mxqkyKpTY6kKioIQ0o8%2bZFhdAkwrB2cpHFsgabRecotVnRGE3q9jprKUhJ8AigK7KNj9xf0b/ktfT6f0Jo8g1ZMmi8/%2bdfnzv/wHz9yvG%2bKv//0d0aLzKyXvIQmvJCu0hQaCxJpLU7DVpqOJT8BkzyaGmUcVXnJlAjrHRmla3QayU5BbBwcvdgn5rSdoy8O7iEEBEQjFT2lz5VhU6bSpUonLzsTOxc39jq5c2KDlo8lGi5LZLTF51BcU8mseoo/lSzxjfo4VxObRQDSuH1ikamaKhpTIujKT6NDk0t%2bhpzQQAFgBSpS5YVEJmUhVarJUBaRkKFAliWYX2EZURGFyF0f0LfvGxb8vmPI/RssiX3UKSz8/T//4f7f%2be/PjcOnyHjFnlcl/0uwzFT2mwoYMGTRq5cxUCOnS59DZ1U2tpJUjCX55Kk0KNUqZEo5knC/cCL8I4kIjCYqOJbkOCmhAZF4OnuSFhmBQZ5MszqTYD8fgaBBJARH0qKrRRkaR6LgCzaTlia9haHcbp5V3uX7nt/wxfR17i0s8uTuXR7fPM/dEwIYR7rIixd/JzSCaDGzC9TlVOjMlFbUUFJloUClQ5FnolDTTmp8O57b64hdc5vWt59xKOD3dHk8ozqpgRpZNT/99b8CMFxkweN/v0W4ZA2a/%2bPA7p%2b9Rvy%2bZEYayhm1qjlgK2ZC2FiDmonGAsYbCuhqradCtJpKjGRDoxWJk2c0rgFJ7HQIYoe9P%2bu3uuHiEUF5USWZkdEkC9TMEPM01MOfQPcAgj2DOW0bZ354kuSwJDJC0tBHl7CYfpi7ccf5%2buTT51l5%2btmPNNuecujI75/ff/v11yhjBF2WiX6vsPDw//6Jh7//M9c%2b%2bQM3PvuGqXM3Wbz7Eac//C1Hbj0QzNBK9Ir36HL8M4MBggPseYBi%2b1VUCa1889W/8bu775Mv2Ul3sZnqbVGE/I81rPq5GNcJFfQ2l9LaYqbZXEJJYSZF6lwGGjQMWRQ01FZRUlkhwPYAB8f2I4mQFpNd0UxWSS1SYRqNAKXsSvTVzfTpytlfmk2LPAVtZi6x4enUFhq42THF1f45umpbqNWa0ae2UB1n5Jb1KH//40/PHe7tecL161/T1vqYZ198/3zv/oXTmLTlmBraGT5ymv3zC8wuXWXh9iPGT11h4MgZWoZnsE4uYGgYIcf1JofDv%2bVG9tcM%2b35Mrf%2bHyOItDNRO8eTqb3B9cSUGVRHJ6xzwkqwgcHschRk5FMrjMBnLqVRnI0uJRJmThkmdRr3VyIQY%2bc0N9fRplQzrypB4R8pILjSRrjaSUFBFuaqRppI2qg0t9NW2MWIWFFVfi0mjIyZSybHWg9zrmubm4GHeO3QCvU6PbG8rAY7xVBhM/PWnH/jq2b9z4sQzero/Ynz8Kbdvfc1PArQ/%2b%2bC%2bIEV1%2bHiHsGLFGjYKphkYkYR1%2bgyJ2Wre3i5EmRAya9dsIik6l9LwgzT6LDEacIuOoHcwRk%2bTlVJJlE8EloI%2bFEJ3rP/ZGna8ak%2bubxGWqgYqSrMoElnPkOcSkaklIymK4sIs5IlBlMeEMSFKv9FSQ3dRHsNilbiHZBKeriY4Phe5rhG92ow0UE50vBRTfi7WHIGe6SFkxiXRWDPK3aEFbjaNcrV1gtuDR7BUWsgP7kHqX4m/kKtXL1/ju7%2bIChj4nMHhL%2bno/pwLV//Cf/7wPTPGQkGND%2bLjE8Qbr69k3eoNQsJGcarzMqGRqYLXv8matzbwyitvkhaWgTV1EpvvJWadn9GfcB59%2bDFSY0wEhwaKVgygQmUQpMpAeY6GSlGtFms15dos1HkpJKenEZWSjTwjjvJ8AeJRggjtWM94RBgWQyUDZRp6youR2AvUdPSLw945FEVZPaamTvJyyzEIgGkpMzBQXsFYaSWq9Dx6TL18ICrgcu0Q50393GqfZa57gqKkQeL98ggNi2eoZ5x//%2bgpv754iaXZeR5fO8f3n9/h8cVDHKguZ35qkaS4DNauXseWjVsI94njRNkiYTGZRLjYk%2bK%2blijnVdQmpnJQM89g%2bhVGYmY4aariqGkAbVapAOlACtPSRKazUeSkUCBPQCNKurrWQLEqg7ycBKKjg1FmRKGQxqLNTRI8wBfVtrUYXF0wVZYxqhPgKCaUxCNcTlCqAt%2bYFBSmZsqb%2bhhpG6TX2Io5rxiLMo/OijKK8zXM28a4WTfKOfMAZ429nG8e49L4AlpFNqnhrkKkBGBr6OF2/TwDomVGWio42mFgsEbLSLWYz6KVGqobUKYr2LxxI7t3bCcqMp3B7kWiM4vpkkbwwBrEuDqQQyVC0e1LxHNzrJCw0SyWLuNR/c%2b5ZFjOpdrNHK/xZMFgj14RREpCFLnydFTafDLTIpEKzpESH0N4RBDJgsekJMfgJKj7tuXLef3VFfjstadNmYVVJcZgf2k9IyWNDMlMTKXpmI4sZCa7ioWKNmYLhKCpEs9rrFwRmbs/eoILwulTwvmTVT2csU1wc2yR2lIhoPw9yJWms39wluM95%2bnRtmIsEAEdv0Df3El0guFpZHk0WepRpckIdvfFTgQgISaVuYlTooStdGaFc9eWJLKjZEblybbtEcgyCtlpl8yoYgU3bG7cqdvE45aV9BV7c8rsSJ3SAz9fP3bt3MOrr63ihV%2b8RERYDA2NHWQqVGTk5qPMl5OQlklqRibe/oFCHQbRosykKT8byaJ1QIy1Axw3D3LcOMCirptDTf0c7BjiqGBZR/tmWOyZZMHYQb8ISLMAS3NWCabkAprzKmhUlFAhl5OXLPi50UybaKGZkXlmRSVN1tjoHNjPjz/8hW//9EeWlpYoyCtgcvQAUyPTWC1tdDW20d3Wz1D3CMN1jfQUxHBQCKO67ETBF/LJzaoiLFRGq0D19tJE6lI305a9kUF9CGM6LxFMX0GaIvD2C8RZiDZPDwcSYmPIU2SSk51CUnIyqUkxyLLTn1uaYKLpKXGC74SRmRCJJEdZTm5BBQVFehSqKnIFIVHKVKQFhlOZpaVRXoElu5SyWDnFYVIqQqSURgigCUxFH5GNPk5OqwDQ4gQ5ZZWNlIj3FCqraKprp61/gAKhLeqEk8%2b%2b/MPzUTg1NcW3//In7ty5g7qgEl1ZI5XCTIZOWprG0FW00FCzH5OugxbrkNAG4t7SQa14Zi6soy/DzEBxJwdLhezOrWMiv5kxRR3jynqm1Famq7qYK%2b%2bmW1HDXLCOY2F1HMhoYqqwncn8Vobl4nvZTczLWzkgE0RImV%2bJskCHpkiwMLUBqXC2WATCmJXHXPUAd/oXudk8y73GKe41TfHYNsf9llnes07zqP8416xTfNI%2bR3dOBQmZgsYWlIn%2byxJO6cjLyqWzzIkPr3RirNLS19fPmTNnGN4/IVighcpKvSAsnZRq6jBUWp8Ho1rXhqHMwp2bd/juuz/T2tSFWddAuaGWtpJm7ndc4ErvRT4avceN1jM86LrMnfYL3Gg5Lc55miuNi/x6%2bDpnWxb5UH2YZ3nH%2bef6JR61XeTTlks8ab7IZ40X%2bLbpOp8aTiHJlArhk11MgaxMKK0KwdQqyMwqFCWdwaSpj5MNouerBzlnGuSMoY8r1UOcNvSyWNklwHCYBX0PFy1D9OQUU5qeT6WygvRUOUOCKSaFOnPe%2bjK8H8L5jk3Eh%2b4lNU3KycPdXJgQJRrvS6utG115Da2NfbQ09mCpbuP2zQd89eWXnD65xI9//RsNxkZqc0Swcky8Wz3D4Vohp5sWOaqb4KR%2bmmO6SdG6ExyrGuNIxQDnameYNoozKwa4JSbUQskw5w1T3CyfZjSnkV61qJy6fmYbB5BEObjTFKegMUyOJThLjKEgPO0diHXx5pAYdZfMI9ys6uNuZS/vVfTwvn6A98TLrwm8uC%2byf1k8v999iAclLRyPyxHiqRBpXAKFOVK0sS/z7cldcMeVpbpfkiRQeb9%2bD/9yzpXvz%2b8TKvNF6uqa6bW10SvW9uo6rp4997xVvvriGUvHTvDDX77now8%2bpDtDy%2bGkeu52XuB62xKfd93gjvEo943HxHmOcl13SKyHuWI6yKOOc5wxz/LbwsN8J1vkgeFdPjAs8LBwgjTXOPY5hpOlqiRCNyQwICWMnOQocoS%2blyckUJSejjlfQUWSVES7n3si449LOvmwpIP7pR081PVyTd/LRQGWt0R1nBVVcrVjhntlrYwLldXRXs14VxOqrFiqpb8SUm23sK1YZS%2bi16iplb7ON4vr4aE3YyUvkpsaSFtdA731dVgFS3v8/vt89unHPP34CdcunOPqqWP87W//wURTA8MhpSyZ50TlzfOb2pNcKpniSuk050omWCrez6XKA5yq2M/1%2bmlO1HUxIaZal0c%2b7XFlLASZOO6sQ%2boWRWGWmjzR%2bvq%2b40iazRoMxbmCUclp1mppV2uw5YkAxKdwqqyNp/I6/phWzVeyep7kW3lc3MGdsg5uCLtvHuKaqJI7XQf5SATknYIiaqqLqRUMS6OQ09/bxfVTPSz0RCANWkmz0PmK6G38bmYF3Hubu8NrCXNbRZ%2btmZHeTtrrzXz86Df89rOnXDpzgqWTi/y38J2vt3LOu5Ybte9w17zAV5YL3NPO8VB7iNvFs1wrOsB7ZVPcyBXTLNaA0tcVVaj38/8MFSYHowjwIXqdPRkOoSIRZSIA5fRNnUVirVHTKxTSmMXCfmM1Q2YLbYJWViQksSSy%2blRRzzNpDZ/lNvBBfhPvF7dyXQTmUmkrt2pEn%2bm6uNQ8zj9XtTMtRpxNSNGeOhPd9dU0mvS06CuxNbeTnxrJWIeNAjHr6xRrebhk5MisYHblgpt39DM5PMBARxvHD4tgCs1wZHaSd4Vdu3CWqyfPigqoZSKygsvGg9yomuN3VSe5XjjJLc0MVzQTnFePcE0zyrHQGk64alHucyNh114yvN2I8nNj9cpVbHnlLZL2%2bKPN0yDLLyG0%2bRASW53Iem053YIWdteIkhFm1ZViSE3nTJmNjzRtfJZn5RNBan6tauGRGD93yzsFoHTy0DLC9X9UQMcsHwmaPKPRMjDQzHhfC6O9NmZHepjsaeLIeLeQz61M9LVirRFjMl/N6MAwI13tHJ4YYWZ0kPnRAU4cnOD49AjvjnXz7oE%2bjuzvEL9r58hoB7PddUwlG3hgPsoD0fPfVF/mgaDKD4vmuVs6z7WCMe4rxzjnb%2bGqRxWWAH9Kvb2oSghDlxPDro2ryFrthebtSAH6MpQlBkq0Qgu0WIrobbEwOzgiDjzK7PgEA92dVKSlc7TSxu3yDm6L%2bXpH3cJ1sd4QSvF8iY0zpTYxEfo5KRjj2YZhERDhuDKfxlpBm3MzhWqLRV9UgLU0n/HOBozyRDQ5GRTJpailibSbtBzostKsL8ZoMNLePcB4fxczQz0cHO6iy1ovwLFJnK2FrqYmxlprGEkq53z5JBcrp3msX%2bSCeozLWpH94nFOKAU1l3cz5yXot5ManY8HKjcnLNJo2soycLPbQM4GP7r2yslOy0BbZsTU3M3/B6VHEjldqqPBAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Hacked Johnny's Lab","path":"/blog/hacked-johnnys-lab/","date":"June 25, 2024","description":"There was a recent event “Hack Johnny’s Lab” by Robonomics and I believe I did hack it in a way! Apart from the very first try which I lost due to rules misunderstanding, I won every round I took part in and here is a short “howto” story.","content":"\nSo, a quick and necessary rules recap: 12 words in a mixed order, a 5-minute video of a TurtleBot 4 wandering around a lab \nand spoiling the mnemonic phrase word order, 5-20 participants willing to win and a free Sunday to think up a strategy.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nI’m sort of familiar with programming and I have a decent laptop and almost no skill in image recognition. More than that, \nI decided to play it fairly, which means no video downloading, no playback speed abuse, no playbar navigation. \nSo the picked strategy was a good old bruteforce. Sounds more hacking that anything.\nWhat do we have here: a set of 12 words in a mixed order. This gives us 12! (factorial) options of phrases \n(479’001’600 to be precise). Quite an amount to process!\n\n\n## Strategy 1: dumb and straightforward.\n\nWell, what else do I need, just go and sort through! But here is the first trick: 12! mnemonic phrases just didn’t fit in \nmy 64 GB RAM! I got a SIGTERM error in the IDE console. \nSo I created an [iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) and started the process. \nIt took me some time, not sure exactly, how much, but within 30 seconds, to calculate the number of combinations. \nJust an evaluative run. But the thing is: my laptop didn’t even spin its fans at max! A single core was loaded. \n\nI googled a Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) package to load all \nthe logical cores of my CPU (20 of them) to parallel the computations. Otherwise, it would have been an eternal journey. \nBut with that I had to split my iterator in 12 parts. The itertools multiprocessing packages do work together, \nbut when a whole set of options is in the RAM. That was not my case, so the following was performed:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nFrom that moment and ever I would use this strategy to make my CPU load monitor look like this:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nI believe this shortened the execution time down to around 5 seconds. I got the best way to iterate through \nthe combinations but there were just too many of them! The first step involved performing roughly 480 millions \nextrinsics in the network. The node would simply ban me for DDOS and even without that It would take forever!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nJust for a debugging reason I started the script (for node communication I used a \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) package) and noticed that prior to call \nperforming I got errors like _invalid mnemonic phrase_. A clue! If I could validate the combination on prem, \nI would save tons of time! GitHub parsing led me to \n[this](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nline of code and I added a combination validation to my script. This has reduced the number of potential extrinsics down\nto roughly 39’000’000 12 times faster!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nBut still, 39 million calls would ban me forever, so I needed more digging. How could I significantly cut the \nnumber of calculations? Well, by a little bit betraying my initial strategy. See, I was going to avoid video watching, \n“a hacker, who won’t even need a video”, but the math made me change my mind. Change it to a 132 times faster strategy. \nBelow is the explanation:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nWith that I only needed to know two correct positions of words in a phrase (one would take too long, experiment-validated). \nI would iterate through a 10! combinations, insert two words in correct positions and validate the phrase, \ncutting down the options to approximately 300’000 quite a decrease! More that, 10! combinations set fitted in my RAM, excellent!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAlso, rather than trying to transfer all the tokens each 300k times and calling a public node for that I decided to set \nup my own local Robonomics node synchronized with the chain and ask it for a resulting account address balance! \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (I’ve set a cache limit so that my \nlaptop won’t blow up with chain data in its ROM) I gave it a try and.. this was a disaster. Network transactions \n(even within a localhost) took too much time. I didn’t even wait till the end, it was obviously way slower than \nwatching a whole video. If only I could know the exact address of the account! But for that I need a mnemonic phrase… **Or do I really?**\n\nLook. The rules say that the desired account has **exactly** 42 XRT. Why wouldn’t I get all the active addresses in the network,\nfilter them by having exactly 42 XRT and compare each generated address with a list of possible targets \n(around 20, decreasing to 1 in the end). Easy to say and to do. \n\nNow, after modifying my script once more I finally made it to only one query and one transaction which would for sure \ngive me the desired prize.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nNow, after I watched 25 seconds of the video (meanwhile filling in the words of a mnemonic), \nI would only need 30 seconds at max to steal the reward. Hacked it.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"تم اختراق مختبر جوني","path":"/blog/ar/hacked-johnnys-lab/","date":"June 25, 2024","description":"كان هناك حدث حديث بعنوان 'Hack Johnny’s Lab' من تنظيم شركة Robonomics وأعتقد أنني نجحت فيه بطريقة ما! وبصرف النظر عن المحاولة الأولى التي خسرتها بسبب سوء فهم القواعد، فقد فزت بكل جولة شاركت فيها، وإليك قصة قصيرة عن كيفية القيام بذلك","content":"\nلذا، إليك ملخص سريع وضروري للقواعد: 12 كلمة بترتيب مختلط، ومقطع فيديو مدته 5 دقائق لـ TurtleBot 4 وهو يتجول في مختبر ويفسد ترتيب الكلمات في العبارة التذكيرية، و5 إلى 20 مشاركًا على استعداد للفوز ويوم الأحد المجاني للتفكير في استراتيجية.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nأنا على دراية بالبرمجة ولدي جهاز كمبيوتر محمول جيد ولا أمتلك أي مهارة تقريبًا في التعرف على الصور. علاوة على ذلك، \nقررت أن ألعب بشكل عادل، وهو ما يعني عدم تنزيل أي فيديو، وعدم إساءة استخدام سرعة التشغيل، وعدم التنقل عبر شريط التشغيل. \nلذا فإن الاستراتيجية المختارة كانت عبارة عن قوة وحشية قديمة جيدة. يبدو الأمر وكأنه اختراق أكثر من أي شيء آخر.\nماذا لدينا هنا: مجموعة من 12 كلمة بترتيب مختلط. وهذا يعطينا 12 خيارًا (عامليًا) من العبارات \n(479’001’600 على وجه التحديد). كمية كبيرة من المال تحتاج إلى معالجتها!\n\n\n## الإستراتيجية 1: غبية ومباشرة.\n\nحسنًا، اذا آخر يحتاج، فقط اذهب وانقب! ولكن ها هو الخدعة الأولى: 12! العبارات الذاكرية لم تناسب فقط \n64 جيجابايت من ذاكرة الوصول العشوائي! حصلت على خطأ SIGTERM في وحدة التحكم IDE. \nلذا قمت بإنشاء [مكرر](https://docs.python.org/3/library/itertools.html#itertools.permutations) وبدأت العملية.\nاستغرق الأمر مني بعض الوقت، لست متأكدًا على وجه التحديد، ولكن في غضون 30 ثانية، لحساب عدد التركيبات.\nتشغيل تقييمي فقط. ولكن المشكلة هي: لم تقم الكمبيوتر المحمول بتشغيل مراوحه حتى الحد الأقصى! تم تحميل نواة واحدة فقط. \n\nلقد بحثت عن حزمة Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) لتحميل كل \nالنوى المنطقية لمعالج الكمبيوتر الخاص بي (20 منها) لتوازي الحسابات. وإلا، كان سيكون رحلة أبدية. \nولكن مع ذلك كان علي أن أقسم محدد التكرار الخاص بي إلى 12 جزءًا. تعمل حزم multiprocessing itertools معًا، \nولكن عندما يكون مجموعة كاملة من الخيارات في الذاكرة. لم يكن هذا حالتي، لذا تم تنفيذ ما يلي:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nمنذ ذلك الوقت وحتى الآن سأستخدم هذه الاستراتيجية لجعل مراقبة تحميل معالج الكمبيوتر الخاص بي تبدو هكذا:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nأعتقد أن هذا قصر وقت التنفيذ إلى حوالي 5 ثوانٍ. حصلت على أفضل طريقة للتكرار من خلال \nالمجموعات ولكن كان هناك الكثير منها! الخطوة الأولى تتضمن تنفيذ حوالي 480 مليون \nعملية خارجية في الشبكة. سيحظرني العقد ببساطة لـ DDOS وحتى بدون ذلك سيستغرق الأمر إلى الأبد!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nفقط لسبب تصحيح أخطاء بدأت النص (للتواصل مع العقد استخدمت \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) حزمة) ولاحظت أن قبل الاستدعاء \nالأداء حصلت على أخطاء مثل _عبارة ذاكرية غير صالحة_. إشارة! إذا كنت أستطيع التحقق من الجمع على الأرض، \nسأوفر الكثير من الوقت! توجهت إلى تحليل GitHub \n[هذا](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nسطر الكود وأضفت التحقق من الجمع إلى النص الخاص بي. هذا قلل عدد العمليات الخارجية المحتملة إلى حوالي 39 مليون مرة واحدة!\nولكن لا يزال، 39 مليون استدعاء سيحظرني إلى الأبد، لذا كنت بحاجة إلى المزيد من البحث. كيف يمكنني تقليص بشكل كبير\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nعدد الحسابات؟ حسنًا، بقليل من خيانة استراتيجيتي الأولية. انظر، كنت سأتجنب مشاهدة الفيديو، \n“هاكر، الذي لن يحتاج حتى إلى فيديو”، لكن الرياضيات جعلتني أغير رأيي. غيّرها إلى استراتيجية أسرع 132 مرة. \nأدناه هو التفسير: \nمع ذلك، كان علي أن أعرف مواقع كلمتين صحيحتين في عبارة (سيستغرق واحدًا وقتًا طويلاً، تم التحقق منه بالتجربة).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nسأتكرر من خلال 10! مجموعات، أدخل كلمتين في المواقع الصحيحة وأحقق العبارة، \nمما يقلل من الخيارات إلى حوالي 300’000 انخفاضًا كبيرًا! أكثر من ذلك، مجموعات 10! تناسبت في ذاكرتي، ممتاز! \nأيضًا، بدلاً من محاولة نقل جميع الرموز 300 ألف مرة واستدعاء عقد عام لذلك قررت إعداد\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nعقد Robonomics المحلي الخاص بي متزامنًا مع السلسلة وطلب منه رصيد حساب النتيجة! \nالاستعلام أسهل بكثير من عملية خارجية. بعد ليلة كاملة من المزامنة (لقد وضعت حدًا للذاكرة المؤقتة بحيث) \nالاستعلام \"أسهل\" بكثير من الاستعلام الخارجي. بعد ليلة كاملة من المزامنة (لقد قمت بتعيين حد ذاكرة التخزين المؤقت حتى لا ينفجر الكمبيوتر المحمول الخاص بي ببيانات السلسلة في ذاكرة القراءة فقط الخاصة به) قمت بتجربته وكانت كارثة. معاملات الشبكة\nمشاهدة فيديو كامل. لو كنت أعرف العنوان الدقيق للحساب! ولكن لذلك أحتاج عبارة ذاكرية… **أم حقًا؟** \nانظر. تقول القواعد أن الحساب المطلوب يحتوي على **بالضبط** 42 XRT. لماذا لا أحصل على جميع العناوين النشطة في الشبكة،\n\nفرزها بوجود 42 XRT بالضبط ومقارنة كل عنوان تم إنشاؤه بقائمة الأهداف المحتملة\n(حوالي 20، تنخفض إلى 1 في النهاية). سهلة القول والقيام بها. \nالآن، بعد تعديل النص الخاص بي مرة أخرى أخيرًا وصلت إلى استعلام واحد فقط وعملية واحدة ستمنحني بالتأكيد \n\nالجائزة المرغبة. \nالآن، بعد مشاهدة 25 ثانية من الفيديو (في الوقت نفسه ملء كلمات ذاكرية)،\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nسأحتاج فقط إلى 30 ثانية كحد أقصى لسرقة الجائزة. قد نجحت. \nسأحتاج فط 30 ثانية كحد أقصى لسرقة الجائزة. تم اختراقها.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ar"}},{"node":{"title":"Gehacktes Johnny's Labor","path":"/blog/de/hacked-johnnys-lab/","date":"June 25, 2024","description":"Es gab kürzlich eine Veranstaltung „Hack Johnny's Lab“ von Robonomics und ich glaube, ich habe es irgendwie gehackt! Abgesehen vom allerersten Versuch, den ich aufgrund eines Regelmissverständnisses verloren habe, habe ich jede Runde gewonnen, an der ich teilgenommen habe, und hier ist eine kurze „Anleitung“.","content":"\nAlso, eine kurze und notwendige Zusammenfassung der Regeln: 12 Wörter in gemischter Reihenfolge, ein 5-minütiges Video von einem TurtleBot 4, der in einem Labor umherwandert\nund die Wortreihenfolge der Eselsbrücke durcheinanderbringt, 5-20 Teilnehmer, die gewinnen wollen, und ein freier Sonntag, um sich eine Strategie auszudenken.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nIch kenne mich ein wenig mit Programmierung aus und habe einen anständigen Laptop und fast keine Fähigkeiten in der Bilderkennung. Mehr als das, \nIch habe beschlossen, fair zu spielen, was bedeutet, kein Herunterladen von Videos, kein Missbrauch der Wiedergabegeschwindigkeit, keine Navigation durch die Wiedergabefortschrittsleiste. \nAlso war die gewählte Strategie ein guter alter Brute-Force. Klingt mehr nach Hacking als nach irgendetwas anderem.\nWas haben wir hier: eine Menge von 12 Wörtern in gemischter Reihenfolge. Das gibt uns 12! (faktorielle) Möglichkeiten von Phrasen\n(479'001'600 um genau zu sein). Eine ziemliche Menge zu verarbeiten!\n\n\n## Strategie 1: dumm und geradlinig.\n\nNaja, was brauche ich noch, einfach mal durchgehen und sortieren! Aber hier ist der erste Trick: 12! Merksätze passten einfach nicht rein\nmeine 64 GB RAM! Ich habe einen SIGTERM-Fehler in der IDE-Konsole erhalten. \nAlso habe ich einen [Iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) erstellt und den Prozess gestartet.\nIch habe einige Zeit gebraucht, ich weiß nicht genau, wie viel, aber es dauerte ungefähr 30 Sekunden, bis ich die Anzahl der Kombinationen berechnet hatte.\nNur ein evaluativer Lauf. Aber das Ding ist: Mein Laptop hat nicht einmal seine Lüfter auf Maximum gedreht! Ein einziger Kern war belastet. \n\nIch habe ein Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) Paket gegoogelt, um alle \nlogischen Kerne meiner CPU (20 davon) zu parallelisieren. Andernfalls wäre es eine ewige Reise gewesen. \nAber damit musste ich meinen Iterator in 12 Teile aufteilen. Die itertools multiprocessing-Pakete arbeiten zusammen, \naber wenn ein ganzes Set von Optionen im RAM ist. Das war nicht mein Fall, also wurde das Folgende durchgeführt:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nAb diesem Moment und für immer würde ich diese Strategie verwenden, um meinen CPU-Auslastungsmonitor so aussehen zu lassen:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nIch glaube, dass dies die Ausführungszeit auf etwa 5 Sekunden verkürzt hat. Ich habe den besten Weg gefunden, um durch \ndie Kombinationen zu iterieren, aber es gab einfach zu viele davon! Der erste Schritt bestand darin, ungefähr 480 Millionen \nExtrinsiken im Netzwerk durchzuführen. Der Knoten würde mich einfach für DDOS sperren und selbst ohne das würde es ewig dauern!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nNur aus Debugging-Gründen habe ich das Skript gestartet (für die Knotenkommunikation habe ich ein \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) Paket verwendet) und bemerkt, dass vor dem Aufruf \nAusführung erhielt ich Fehler wie _ungültige mnemonische Phrase_. Ein Hinweis! Wenn ich die Kombination vor Ort validieren könnte, \nIch würde Tonnen von Zeit sparen! Das GitHub-Parsing führte mich zu \n[diesem](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nCodezeile und ich habe eine Kombinationsvalidierung zu meinem Skript hinzugefügt. Dies hat die Anzahl der potenziellen Extrinsiken auf ungefähr 39'000'000 12-mal schneller reduziert!\nAber trotzdem würden mich 39 Millionen Anrufe für immer sperren, also musste ich weiter graben. Wie könnte ich die\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nAnzahl der Berechnungen signifikant reduzieren? Nun, indem ich meine ursprüngliche Strategie ein wenig verrate. Sehen Sie, ich wollte das Ansehen von Videos vermeiden, \n„Ein Hacker, der nicht einmal ein Video braucht“, aber die Mathematik hat mich umgestimmt. Ändern Sie es in eine 132-mal schnellere Strategie. \nNachfolgend die Erklärung: \nDafür musste ich nur zwei richtige Positionen von Wörtern in einem Satz kennen (eine würde zu lange dauern, experimentell validiert).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nIch würde durch 10! Kombinationen iterieren, zwei Wörter an richtigen Positionen einfügen und den Satz validieren, \nwodurch die Optionen auf etwa 300'000 reduziert wurden, eine ziemliche Abnahme! Mehr noch, 10! Kombinationen passten in meinen RAM, ausgezeichnet! \nmeinen eigenen lokalen Robonomics-Knoten mit der Kette synchronisiert und ihn nach dem Kontostand einer resultierenden Kontoadresse gefragt!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAnstatt zu versuchen, alle Token jeweils 300.000 Mal zu übertragen und dafür einen öffentlichen Knoten aufzurufen, habe ich beschlossen, Folgendes festzulegen:\nDie Abfrage ist „einfacher“ als eine Extrinsik. Nach einer ganzen Nacht des Synchronisierens (ich habe ein Cache-Limit festgelegt, damit mein \nAbfragen sind viel „einfacher“ als extrinsische Transaktionen. Nach einer ganzen Nacht des Synchronisierens (ich habe ein Cache-Limit festgelegt, damit mein Laptop nicht mit Kettendaten in seinem ROM explodiert) habe ich es versucht und … es war eine Katastrophe. Netzwerktransaktionen\ndas Ansehen eines ganzen Videos. Wenn ich nur die genaue Adresse des Kontos kennen könnte! Aber dafür brauche ich eine mnemonische Phrase… **Oder brauche ich das wirklich?** \nein ganzes Video ansehen. Wenn ich nur die genaue Adresse des Kontos wüsste! Aber dafür brauche ich eine Eselsbrücke… **Oder brauche ich das wirklich?**\n\nSchau. Die Regeln besagen, dass das gewünschte Konto **genau** 42 XRT haben soll. Warum sollte ich nicht alle aktiven Adressen im Netzwerk bekommen,\nfiltere sie nach genau 42 XRT und vergleiche jede generierte Adresse mit einer Liste möglicher Ziele \n(ungefähr 20, die am Ende auf 1 reduziert werden). Leicht gesagt und getan. \n\nJetzt, nachdem ich mein Skript noch einmal modifiziert habe, habe ich es endlich auf nur eine Abfrage und eine Transaktion gebracht, die mir sicherlich \nden gewünschten Preis geben würde.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nJetzt, nachdem ich 25 Sekunden des Videos angesehen habe (währenddessen die Wörter eines Mnemonics ausfüllend), \nbräuchte ich maximal 30 Sekunden, um die Belohnung zu stehlen. Gehackt.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"de"}},{"node":{"title":"Χακαρισμένο το εργαστήριο του Johnny","path":"/blog/el/hacked-johnnys-lab/","date":"June 25, 2024","description":"Υπήρξε πρόσφατο γεγονός “Hack Johnny’s Lab” από την Robonomics και πιστεύω ότι το χάκαρα με έναν τρόπο! Εκτός από την πρώτη προσπάθεια που έχασα λόγω παρεξήγησης των κανόνων, κέρδισα σε κάθε γύρο που συμμετείχα και εδώ είναι μια σύντομη ιστορία “πώς να”.","content":"\nΈτσι, μια γρήγορη και απαραίτητη ανακεφαλαίωση κανόνων: 12 λέξεις με μικτή σειρά, ένα βίντεο 5 λεπτών ενός TurtleBot 4 που περιπλανιέται σε ένα εργαστήριο\nκαι χαλώντας τη μνημονική σειρά λέξεων της φράσης, 5-20 συμμετέχοντες πρόθυμοι να κερδίσουν και μια δωρεάν Κυριακή για να σκεφτούν μια στρατηγική.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nΕίμαι κάπως εξοικειωμένος με την προγραμματισμό και έχω έναν αξιοπρεπή φορητό υπολογιστή και σχεδόν καθόλου δεξιότητα στην αναγνώριση εικόνας. Περισσότερο από αυτό, \nαποφάσισα να παίξω δίκαια, που σημαίει χωρίς λήψη βίντεο, χωρίς κατάχρηση ταχύτητας αναπαραγωγής, χωρίς πλοήγηση μπάρας αναπαραγωγής. \nΈτσι η επιλεγμένη στρατηγική ήταν μια καλή παλιά βία. Φαίνεται περισσότερο χάκινγκ από οτιδήποτε.\nΤι έχουμε εδώ: ένα σύνολο 12 λέξεων σε ανάμεικτη σειρά. Αυτό μας δίνει 12! (παραγοντικό) επιλογές φράσεων \n(479.001.600 για να είμαστε ακριβείς). Αρκετό ποσό για επεξεργασία!\n\n\n## Στρατηγική 1: ανόητη και απλοϊκή.\n\nΚαλά, τι λλο χρειάζομαι, απλά πήγαινε και ταξινόμησε! Αλλά εδώ είναι το πρώτο κόλπο: 12! μνημονικές φράσεις απλά δεν χωρούσαν \nστα 64 GB RAM μου! Πήρα ένα σφάλμα SIGTERM στην κονσόλα του IDE. \nΔημιούργησα λοιπόν έναν [iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) και ξεκίνησα τη διαδικασία.\nΜου πήρε λίγο χρόνο, δεν είμαι σίγουρος ακριβώς πόσο, αλλά μέσα σε 30 δευτερόλεπτα, για να υπολογίσω τον αριθμό των συνδυασμών.\nΑπλά μια αξιολογική εκτέλεση. Αλλά το θέμα είναι: το laptop μου ακόμα δεν είχε αναπτύξει τους ανεμιστήρες του στο μέγιστο! Φορτώθηκε μόνο ένας πυρήνας. \n\nΈκανα αναζήτηση στο Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) πακέτο για να φορτώσω όλους \nτους λογικούς πυρήνες της CPU μου (20 από αυτούς) για παράλληλους υπολογισμούς. Διαφορετικά, θα ήταν ένα αιώνιο ταξίδι. \nΑλλά με αυτό έπρεπε να χωρίσω τον επαναληπτή μου σε 12 μέρη. Τα πακέτα multiprocessing του itertools λειτουργούν μαζί, \nαλλά όταν ένα ολόκληρο σύνολο επιλογών βρίσκεται στη RAM. Αυτό δεν ήταν η περίπτωσή μου, οπότε πραγματοποιήηκε το ακόλουθο:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nΑπό εκείνη τη στιγμή και μετά θα χρησιμοποιούσα αυτή τη στρατηγική για να κάνω τον φορτίο της CPU μου να μοιάζει με αυτόν τον τρόπο:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nΠιστεύω ότι αυτό μείωσε τον χρόνο εκτέλεσης σε περίπου 5 δευτερόλεπτα. Βρήκα τον καλύτερο τρόπο για να επαναλαμβάνω \nτις συνδυασμούς αλλά υπήρχαν απλά πάρα πολλοί! Το πρώτο βήμα περιλάμβανε την εκτέλεση περίπου 480 εκατομμυρίων \nεξωτερικών στο δίκτυο. Ο κόμβος απλά θα με απαγορεύσει για DDOS και ακόμη και χωρίς αυτό θα πήρε αιώνες!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nΑπλά για λόγους εντοπισμού σφαλμάτων ξεκίνησα το σενάριο (για επικοινωνία με τον κόμβο χρησιμοποίησα ένα \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) πακέτο) και παρατήρησα ότι πριν από την κλήση \nεκτέλεσης πήρα σφάλματα όπως _μη έγκυρη φράση μνημονικού_. Ένα ίχνος! Αν μπορούσα να επικυρώσω τον συνδυασμό στον υπολογιστή μου, \nθα έσωζα πολύ χρόνο! Η ανάλυση του GitHub με οδήγησε σε \n[αυτό](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nκομμάτι κώδικα και πρόσθεσα μια επικύρωση συνδυασμού στο σενάριό μου. Αυτό μείωσε τον αριθμό των πιθανών εξωτερικών\nσε περίπου 39.000.000 12 φορές ταχύτερα!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nΑλλά ακόμη, 39 εκατομύρια κλήσεις θα με απαγορεύσουν για πάντα, οπότε χρειάστηκε να ψάξω περισσότερο. Πώς θα μπορούσα \nνα μειώσω σημαντικά τον αριθμό των υπολογισμών; Καλά, με λίγη προδοσία της αρχικής μου στρατηγικής. Δείτε, είχα σκοπό να αποφύγω την παρακολούθηση βίντεο, \n“ένας χάκερ, που δεν θα χρειαστεί ούτε ένα βίντεο”, αλλά η μαθηματική με έκανε να αλλάξω γνώμη. Να την αλλάξω σε μια στρατηγική 132 φορές ταχύτερη. \nΠαρακάτω είναι η εξήγηση:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nΜε αυτό χρειαζόμουν μόνο να γνωρίζω δύο σωστές θέσεις λέξεων σε μια φράση (μία θα πάρει πολύ χρόνο, επιβεβαιωμένο από πείρα). \nΘα επαναλάμβανα μέσα από έναν συνδυασμό 10!, εισήγαγα δύο λέξεις στις σωστές θέσεις και επικύρωνα τη φράση, \nμειώνοντας τις επιλογές σε περίπου 300.000, μια σημαντική μείωση! Επιπλέον, οι συνδυασμοί 10! χωρούσαν στη RAM μου, εξαιρετικό!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nΕπίσης, αντί να προσπαθήσω να μεταφέρω όλα τα tokens κάθε 300k φορές και να καλώ ένα δημόσιο κόμβο γι' αυτό, αποφάσισα να ρυθμίσω \nτον δικό μου τοπικό κόμβο Robonomics συγχρονισμένο με την αλυσίδα και να του ζητήσω το υπόλοιπο λογαριασμού λογαριασμού! \nΤο ερώτημα είναι πολύ πιο «εύκολο» από ένα εξωτερικό. Μετά από μια ολόκληρη νύχτα συγχρονισμού (έχω βάλει ένα όριο προσωρινής μνήμης, έτσι ώστε η μου\nΟ φορητός υπολογιστής δεν θα εκραγεί με δεδομένα αλυσίδας στη ROM του) Το δοκίμασα και... αυτό ήταν μια καταστροφή. Συναλλαγές δικτύου\n(ακόμη και μέσα σε ένα τοπικό υπολογιστή) πήραν πολύ χρόνο. Δεν περίμενα ούτε μέχρι το τέλος, ήταν προφανώς πολύ πιο αργό από \nτο να παρακολουθήσω ένα ολόκληρο βίντεο. Αν μόνο μπορούσα να γνωρίζω την ακριβή διεύθυνση του λογαριασμού! Αλλά γι' αυτό χρειάζομαι μια φράση μνημονικού… **Ή μήπως όχι πραγματικά;**\n\nΔείτε. Οι κανόνες λένε ότι ο επιθυμητός λογαριασμός έχει **ακριβώς** 42 XRT. Γιατί δεν θ πάρω όλες τις ενεργές διευθύνσεις στο δίκτυο,\nθα τις φιλτράρω έχοντας ακριβώς 42 XRT και θα συγκρίνω κάθε δημιουργημένη διεύθυνση με μια λίστα πιθανών στόχων \n(περίπου 20, μειώνοντας σε 1 στο τέλος). Εύκολο να πεις και να κάνεις. \n\nΤώρα, μετά την τροποποίηση του σεναρίου μου ακόμη μια φορά, τελικά τα κατάφερα με μόνο μια ερώτηση και μια συναλλαγή που θα μου \nδώσει σίγουρα το επιθυμητό βραβείο.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nΤώρα, μετά από την παρακολούθηση 25 δευτερολέπτων του βίντεο (ταυτόχρονα συμπληρώνοντας τις λέξεις ενός μνημονικού), \nθα χρειαζόμουν μόνο 30 δευτερόλεπτα ως μέγιστο για να κλέψω το έπαθλο. Το κατάφερα.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"el"}},{"node":{"title":"Laboratoire de Johnny piraté","path":"/blog/fr/hacked-johnnys-lab/","date":"June 25, 2024","description":"Il y a eu récemment un événement «Hack Johnny's Lab» par Robonomics et je crois l'avoir piraté d'une certaine manière! Mis à part la toute première tentative que j'ai perdue en raison d'une incompréhension des règles, j'ai gagné chaque tour auquel j'ai participé et voici une courte histoire «comment faire».","content":"\nAlors, un petit récapitulatif rapide et nécessaire des règles : 12 mots dans un ordre mixte, une vidéo de 5 minutes d'un TurtleBot 4 se promenant dans un laboratoire\net gâchant l'ordre des mots de la phrase mnémotechnique, 5 à 20 participants prêts à gagner et un dimanche libre pour réfléchir à une stratégie.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nJe suis plutôt familier avec la programmation et j'ai un ordinateur portable décent et presque aucune compétence en reconnaissance d'image. De plus, \nJ'ai décidé de jouer équitablement, ce qui signifie pas de téléchargement vidéo, pas d'abus de vitesse de lecture, pas de navigation dans la barre de lecture. \nDonc la stratégie choisie était une bonne vieille force brute. Ça sonne plus comme du piratage que tout autre chose.\nQu'avons-nous ici : un ensemble de 12 mots dans un ordre mixte. Cela nous donne 12 options (factorielles) de phrases\n(479'001'600 pour être précis). Une quantité assez importante à traiter!\n\n\n## Stratégie 1: bête et directe.\n\nEh bien, de quoi d'autre ai-je besoin, juste d'aller faire le tri ! Mais voici la première astuce : 12 ! les phrases mnémoniques ne rentraient tout simplement pas dans\nmes 64 Go de RAM ! J'ai eu une erreur SIGTERM dans la console de l'IDE.\nJ'ai donc créé un [itérateur](https://docs.python.org/3/library/itertools.html#itertools.permutations) et j'ai commencé le processus.\nIl m'a fallu un certain temps, je ne sais pas exactement combien, mais dans les 30 secondes, pour calculer le nombre de combinaisons.\nJuste une exécution évaluative. Mais le problème est le suivant: mon ordinateur portable n'a même pas fait tourner ses ventilateurs au maximum! Un seul cœur était chargé. \n\nJ'ai googlé un package Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) pour charger tous \nles cœurs logiques de mon CPU (20 d'entre eux) pour paralléliser les calculs. Sinon, cela aurait été un voyage éternel. \nMais avec cela, j'ai dû diviser mon itérateur en 12 parties. Les packages de multiprocessing itertools fonctionnent ensemble, \nmais quand un ensemble complet d'options est dans la RAM. Ce n'était pas mon cas, donc ce qui suit a été effectué:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nÀ partir de ce moment et pour toujours, j'utiliserais cette stratégie pour que mon moniteur de charge CPU ressemble à ceci:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nJe crois que cela a raccourci le temps d'exécution à environ 5 secondes. J'ai trouvé le meilleur moyen d'itérer à travers \nles combinaisons mais il y en avait juste trop! La première étape consistait à effectuer environ 480 millions \nextrinsèques dans le réseau. Le nœud me bannirait simplement pour DDOS et même sans cela, cela prendrait une éternité!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nJuste pour une raison de débogage, j'ai lancé le script (pour la communication avec le nœud j'ai utilisé un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) package) et j'ai remarqué qu'avant d'appeler \nj'ai obtenu des erreurs comme _phrase mnémonique invalide_. Un indice! Si je pouvais valider la combinaison sur place, \nje gagnerais des tonnes de temps! L'analyse de GitHub m'a conduit à \n[ceci](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nligne de code et j'ai ajouté une validation de combinaison à mon script. Cela a réduit le nombre d'extrinsèques potentiels à environ 39'000'000 12 fois plus vite!\nMais encore, 39 millions d'appels me banniraient pour toujours, donc j'avais besoin de creuser davantage. Comment pourrais-je réduire considérablement le\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnombre de calculs? Eh bien, en trahissant un peu ma stratégie initiale. Voyez-vous, j'allais éviter de regarder des vidéos, \n«un pirate informatique, qui n'aura même pas besoin d'une vidéo», mais les mathématiques m'ont fait changer d'avis. Changer pour une stratégie 132 fois plus rapide. \nCi-dessous est l'explication: \nAvec cela, je devais seulement connaître deux positions correctes de mots dans une phrase (une prendrait trop de temps, validée par l'expérience).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nJe parcourrais 10! combinaisons, insérerais deux mots aux bonnes positions et validerais la phrase, \nréduisant les options à environ 300'000 une assez grande diminution! De plus, l'ensemble de combinaisons 10! s'adaptait à ma RAM, excellent! \nmon propre nœud Robonomics local synchronisé avec la chaîne et lui demander un solde de compte résultant!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nDe plus, plutôt que d'essayer de transférer tous les jetons toutes les 300 000 fois et d'appeler un nœud public pour cela, j'ai décidé de définir\nLa requête est bien plus «facile» qu'une extrinsèque. Après une nuit entière de synchronisation (j'ai défini une limite de cache pour que mon \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (J'ai défini une limite de cache pour que mon\nordinateur portable n'explose pas avec des données en chaîne dans sa ROM) J'ai essayé et... c'était un désastre. Transactions réseau\nregarder une vidéo entière. Si seulement je pouvais connaître l'adresse exacte du compte! Mais pour cela j'ai besoin d'une phrase mnémonique... **Ou en ai-je vraiment besoin?** \nje regarde une vidéo entière. Si seulement je pouvais connaître l'adresse exacte du compte ! Mais pour cela, il me faut une phrase mnémotechnique… **Ou est-ce vraiment le cas ?**\n\nRegardez. Les rgles disent que le compte désiré a **exactement** 42 XRT. Pourquoi ne pas obtenir toutes les adresses actives dans le réseau,\nles filtrer en ayant exactement 42 XRT et comparer chaque adresse générée avec une liste de cibles possibles \n(environ 20, diminuant à 1 à la fin). Facile à dire et à faire. \n\nMaintenant, après avoir modifié mon script une fois de plus, j'ai enfin réussi à n'avoir qu'une seule requête et une seule transaction qui me permettrait à coup sûr \nd'obtenir le prix désiré.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nMaintenant, après avoir regardé 25 secondes de la vidéo (tout en remplissant les mots d'un mnémonique), \nil ne me faudrait que 30 secondes maximum pour voler la récompense. Piraté.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"fr"}},{"node":{"title":"Laboratorio de Johnny hackeado","path":"/blog/es/hacked-johnnys-lab/","date":"June 25, 2024","description":"Hubo un evento reciente “Hack Johnny’s Lab” por Robonomics y creo que lo hackeé de alguna manera! Aparte del primer intento que perdí debido a un malentendido de las reglas, gané cada ronda en la que participé y aquí hay una breve historia de “cómo hacerlo”.","content":"\nEntonces, un rápido y necesario resumen de las reglas: 12 palabras en un orden mixto, un video de 5 minutos de un TurtleBot 4 deambulando por un laboratorio\ny arruinando el orden de palabras de la frase mnemotécnica, entre 5 y 20 participantes dispuestos a ganar y un domingo libre para pensar en una estrategia.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nSoy algo familiarizado con la programación y tengo una computadora portátil decente y casi ninguna habilidad en reconocimiento de imágenes. Más que eso, \nDecidí jugar limpio, lo que significa no descargar videos, no abusar de la velocidad de reproducción, no navegar por la barra de reproducción. \nAsí que la estrategia elegida fue un buen viejo ataque de fuerza bruta. Suena más a hackeo que a cualquier otra cosa.\n¿Qué tenemos aquí? Un conjunto de 12 palabras en orden mixto. Esto nos da 12 opciones (factoriales) de frases\n(479’001’600 para ser precisos). ¡Una cantidad bastante grande para procesar!\n\n\n## Estrategia 1: tonta y directa.\n\nBueno, ¿qué más necesito? ¡Simplemente vaya y ordene! Pero aquí está el primer truco: ¡12! Las frases mnemotécnicas simplemente no encajaban\n¡Mis 64 GB de RAM! Recibí un error SIGTERM en la consola del IDE. \nEntonces creé un [iterador](https://docs.python.org/3/library/itertools.html#itertools.permutations) y comencé el proceso. Me llevó un tiempo, no estoy seguro exactamente de cuánto, pero unos 30 segundos, calcular la cantidad de combinaciones.\nSolo una ejecución de evaluación. ¡Pero la cosa es que mi computadora portátil ni siquiera hizo girar sus ventiladores al máximo! Un solo núcleo estaba cargado. \n\nBusqué un paquete de Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) para cargar todos \nlos núcleos lógicos de mi CPU (20 de ellos) para paralelizar los cálculos. De lo contrario, habría sido un viaje eterno. \nPero con eso tuve que dividir mi iterador en 12 partes. Los paquetes de multiprocessing de itertools funcionan juntos, \npero cuando un conjunto completo de opciones está en la RAM. Ese no era mi caso, así que se realizó lo siguiente:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nA partir de ese momento y siempre usaría esta estrategia para que mi monitor de carga de la CPU se viera así:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nCreo que esto acortó el tiempo de ejecución a alrededor de 5 segundos. Encontré la mejor manera de iterar a través \nde las combinaciones ¡pero había demasiadas! El primer paso implicaba realizar aproximadamente 480 millones \nextrínsecos en la red. ¡El nodo simplemente me prohibiría por DDOS e incluso sin eso tomaría una eternidad!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nSolo por una razón de depuración, comencé el script (para la comunicación del nodo usé un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) paquete) y noté que antes de llamar \nrealizando obtuve errores como _frase mnemotécnica inválida_. ¡Una pista! Si pudiera validar la combinación en prem, \n¡ahorraría toneladas de tiempo! El análisis de GitHub me llevó a \n[esto](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nlínea de código y agregué una validación de combinación a mi script. ¡Esto redujo el número de extrínsecos potenciales a aproximadamente 39’000’000 12 veces más rápido!\nPero aún así, 39 millones de llamadas me prohibirían para siempre, así que necesitaba investigar más. ¿Cómo podría reducir significativamente el\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnúmero de cálculos? Bueno, traicionando un poco mi estrategia inicial. Verás, iba a evitar ver videos, \n“un hacker, que ni siquiera necesitará un video”, pero las matemáticas me hicieron cambiar de opinión. Cambiarlo a una estrategia 132 veces más rápida. \nA continuación se explica: \nCon eso solo necesitaba saber dos posiciones correctas de palabras en una frase (una tomaría demasiado tiempo, validada experimentalmente).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nIteraría a través de 10! combinaciones, insertaría dos palabras en posiciones correctas y validar la frase, \nrecortando las opciones a aproximadamente 300’000 ¡una disminución considerable! ¡Más que eso, el conjunto de combinaciones 10! encajaba en mi RAM, excelente! \nmi propio nodo Robonomics local sincronizado con la cadena y preguntarle por el saldo de una cuenta resultante!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAdemás, en lugar de intentar transferir todos los tokens cada 300k veces y llamar a un nodo público para eso, decidí configurar\nLa consulta es mucho “más fácil” que un extrínseco. Después de toda una noche de sincronización (establecí un límite de caché para que mi \nLa consulta es mucho más \"fácil\" que una extrínseca. Después de una noche entera de sincronización (he establecido un límite de caché para que mi\ncomputadora portátil no explote con datos de la cadena en su ROM), lo intenté y... fue un desastre. Transacciones de red\nver un video completo. ¡Si tan solo pudiera saber la dirección exacta de la cuenta! Pero para eso necesito una frase mnemotécnica… **¿O realmente la necesito?** \nviendo un video completo. ¡Ojalá pudiera saber la dirección exacta de la cuenta! Pero para eso necesito una frase mnemotécnica... **¿O realmente no?**\n\nMira. Las reglas dicen que la cuenta deseada tiene **exactamente** 42 XRT. ¿Por qué no obtendría todas las direcciones activas en la red,\nfiltrarlas teniendo exactamente 42 XRT y comparar cada dirección generada con una lista de posibles objetivos \n(alrededor de 20, disminuyendo a 1 al final). Fácil de decir y de hacer. \n\nAhora, después de modificar mi script una vez más finalmente lo logré con solo una consulta y una transacción que seguramente \nme daría el premio deseado.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nAhora, después de ver 25 segundos del video (mientras llenaba las palabras de un mnemónico), \nsolo necesitaría 30 segundos como máximo para robar la recompensa. Hackeado.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"es"}},{"node":{"title":"Laboratorio di Johnny violato","path":"/blog/it/hacked-johnnys-lab/","date":"June 25, 2024","description":"C'è stato di recente un evento “Hack Johnny’s Lab” di Robonomics e credo di averlo hackerato in un certo modo! A parte il primo tentativo che ho perso a causa di un fraintendimento delle regole, ho vinto ogni round a cui ho partecipato e qui c'è una breve storia su come ho fatto.","content":"\nQuindi, un breve e necessario riassunto delle regole: 12 parole in un ordine misto, un video di 5 minuti di un TurtleBot 4 che vaga per un laboratorio e rovina l'ordine delle parole della frase mnemonica, 5-20 partecipanti disposti a vincere e una domenica libera per escogitare una strategia.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nSono abbastanza familiare con la programmazione e ho un laptop decente e quasi nessuna competenza nel riconoscimento delle immagini. Oltre a ciò, \nho deciso di giocare in modo leale, il che significa nessun download di video, nessun abuso di velocità di riproduzione, nessuna navigazione nella barra di riproduzione. \nQuindi la strategia scelta è stata una vecchia e buona forza bruta. Suona più come hacking che altro.\nCosa abbiamo qui: un set di 12 parole in un ordine misto. Questo ci dà 12! (fattoriale) opzioni di frasi\n(479’001’600 per essere precisi). Una quantità piuttosto consistente da elaborare!\n\n\n## Strategia 1: stupida e diretta.\n\nBene, cos'altro mi serve, basta andare e fare ordine! Ma ecco il primo trucco: 12! Le frasi mnemoniche non ci stavano proprio\ni miei 64 GB di RAM! Ho ricevuto un errore SIGTERM nella console dell'IDE. \nQuindi ho creato un [iteratore](https://docs.python.org/3/library/itertools.html#itertools.permutations) e ho iniziato il processo.\nMi ci è voluto un po' di tempo, non so esattamente quanto, ma entro 30 secondi, per calcolare il numero di combinazioni.\nSolo una corsa valutativa. Ma la cosa è: il mio laptop non ha nemmeno fatto girare i suoi ventilatori al massimo! Un singolo core era caricato. \n\nHo cercato un pacchetto Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) per caricare tutti \ni core logici della mia CPU (20 di essi) per parallelizzare i calcoli. Altrimenti, sarebbe stato un viaggio eterno. \nMa con questo ho dovuto dividere il mio iteratore in 12 parti. I pacchetti di multiprocessing di itertools funzionano insieme, \nma quando un intero set di opzioni è nella RAM. Questo non era il mio caso, quindi è stato eseguito quanto segue:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nDa quel momento in poi avrei usato questa strategia per far apparire il monitor del carico della CPU in questo modo:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nCredo che questo abbia ridotto il tempo di esecuzione a circa 5 secondi. Ho trovato il modo migliore per iterare attraverso \nle combinazioni ma ce n'erano semplicemente troppe! Il primo passo consisteva nell'eseguire circa 480 milioni \nesterni nella rete. Il nodo mi avrebbe semplicemente bandito per DDOS e anche senza quello ci vorrebbe per sempre!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nSolo per motivi di debug ho avviato lo script (per la comunicazione con il nodo ho usato un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) pacchetto) e ho notato che prima di chiamare \neseguire ho ottenuto errori come _frase mnemonica non valida_. Un indizio! Se potessi convalidare la combinazione in premessa, \nrisparmierei un sacco di tempo! Il parsing di GitHub mi ha portato a \n[questo](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nriga di codice e ho aggiunto una convalida della combinazione al mio script. Questo ha ridotto il numero di esterni potenziali a circa 39’000’000 12 volte più veloce!\nMa ancora, 39 milioni di chiamate mi bandirebbero per sempre, quindi ho dovuto scavare di più. Come potevo tagliare significativamente il\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnumero di calcoli? Beh, tradendo un po' la mia strategia iniziale. Vedi, stavo per evitare di guardare video, \n“un hacker, che nemmeno avrà bisogno di un video”, ma la matematica mi ha fatto cambiare idea. Cambiarla in una strategia 132 volte più veloce. \nDi seguito è spiegato: \nCon questo dovevo solo conoscere due posizioni corrette delle parole in una frase (una richiederebbe troppo tempo, sperimento convalidato).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nAvrei iterato attraverso un 10! combinazioni, inserito due parole nelle posizioni corrette e convalidato la frase, \nriducendo le opzioni a circa 300’000 una notevole diminuzione! Inoltre, il set di combinazioni 10! si adattava alla mia RAM, eccellente! \nil mio nodo Robonomics locale sincronizzato con la catena e chiedergli il saldo di un account risultante!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nInoltre, invece di provare a trasferire tutti i token ogni 300k volte e chiamare un nodo pubblico per questo, ho deciso di impostare il mio nodo Robonomics locale sincronizzato con la catena e chiedergli un saldo dell'indirizzo del conto risultante! La query è molto più \"facile\" di un'estrinseca. Dopo un'intera notte di sincronizzazione (ho impostato un limite di cache in modo che il mio laptop non esplodesse con i dati della catena nella sua ROM), ci ho provato e... è stato un disastro. Le transazioni di rete (anche all'interno di un localhost) hanno richiesto troppo tempo. Non ho nemmeno aspettato fino alla fine, era ovviamente molto più lento che guardare un intero video. Se solo potessi conoscere l'indirizzo esatto del conto! Ma per quello ho bisogno di una frase mnemonica... **O forse sì?**\n\nGuarda. Le regole dicono che l'account desiderato ha **esattamente** 42 XRT. Perché non dovrei ottenere tutti gli indirizzi attivi nella rete,\nfiltrarli avendo esattamente 42 XRT e confrontare ciascun indirizzo generato con un elenco di possibili obiettivi \n(circa 20, diminuendo a 1 alla fine). Facile da dire e da fare. \n\nOra, dopo aver modificato di nuovo il mio script, sono finalmente riuscito a fare solo una query e una transazione che sicuramente \nmi darebbe il premio desiderato.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nOra, dopo aver guardato 25 secondi del video (nel frattempo compilando le parole di un mnemonico), \navrei bisogno solo di 30 secondi al massimo per rubare la ricompensa. Hacked it.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"it"}},{"node":{"title":"ハッキン�されたジョニーの研究室","path":"/blog/ja/hacked-johnnys-lab/","date":"June 25, 2024","description":"最近、Robonomicsによるイベント「Hack Johnny's Lab」があり、私はある意味でそれをハックしたと思います！最初の試みはルールの誤解により失敗しましたが、参加したすべてのラウンドで勝利し、ここに短い「ハウツー」ストーリーがあります。","content":"\nでは、ルールを簡単にまとめると、12 個の単語が混在した順序で並べられ、TurtleBot 4 がラボ内を歩き回り、記憶術のフレーズの語順を台無しにする 5 分間のビデオ、勝利を目指す 5 ～ 20 人の参加者、戦略を考えるための自由な日曜日です。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n私はプログラミングにはある程度慣れており、まあまあのラップトップを持っていますが、画像認識のスキルはほとんどありません。それ以上に、 \nビデオのダウンロードや再生速度の乱用、プレイバーのナビゲーションなどは一切行わないと決めました。 \n選択した戦略は古典的なブルートフォースでした。それは何よりもハッキングらしいです。\nここに何あるのか：順不同の12語のセット。これにより、12！（階乗）のフレーズのオプションが得られます \n（正確に479'001'600）。処理するにはかなりの量です！\n\n\n## 戦略1：愚かで率直なもの。\n\nさて、他に何が必要か、ただ行って整理するだけです！しかし、最初のトリックがここにあります：12！ニーモニックフレーズはうまく収まりませんでした \n私の64GB RAM！IDEコンソールSIGTERMエラーが発生しました。 \nそこで、[イテレータ](https://docs.python.org/3/library/itertools.html#itertools.permutations) を作成し、プロセスを開始しました。\n組み合わせの数を計算するのに、正確な時間はわかりませんが、30 秒以内で時間がかかりました。\n評価用の実行です。しかし問題は、私のラップトップはさえぎりファンを最大速度で回転させることさえありませんでした！1つのコアが負荷をかけられました。 \n\n私はすべての論理コア（20個）を並列計算するためにPythonの[multiprocessing](https://docs.python.org/3/library/multiprocessing.html)パッケージを調べました。そうしないと、永遠の旅になってしまいます。 \nしかし、そのためにはイテレータを12つに分割する必要がありました。itertools multiprocessingパッケージは一緒に動作しますが、 \nオプションのセット全体がRAMにある場合です。それは私の場合ではなかったので、次のように行いました。 \nその時点から、私は常にこの戦略を使って、CPUの負荷モニターをこのように見せるようにしました。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nこれにより、実行時間が約5秒に短縮されたと思います。組み合わせを繰り返す最良の方法を得ましたが、それらがあまりにも多すぎました！最初のステップは、おおよそ480百万の\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nネットワーク内の外部入力を実行することでした。ノードは私をDDOSのために単純に禁止し、それさえなくても永遠にかかってしまいます！ \nデバッグのために、スクリプトを開始しました（ノードとの通信には \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/)パッケージを使用しました）\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nそして、呼び出しを行う前に、_無効なニーモニックフレーズ_のようなエラーが発生したことに気づきました。手がかり！プレミアムで組み合わせを検証できれば、 \n多くの時間を節約できると思いました！GitHubの解析により、私は \n[これ](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nコード行にたどり着き、スクリプトに組み合わせの検証を追加しました。これにより、潜在的な外部入力の数がおおよそ39'000'000倍速く減少しました！ \nしかし、それでも、3900万回の呼び出しは永遠に私を禁止するでしょう。だから、もっと掘り下げる必要がありました。どうやって計算の数を大幅に削減できるでしょうか？ \n少し初期の戦略を裏切ることで、それを実現できます。ビデオの視聴を避けるつもりでしたが、\n「ビデオを必要としないハッカー」という考えを変えさせたの�数学でした。132倍速い戦略に変更しました。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n以下に説明します。 \nそれにより、フレーズ内の単語の2つの正しい位置だけを知る必要がありました（1つだけだと時間がかかりすぎることが実験で確認されました）。 \n10！の組み合わせを繰り返し、2つの単語を正しい位置に挿入し、フレーズを検証し、 \nオプションを約300'000に削減しました。さらに、10！の組み合わせセットは私のRAMに収まりました、素晴らしい！\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n自分のローカルRobonomicsノードをチェーンと同期させ、その結果のアカウントアドレス残高を尋ねました！ \nクエリは外部入力よりも「簡単」です。同期化を一晩中行った後（ROM内のチェーンデータでラップトップが爆発しないようにキャッシュ制限を設定しました）、試してみましたが...これは災難でした。ネットワークトランザクション \n（localhost内でも）時間がかかりすぎました。最後まで待つこともなく、明らかにビデオ全体を見るよりも遅かったです。アカウントの正確なアドレスを知ることができればいいのですが！しかし、そのためにはニーモニックフレーズが必要です... **本当に必要なのでしょうか？**\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nまた、すべてのトークンを300k回転送し、それに対して公開ノードを呼び出す代わりに、私は設定することに決めました \n自分自身のローカルRobonomicsノードをチェーンと同期させ、その結果のアカウントアドレス残高を尋ねます！ \nクエリは、外部のものよりはるかに「簡単」です。一晩中同期した後（ラップトップが ROM 内のチェーン データでクラッシュしないようにキャッシュ制限を設定しました）、試してみましたが、これは大失敗でした。ネットワーク トランザクション\n（ローカル�スト内でも）時間がかかりすぎました。最後まで待つこともなく、明らかにビデオ全体を見るよりも遅かったです \nアカウントの正確なアドレスを知ることができればいいのに！でもそのためにはニーモニックフレーズが必要です... **本当に必要なのか？**\n\n見て。ルーによると、望ましいアカウントには**正確に**42 XRTが必要です。なぜなら、ネットワーク内のすべてのアクティブなアドレスを取得し、\n正確に42 XRTを持つものをフィルタリングし、生成された各アドレスを可能なターゲットのリストと比較します \n(約20、最後に1に減少)。言うのは簡単ですが、やるのは簡単です。 \n\nさて、スクリプトをもう一度修正した後、確実に望ましい賞品を手に入れることができる \n1つのクエリと1つのトランザクションになりました。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nさて、ビデオを25秒間見た後（その間にニーモニックの単語を入力している）、 \n報酬を盗むのに最大30秒しかかからないでしょう。ハッキングしました。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ja"}},{"node":{"title":"해킹된 니의 연구소","path":"/blog/ko/hacked-johnnys-lab/","date":"June 25, 2024","description":"최근 Robonomics가 주최한 이벤트 '해킹된 쟈니의 연구소'가 있었고, 제가 어떤 방식으로 해킹했다고 믿습니다! 규칙 오해로 첫 번째 시도에서 실패한 것을 제외하고, 참가한 모든 라운드에서 이겼고 여기에 간단한 '어떻게' 이야기가 있습니다.","content":"\n그럼, 빠르고 필요한 규칙 요약: 혼합된 순서로 된 12개 단어, 실험실을 돌아다니는 TurtleBot 4의 5분 분량의 비디오\n그리고 기억술어구 단어 순서를 망가뜨리고, 이기고자 하는 5~20명의 참가자, 그리고 전략을 생각해낼 수 있는 무료 일요일.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n프로그래밍에 어느 정도 익숙하고 괜찮은 노트북이 있지만 이미지 인식 기술은 거의 없습니다. 그 이상으로 \n나는 공정하게 게임을 하기로 결정했다. 즉, 비디오 다운로드 없이, 재생 속도 남용 없이, 플레이바 네비게이션 없이. \n그래서 선택한 전략은 오래된 브루트포스였다. 무언가를 해킹하는 것보다 더 그럴싸하게 들린다.\n여기에 무엇이 있는가: 섞인 순서의 12개의 단어 세트. 이것은 우리에게 12! (계승) 옵션의 구문을 제공한다. \n(정확히 479,001,600). 처리해야 할 양이 상당하다!\n\n\n## 전략 1: 어�석고 직접적인 것.\n\n음, 무엇이 더 필요한가, 그냥 가서 정리하면 된다! 그러나 여기 첫 번째 속임수가 있다: 12! 기억구문은 내 64GB RAM에 맞지 않았다! IDE 콘솔에서 SIGTERM 오류가 발생했다. \n평가용 실행. 그러나 문제는: 내 노트북은 심지어 최대 속도로 팬을 돌리지 않았다! 단일 코어만 로드되었다. \n그래서 저는 [반복자](https://docs.python.org/3/library/itertools.html#itertools.permutations)를 생성하고 프로세스를 시작했습니다.\n정확히 얼마나 걸렸는지는 모르겠지만, 조합 수를 계산하는 데 30초 안에 걸렸습니다.\n나는 내 CPU의 모든 논리 코어(20개)를 병렬로 계산하기 위해 Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) 패키지를 구글링했다. \n\n그렇지 않으면 영원한 여행이었을 것이다. \n그러나 그것으로 인해 내 이터레이터를 12개의 부분으로 나눠야 했다. itertools multiprocessing 패키지는 함께 작동하지만, \n전체 옵션이 RAM에 있는 경우. 그것은 내 경우가 아니었으므로 다음이 수행되었다: \n그 순간부터 항상 이 전략을 사용하여 내 CPU 로드 모니터가 다음과 같이 보이도록 만들었다:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\n나는 실행 시간을 약 5초로 단축했다고 믿는다. 조합을 반복하는 가장 좋은 방법을 얻었지만 그것들이 너무 많았다! 첫 번째 단계는 대략 480만 개의\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\n네트워크에서 extrinsics를 수행하는 것이었다. 노드는 단순히 DDOS로 나를 금지시킬 이고 그렇지 않아도 영원히 걸릴 것이다! \n디버깅 목적으로 스크립트를 시작했고 (노드 통신에는 \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) 패키지를 사용했음) 호출 전에\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\n_유효하지 않은 기억구문_과 같은 오류가 발생했다. 단서! 사전에 조합을 유효성 검사할 수 있다면, \n시간을 많이 절약할 수 있을 것이다! GitHub 파싱을 통해 나는 \n[이](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \n코드 라인을 찾았고 내 스크립트에 조합 유효성 검사를 추가했다. 이로써 잠재적인 extrinsics의 수를 대략 39,000,000으로 줄였다! \n그러나 여전히 39백만 개의 호출은 나를 영원히 금지시킬 것이므로 더 많은 탐구가 필요했다. 어떻게 하면 \n계산량을 크게 줄일 수 있을까? 음, 초기 전략을 조금 배신하는 것으로. 보시다시피, 비디오 시청을 피하려고 했지만,\n수학이 나의 생각을 바꾸게 만들었다. 132배 빠른 전략으로 바꾸었다.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n아래는 설명이다: \n그렇게 하면 구문의 두 올바른 위치만 알면 된다 (하나는 너무 오래 걸릴 것이라 실험으로 검증됨). \n10! 조합을 반복하고 올바른 위치에 두 단어를 삽입하고 구문을 유효성 검사하여 \n옵션을 대략 300,000으로 줄였다! 더불어, 10! 조합 세트가 내 RAM에 맞았다, 훌륭하다!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n또한 300k번씩 모든 토큰을 전송하려고 하지 않고 공개 노드를 호출하기 위해 \n로보노믹스 노드를 설정하고 동기화된 결과 계정 주소 잔액을 요청하기로 결정했다! \n쿼리는 extrinsic보다 '쉽다'. 전체 밤을 동기화하는 동안 (내가 설정한 캐시 한도로)\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\n또한, 모든 토큰을 300k번 전송하고 이를 위해 퍼블릭 노드를 호출하는 것보다, 저는 체인과 동기화된 제 로컬 Robonomics 노드를 설정하고 결과 계정 주소 잔액을 요청하기로 했습니다!\n쿼리는 외부 쿼리보다 훨씬 \"쉬웠습니다\". 밤새도록 동기화한 후(저는 캐시 한도를 설정하여 ROM에 체인 데이터가 있는 노트북이 폭발하지 않도록 했습니다) 시도해 보았는데.. 재앙이었습니다. 네트워크 거래\n(심지어 로컬호스트 내에서도) 너무 많은 시간이 걸렸어요. 끝까지 기다리지도 않았어요, 분명히 영상보는 것보다 훨씬 느렸어요 \n계정의 정확한 주소를 알 수만 있다면 좋을텐데! 하지만 그걸 위해서는 니모닉 구절이 필요하죠... **정말 그럴까요?**\n\n보세요. 규칙에 따르면 원하는 계정은 **정확히** 42 XRT를 가지고 있어야 합니다. 왜 나는 네트워크의 모든 활성 주소를 가져오지 않을까요,\n정확히 42 XRT를 가진 주소들을 필터링하고 생성된 각 주소를 가능한 대상 목록과 비교합니다 \n(약 20개, 마지막에는 1개로 줄어듭니다). 말하기 쉽고 할 수도 있죠. \n\n이제, 스크립트를 다시 수정한 후에 마침내 원하는 쿼리와 트랜잭션 하나만으로 \n원하는 상품을 얻을 수 있을 거예요.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\n이제, 비디오를 25초 보고 (그 사이에 니모닉의 단어를 채워넣으며), \n보상을 훔치기 위해 최대 30초만 더 필요할 거예요. 해킹했어요.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ko"}},{"node":{"title":"Laboratório do Johnny Hackeado","path":"/blog/pt/hacked-johnnys-lab/","date":"June 25, 2024","description":"Houve um evento recente “Hack Johnny’s Lab” pela Robonomics e eu acredito que consegui hackeá-lo de alguma forma! Além da primeira tentativa que perdi devido a um mal-entendido das regras, ganhei todas as rodadas das quais participei e aqui está uma breve história de “como fazer”.","content":"\nAssim, uma rápida e necessária recapitulação das regras: 12 palavras em ordem mista, um vídeo de 5 minutos de um TurtleBot 4 a vaguear por um laboratório\ne estragando a ordem das palavras da frase mnemónica, 5 a 20 participantes dispostos a ganhar e um domingo livre para pensar numa estratégia.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nEu sou meio familiarizado com programação e tenho um laptop decente e quase nenhuma habilidade em reconhecimento de imagem. Mais do que isso, \nDecidi jogar de forma justa, o que significa sem baixar vídeos, sem abuso de velocidade de reprodução, sem navegação na barra de reprodução. \nEntão a estratégia escolhida foi um bom e velho bruteforce. Parece mais hacking do que qualquer outra coisa.\nO que temos aqui: um conjunto de 12 palavras em uma ordem misturada. Isso nos dá 12! (fatorial) opções de frases \n(479’001’600 para ser preciso). Uma quantidade considerável para processar!\n\n\n## Estratégia 1: burra e direta.\n\nBem, o que mais eu preciso, apenas vá e ordene! Mas aqui está o primeiro truque: 12! frases mnemônicas simplesmente não se encaixaram \nmeus 64 GB de RAM! Recebi um erro SIGTERM no console do IDE. \nAssim, criei um [iterador](https://docs.python.org/3/library/itertools.html#itertools.permutations) e iniciei o processo.\nDemorei algum tempo, não sei exatamente quanto, mas em 30 segundos, a calcular o número de combinações.\nApenas uma execução avaliativa. Mas o fato é: meu laptop nem chegou a girar seus ventiladores no máximo! Um único núcleo estava carregado. \n\nPesquisei um pacote Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) para carregar todos \nos núcleos lógicos da minha CPU (20 deles) para paralelizar os cálculos. Caso contrário, teria sido uma jornada eterna. \nMas com isso tive que dividir meu iterador em 12 partes. Os pacotes de multiprocessing do itertools funcionam juntos, \nmas quando um conjunto inteiro de opções está na RAM. Esse não era o meu caso, então o seguinte foi realizado:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nA partir desse momento e sempre eu usaria essa estratégia para fazer meu monitor de carga da CPU parecer assim:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nAcredito que isso reduziu o tempo de execução para cerca de 5 segundos. Descobri a melhor maneira de iterar através \ndas combinações, mas havia simplesmente muitas delas! O primeiro passo envolveu realizar aproximadamente 480 milhões \nextrínsecos na rede. O nó simplesmente me baniria por DDOS e mesmo sem isso levaria uma eternidade!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nApenas por razões de depuração, iniciei o script (para comunicação com o nó usei um \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) pacote) e notei que antes de chamar \nrealizar eu recebia erros como _frase mnemônica inválida_. Uma pista! Se eu pudesse validar a combinação localmente, \neu economizaria toneladas de tempo! A análise do GitHub me levou a \n[este](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nlinha de código e adicionei uma validação de combinação ao meu script. Isso reduziu o número de extrínsecos potenciais para aproximadamente 39’000’000 12 vezes mais rápido!\nMas ainda assim, 39 milhões de chamadas me baniriam para sempre, então eu precisava cavar mais fundo. Como eu poderia cortar significativamente o\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnúmero de cálculos? Bem, traindo um pouco minha estratégia inicial. Veja, eu ia evitar assistir vídeos, \n“um hacker, que nem precisará de um vídeo”, mas a matemática me fez mudar de ideia. Mudar para uma estratégia 132 vezes mais rápida. \nAbaixo está a explicação: \nCom isso, eu só precisava saber duas posições corretas de palavras em uma frase (uma levaria muito tempo, validada por experimento).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nEu iteraria através de 10! combinações, inseriria duas palavras nas posições corretas e validaria a frase, \nreduzindo as opções para aproximadamente 300’000, uma grande diminuição! Além disso, o conjunto de 10! combinações cabia na minha RAM, excelente! \nmeu próprio nó Robonomics local sincronizado com a cadeia e perguntaria a ele pelo saldo de uma conta resultante!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAlém disso, em vez de tentar transferir todos os tokens 300 mil vezes a cada e chamar um nó público para isso, decidi definir\nconfigurar o meu próprio nó Robonomics local sincronizado com a cadeia e solicitar o saldo do endereço da conta resultante!\nA consulta é muito “mais fácil” do que uma consulta extrínseca. Depois de uma noite inteira de sincronização (defini um limite de cache para que o meu\nportátil não explode com dados de string na sua ROM). Transações de rede\n(mesmo dentro de um host local) demorava muito tempo. Nem esperei até ao fim, obviamente foi bem mais lento do que\nassistindo a um vídeo inteiro. Se ao menos pudesse saber o endereço exato da conta! Mas para isso preciso de uma frase mnemónica... **Ou preciso mesmo?**\n\nOlha. As regras dizem que a conta desejada tem **exatamente** 42 XRT. Por que eu não pegaria todos os endereços ativos na rede,\nfiltrá-los tendo exatamente 42 XRT e comparar cada endereço gerado com uma lista de possíveis alvos \n(cerca de 20, diminuindo para 1 no final). Fácil de dizer e fazer. \n\nAgora, depois de modificar meu script mais uma vez, finalmente consegui chegar a apenas uma consulta e uma transação que com certeza \nme daria o prêmio desejado.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nAgora, depois de assistir 25 segundos do vídeo (enquanto preenchia as palavras de um mnemônico), \neu só precisaria de 30 segundos no máximo para roubar a recompensa. Hackeado.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"pt"}},{"node":{"title":"Лаборатория Джонни Взломана","path":"/blog/ru/hacked-johnnys-lab/","date":"June 25, 2024","description":"Недавно прошло событие «Взлом Лаборатории Джонни» от Robonomics, и я действительно считаю, что смог взломать ее! За исключением очень первой попытки, которую я проиграл из-за недопонимания правил, я выиграл каждый раунд, в котором принимал участие, и вот небольшая история «как это было».","content":"\nИтак, краткий и необходимый обзор правил: 12 слов в смешанном порядке, 5-минутное видео о том, как TurtleBot 4 бродит по лаборатории и нарушает порядок слов мнемонической фразы, 5–20 участников, желающих победить, и свободное воскресенье для придумывания стратегии.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nЯ довольно хорошо разбираюсь в программировании, у меня есть хороший ноутбук и почти нет навыков распознавания изображений. Более того, \nЯ решил играть честно, что означает отсутствие загрузки видео, злоупотребления скоростью воспроизведения, навигации по плейбару. \nТак что выбранная стратегия была хорошо знакомым методом брутфорса. Звучит больше как взлом, чем что-то еще.\nЧто у нас здесь: набор из 12 слов в перемешанном порядке. Это дает нам 12! (факториал) вариантов фраз \n(479’001’600, чтобы быть точным). Довольно большое количество для обработки!\n\n\n## Стратегия 1: глупая и прямолинейная.\n\nНу что еще мне нужно, просто иди и разберись! Но вот первый трюк: 12! мнемонических фраз просто не помещаются \nмои 64 ГБ ОЗУ! Я получил ошибку SIGTERM в консоли IDE. \nПоэтому я создал [итератор](https://docs.python.org/3/library/itertools.html#itertools.permutations) и запустил процесс.\nМне потребовалось некоторое время, не уверен точно, сколько, но в пределах 30 секунд, чтобы подсчитать количество комбинаций.\nПросто оценочный запуск. Но дело в том, что мой ноутбук даже не включил максимальную скорость вентиляторов! Был загружен только один ядро. \n\nЯ нашел в Интернете пакет Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), чтобы загрузить все \nлогические ядра моего процессора (20 из них) для параллельных вычислений. В противном случае это было бы вечное путешествие. \nНо для этого мне пришлось разделить свой итератор на 12 частей. Пакеты multiprocessing itertools действительно работают вместе, \nно когда вся группа вариантов находится в ОЗУ. Это не было моим случаем, поэтому было выполнено следующее:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nС того момента и далее я использовал бы эту стратегию, чтобы мой монитор загрузки ЦП выглядел так:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nЯ считаю, что это сократило время выполнения до примерно 5 секунд. Я нашел лучший способ перебора \nкомбинаций, но их было просто слишком много! Первым шагом было выполнение примерно 480 миллионов \nэкструзий в сети. Узел просто забанил бы меня за DDOS, и даже без этого это заняло бы вечность!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nПросто из-за отладочной цели я запустил скрипт (для связи с узлом использовал \nпакет [py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) и заметил, что перед вызовом \nвыполнения у меня возникали ошибки, такие как _недопустимая мнемоническая фраза_. Подсказка! Если бы я мог проверить комбинацию на предмет \nвалидации на месте, я бы сэкономил кучу времени! Парсинг GitHub привел меня к \n[этой](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nстроке кода, и я добавил проверку комбинации в свой скрипт. Это сократило количество потенциальных экструзий до примерно 39’000’000 в 12 раз быстрее!\nНо все равно, 39 миллионов вызовов забанили бы меня навсегда, поэтому мне нужно было еще больше копаться. Как я мог существенно сократить\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nНо все равно, 39 миллионов звонков забанят меня навсегда, поэтому мне нужно было больше копать. Как я мог бы значительно сократить количество вычислений? Ну, немного предав свою первоначальную стратегию. Понимаете, я собирался избегать просмотра видео, \n«хакер, который даже не будет нуждаться в видео», но математика заставила меня передумать. Перейти к стратегии в 132 раза быстрее. \nНиже объяснение: \nТеперь мне нужно было знать только два правильных положения слов в фразе (одно заняло бы слишком много времени, проверено экспериментом).\n\nНиже приведено объяснение:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nПри этом мне нужно было знать только два правильных положения слов во фразе (одно заняло бы слишком много времени, проверено экспериментом).\nЯ бы перебрал 10! комбинаций, вставил два слова в правильные позиции и проверил фразу,\nсократив количество вариантов примерно до 300’000 — это значительное уменьшение! Более того, 10! наборов комбинаций поместились в моей оперативной памяти, отлично!!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nТакже, вместо того, чтобы пытаться передавать все токены каждые 300к раз и вызывать общедоступный узел для этого, я решил установить \nЗапрос намного «проще», чем экструзия. После целой ночи синхронизации (я установил предел кэша, чтобы мой \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (I’ve set a cache limit so that my \nlaptop won’t blow up with chain data in its ROM) I gave it a try and.. this was a disaster. Network transactions \nпросмотр целого видео. Если бы я только мог знать точный адрес счета! Но для этого мне нужна мнемоническая фраза… **Или действительно нужна?** \nпросмотр видео целиком. Если бы я только мог знать точный адрес счета! Но для этого мне нужна мнемоническая фраза… **Или мне действительно нужно?**\n\nПосмотрите. Правила гласят, что желаемый аккаунт имеет **ровно** 42 XRT. Почему бы мне не получить все активные адреса в сети,\nотфильтровать их, имея ровно 42 XRT и сравнить каждый сгенерированный адрес с возможными целями \n(около 20, уменьшаясь до 1 в конце). Легко сказать и сделать. \n\nТеперь, после еще одной модификации моего скрипта, я наконец-то сделал только один запрос и одну транзакцию, которые, безусловно, \nдали бы мне желаемый приз.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nТеперь, после того, как я посмотрел 25 секунд видео (при этом заполняя слова мнемоники), \nмне было бы нужно всего 30 секунд максимум, чтобы украсть награду. Взломал это.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ru"}},{"node":{"title":"Взламано Лабораторію Джонні","path":"/blog/uk/hacked-johnnys-lab/","date":"June 25, 2024","description":"Недавно відбулося подія “Взламати Лабораторію Джонні” від Robonomics, і я вважаю, що я взламав її в певному сенсі! Окрім першої спроби, яку я програв через непорозуміння правил, я виграв кожне коло, в якому брав участь, і ось коротка історія “як”.","content":"\nОтже, короткий і необхідний підсумок правил: 12 слів у змішаному порядку, 5-хвилинне відео TurtleBot 4, що блукає лабораторією\nі псування порядку слів мнемонічної фрази, 5-20 учасників, які бажають перемогти, і вільна неділя, щоб придумати стратегію.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nЯ дещо знаю про програмування, у мене є непоганий ноутбук і майже жодних навичок у розпізнаванні зображень. Більше того, \nЯ вирішив грати чесно, що означає відсутність завантаження відео, відсутність зловживання швидкістю відтворення, відсутність навігації по плейбару. \nТому вибрана стратегія була добре відомим методом брутфорсу. Звучить більше як хакінг, ніж що інше.\nЩо ми тут маємо: набір з 12 слів у змішаному порядку. Це дає нам 12! (факторіал) варіантів фраз \n(479’001’600 щоб бути точним). Досить велика кількість для обробки!\n\n\n## Стратегія 1: дурний і прямолінійний.\n\nНу що ще мені потрібно, просто йди і сортуй! Але ось перший трюк: 12! мнемонічних фраз просто не влазили \nмої 64 ГБ ОЗУ! Я отримав помилку SIGTERM у консолі IDE. \nТож я створив [ітератор](https://docs.python.org/3/library/itertools.html#itertools.permutations) і розпочав процес.\nМені знадобився деякий час, не знаю точно, скільки, але протягом 30 секунд, щоб обчислити кількість комбінацій.\nПросто оціночний запуск. Але справа в тому, що мій ноутбук навіть не включав свої вентилятори на максимум! Було завантажено лише одне ядро. \n\nЯ шукав в Інтернеті пакет Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), щоб завантажити всі \nлогічні ядра мого процесора (20 з них) для паралельних обчислень. В іншому випадку це була б вічна подорож. \nАле для цього мені довелося розділити мій ітератор на 12 частин. Пакети multiprocessing itertools дійно працюють разом, \nале коли весь набір варіантів знаходиться в ОЗУ. Це не було моєю справою, тому було виконано наступне:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nЗ того моменту і назавжди я буду використовувати цю стратегію, щоб мій монітор завантаження ЦП виглядав так:\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nЯ вважаю, що це скоротило час виконання до близько 5 секунд. Я отримав найкращий спосіб ітерувати через \nкомбінації, але їх було просто занадто багато! Перший крок пеедбачав виконання приблизно 480 мільйонів \nекструзій в мережі. Вузол просто забанив би мене за DDOS, і навіть без цього це тривало б вічно!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nЛише з метою налагодження я запустив сценарій (для взаємодії з вузлом я використовував пакет \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) і помітив, що перед викликом \nвиконання я отримував помилки типу _недійсна фраза мнемоніки_. Підказка! Якщо б я міг перевірити комбінацію на місці, \nя б зекономив тонни часу! Парсинг GitHub привів мене до \n[цього](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nрядка коду, і я додав перевірку комбінації до свого сценарію. Це зменшило кількість потенційних екструзій до приблизно 39’000’000 в 12 разів швидше!\nАле все одно, 39 мільйонів викликів забанили б мене назавжди, тому мені потрібно було ще більше розкопок. Як я можу значно скоротити\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nкількість обчислень? Ну, трохи зраджуючи свою початкову стратегію. Подивіться, я мав уникати перегляду відео, \n“хакер, який навіть не потребує відео”, але математика змусила мене змінити свою думку. Змінити її на стратегію в 132 рази швидше. \nНижче пояснення: \nЗ цим мені потрібно було знати лише дві правильні позиції слів у фразі (одне зайняло б занадто багато часу, експериментально підтверджено).\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nЯ б ітерував через 10! комбінацій, вставляв два слова на правильні позиції та перевіряв фразу, \nзменшуючи варіанти до приблизно 300’000, досить значне зменшення! Більше того, набір комбінацій 10! вліз у мою ОЗУ, чудово! \nсвій власний локальний вузол Robonomics, синхронізований з ланцюжком і запитати його про баланс рахунку!\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nКрім того, замість того, щоб намагатися передавати всі маркери кожні 300 тисяч разів і викликати для цього загальнодоступний вузол, я вирішив встановити\nстворити мій власний локальний вузол Robonomics, синхронізований із ланцюжком, і запитати в нього кінцевий баланс адреси облікового запису!\nЗапит значно «простіший», ніж зовнішній. Після цілої ночі синхронізації (я встановив обмеження кешу, щоб мій\nноутбук не вибухне з даними ланцюга в його ПЗУ) Я спробував і.. це була катастрофа. Мережеві транзакції\n(навіть у локальному хості) зайняло надто багато часу. Я навіть не чекав до кінця, очевидно, це було набагато повільніше, ніж\nперегляд цілого відео. Якби я міг знати точну адресу рахунку! Але для цього мені потрібна мнемонічна фраза… **Чи я справді?**\n\nПодивись. Правила кажуть, що в бажаному обліковому записі **точно** 42 XRT. Чому б мені не отримати всі активні адреси в мережі,\nвідфільтрувати їх, маючи точно 42 XRT і порівняти кожну згенеровану адресу зі списком можливих цілей \n(близько 20, зменшуючись до 1 в кінці). Легко сказати і зробити. \n\nТепер, після ще однієї модифікації мого скрипта, я нарешті зробив лише один запит і одну транзакцію, які безперечно \nдають мені бажаний приз.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nТепер, після того, як я переглянув 25 секунд відео (тим часом заповнюючи слова мнемоніки), \nмені б вистачило максимум 30 секунд, щоб вкрасти винагороду. Взламав це.\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"uk"}},{"node":{"title":"黑客约翰尼的实验室","path":"/blog/zh/hacked-johnnys-lab/","date":"June 25, 2024","description":"最近有一个由Robonomics举办的活动“黑客约翰尼的实验室”，我相信我以某种方式黑进去了！除了第一次由于规则误解而输掉之外，我参加的每一轮我都赢了，这里是一个简短的“如何”故事。","content":"\n因此，快速回顾一下必要的规则：12 个单词，顺序不一，一段 5 分钟的视频，视频中 TurtleBot 4 在实验室里徘徊\n并破坏了助记词的词序，5-20 名参与者愿意获胜，并在周日自由思考策略。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n我对编程有点了解，我有一台体面的笔记本电脑，几乎没有图像识别技能。更重要的是， \n我决定公平地玩，这意味着不下载视频，不滥用播放速度，不使用播放栏导航。 \n所以选择的策略是老式的暴力破解。听起来更像是黑客行为。\n我们这里有�么：一个包含12个词的混合顺序集合。这给了我们12！（阶乘）短语选项 \n（准确地说是479’001’600）。要处理的数量相当可观！\n\n\n## 策略1：愚蠢而直接。\n\n嗯，我还需要什么，就去整理一下！但这里有第一个技巧：12！助记短语根本不适用 \n我的64 GB RAM！在IDE控制台中出现了SIGTERM错误。 \n所以我创建了一个 [迭代器](https://docs.python.org/3/library/itertools.html#itertools.permutations) 并启动了该过程。\n我花了一些时间，不确定具体花了多长时间，但在 30 秒内，计算出了组合的数量。\n只是一个评估性运行。但问题是：我的笔记本甚至没有将风扇转到最大转速！只有一个核心被加载。 \n\n我搜索了一个Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html)包，以加载我的CPU的所有逻辑核心（共20个）以并行计算。否则，这将是一次永恒的旅程。 \n但是为此我必须将我的迭代器分成12部分。itertools multiprocessing包可以一起工作， \n但当整个选项集在RAM中时。这不是我的情况，所以进行了以下操作： \n从那一刻起，我将使用这种策略使我的CPU负载监视器看起来像这样：\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\n我相信这将执行时间缩短到大约5秒。我找到了遍历组合的最佳方法，但组合太多了！第一步涉及在网络中执行大约4.8亿次外部操作。节点将简单地因为DDOS而禁止我，即使没有那样，也需要很长时间！\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\n仅出于调试目的，我启动了脚本（用于节点通信我使用了一个 \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/)包）并注意到在调用之前 \n执行时我遇到了诸如_无效助记词短语_之类的错误。一个线索！如果我可以在本地验证组合，\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\n我将节省大量时间！GitHub解析引导我到 \n[这里](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \n代码行，并将组合验证添加到我的脚本中。这将将潜在外部操作的数量减少到大约3900万，快了12倍！ \n但是，3900万次调用将永远禁止我，所以我需要更深入挖掘。我如何显着减少 \n计算次数？嗯，稍微背叛我的初始策略。看，我本来打算避免观看视频， \n“一个不需要视频的黑客”，但数学让我改变了主意。将其更改为快132倍的策略。\n以下是解释：\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n这样我只需要知道短语中两个单词的正确位置（一个将花费太长时间，经过验证的实验）。 \n我将遍历10！组合，将两个单词插入正确的位置并验证短语， \n将选项减少到大约30万，减少了很多！10！组合集适合我的RAM，太棒了！ \n自己的本地Robonomics节点与链同步，并询问其结果账户地址余额！\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n查询比外部操作“更容易”。整夜同步后（我设置了一个缓存限制，以便我的 \n笔记本电脑不会因为ROM中的链数据而爆炸），我尝试了一下，结果是灾难性的。网络事务 \n（即使在本地主机内）花费了太多时间。我甚至没有等到结束，显然比\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\n而不是尝试每300k次转移所有令牌并为此调用公共节点，我决定设置 \n观看整个视频要慢得多。如果我只能知道账户的确切地址！但为此我需要助记词短语... **或者我真的需要吗？** \n查询比外部查询“简单”得多。经过一整晚的同步（我设置了缓存限制，这样我的笔记本电脑就不会因为 ROM 中的链式数据而崩溃），我尝试了一下，结果……这是一场灾难。网络交易\n（即使在本地主机内部）花费太多时间。我甚至没有等到结束，显然比 \n看整个视频慢得多。如果我只能知道账户的确切地址！但为此我需要一个助记短语... **或者我真的需要吗？**\n\n看。规则说�所需的帐户**恰好**有42个XRT。为什么我不能获得网络中的所有活动地址，\n通过拥有恰好42个XRT来筛选它们，并将每个生成的地址与可能的目标列表进行比较 \n（大约20个，最终减少到1个）。说起来容易做起来难。 \n\n现在，再次修改我的脚本后，我终于只需要一个查询和一个交易就可以 \n给我想要的奖品。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\n现在，我观看了25秒的视频（同时填写助记词的单词）， \n我只需要最多30秒就可以窃取奖励。已经破解了。\n\n<rb-image zoom src=\"./images/hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.f7aef9be245dd788cf3f476249516c9a.png 480w","/assets/static/cover.6b2ed88.f7aef9be245dd788cf3f476249516c9a.png 1024w","/assets/static/cover.62c183a.f7aef9be245dd788cf3f476249516c9a.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-68d9627a00ac67fe587b6246a910fee5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-68d9627a00ac67fe587b6246a910fee5)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQNElEQVRYw3VYCZQU1bmu6uqu6qquvau6qqv3npmefd9nYIZZYVZmhulZ2R1AAQMREBUUcvAJEnbNy/EoQfCpPKPJS8JiFkR9BBciOyibPkAGEQJEEUW2999qdkmde%2brcuvfWvf/y/dvFLBh334ahxtppnmF5kuKhj9%2b9gMB5HKcwDMcxx7/bhLBwDk6gHQLDCiwvwG60A23IiQIrCDDFONCbl0VYY7NyMAgL4E2SvM2GGvzo4M01EurAFAzeSQl2n4NxDlbAaj0kufyS6pO0oOTySQTB4XdQj2FkKJhYW9NE2SQcY3%2b6Dyy2Ehz8rngkV0BSvaKsi7CVEScrHlEPyvAJzR2S3HGSrImkjYcTYcodlgVFpOw8sIdOBxq86G3Ey0APjMeI/LcMgNigSaoI/%2bM4C7KHBjvC7vht6mlZ8q5fv%2bHs2TMtQztADzZCjE1Bx2YV4Q19U5OsqUzOYoG/LEObOh97dDZB0HY7Ugg0OCumXgK/ofbYZ6xhd%2bxwc9xhwWkcY%2b7PAGwHjBoJcjhbMeKkSKEKMoj9DNyDWqAPxAHFo0eO%2bxSe/Z82N7YDZXZSJq3AoQPDbPCJYVbowwgwEzuY5USHTC1Y%2bMzcX8xhnXbN5wS5Kl4QP1LFTbpZYINAEACVsqZEbjcrEgEtCsbyZSuKCssxjEKivAfWFgzp0Zsg%2b5LkQAp68zIiGigAdAIY4BgbASPW9vbe8%2bfPrlz5G5tVsCB7sGKAKpvgMRIi8RkBfzJAAkZwjBRkJ8BGC8gOnudZnbbDJkyM4ph0vRE5mObUAhJ0TFXwpFUmcNEUnONmY3E8pg3H4kVLHp3xOIjJahGwu6jHkagY0%2bZohofzwHps1htIUP0ia2oAfgMJAb4L8spk0WNSQxcXVbz00st7du%2b5cOHb7767cPz48cOHD69Y9p95JVm0ZLXbxZvHMwBLOOuWXGFDThKAemjuMBIQKFNV3G6XYehet%2bbz6H7DHdBUj0v1KYrfwahWq4Mi5Zjh3WIATJvhWBV%2bBhZvgs/Eril%2bsH1/kgpKRM7nhtthTajQNis7rK1r5cqXDhz47Pr162fOnHnwwYdGjRo1bdq006dP/3j50tSfzQTdWAlE9H2dVczSAFExP0ESbFp8vK57NZcaCiggRVVR3Zom87zX41OcftwE220bMI3SwdjVF19cufrlVwASaBpHlk7gN5yS6uNtDAngAR7cWoimnIBvyioBTqZPnzl9xrTZs59cu3YtMPDDDz/803y2b99x6tSpK1euwuAvFy4B1MXM%2bj5uwzxCj5NsNiRKkXN7nC5R1gx/0Of35KSmOxyyyx3UjYA7kMQLBo5E7LjNgBVhmqivazl8%2bNA7mzZLggGKjmkZWT3OKX4uMy%2b1pLDy%2bed/PfPRJ95/f0tKShpmPg9Pngr0gaSv3/FcvPgdsHHr8%2bpVxMOkSVNgfcxZ3YlbU6UQHwSXX7Db1LKy2oKCAo4XFacS8Ltl0ZmVkZiWlixLiAcHJ4uSYRgRltFuQwiZAkaAR%2b8/eWLunHmgbgJBBUGWtCPkEJS1YlD9yZP9O3fu3LNnz7Zt/1iyZPnWv38Qbe85efLkqVNfAef79u3/%2bONtO3fsWvfH9a%2b88tqa1f%2b1ZPHyR2fMenDC5PZh3bCyuXEYaWPvjhhAOoUh67doQZ5mOZpy9YwZP3zsiIRIoq5wGcmqLHAJqRlxYY/u5Ly%2bUE5JzaCaxvKKyvhIDob86U0bwE0HmpNVLPA6iN9iUi%2b5RE%2bCbHcAew7SJgJ958HvnD0LBvr555%2bD/xnX91B2ZlEkIcPQ48b1TRreOxaYx3HSYiFA2Ktffu2Z%2bc%2bGQ5G9e/bt3r3nX%2bf/NXny1FtKMHFLxYVSf/vGW6tW/8Yf58UweyKvTRk1sr6zoyA9Bwe/hlsIgrBQVgv4ZBtuZxyllYObox319TVJoWSgisDvigNgSYQFB3jxJMlBEACrwk2XDFiHg%2bfNmw9IAB7gPXXK9IXPLn551RqStJsixObO%2bY%2b/b/kQiADK7DYndLo6Ro8c0Td2zDhYf%2bnSj/B%2b%2b%2b2/wEqrRbzp1G2rVq0Bo//uwoWO9hEwVayHl7a0RSsqCrxei9XWYGfKKBrGSyg6w0LYaH5w85SKumE9JUXN3ngQMXFnIINNSQIiEY/hyCGA18duhhUzcmFjRk%2b4du0qOMeLF7/fvn372XNnAVQDSisBAAytQgTgHJrN6rBYIEGiTaeJ9LBp02bTKi7Ce8%2bevQytIC8H0Cd4kqGWrlh85vTprVu3xofBqMgRheUb5j4zvLMn6PPgODGM5mIMDHfwtZTdTnFVVcuq8qPz6we3JOUgz/aTQMYJThGlLn5J1sExy%2bDsLTdDb2NDGxABRF%2b6dAk62z/ZdeLEl%2bvWbQSi4QzQNbyffnrB0iXLSasATtPnSXj11ddh5eXLl69evQadI0eOiMhD0JIqeeJl0cXKstH3wMTMjHzY3x9MXBRtebKlo76nMyU%2bAHIhCSKJpBpoViWsNIYzDF1ZUlBbX7W0u/vx5jbCJiLU3MMAUA%2b49yc7ORelxTMUJZhWDtpgVKd/xrRZzy1/4cUXVnX2RIPJ7u07tgNZb775u9GjxrW2dD7/3K9//BFB5eDBg1u2bAH2vv3227Vr/3vfvn1ffPEFjO/YvpOyC0aC5DTAY/JmgKdNZ2YjMKRwEaPrQkmF2ZmKBK4cPSm4ZSJpZy0QcDC7zZaWGK6oHNDl9o4sLnZ7AEU09pMsmrVRPO9kS4uqc7IGmkYZOwn8KZI0xdo4l411Ak6wN994C8h6/733fv/730FWBD4KSN%2b1a9fu3bt37tzx0UcfrV%2b/HjgBo//yyxPff//9m7/9H1omeFmO5QVmXIPkT4jFB2TWOC9iVGZ8Ujjg8/l9abklCem53oRkETJuWZZEsaQoPT8U9llZDOVzNPz%2bk2wUCdvuCYXeefevfQ%2bOsaukN%2bR0BiS7X1T9shpUZEXGbAJBILNu7hge8/Qff/LJuj/9afPmzeCdgHqwkEOHDm3atGn//v0we%2bDAgRMnTnz22YEhQ%2bpZzQJJzj0h2bRpACpnRZbjCAVTBhYV9na0Dm1uGzWqb8bPZ/a0tTbW1pYX5UfbBiscRABHLIDclY0SZuIQsIoenE936A2l1W5ahDwGs3JJtNQnaqpVSMRFDueKbXI2JXfanVHR2Lduw/WNf756/Msjx47%2bY9s2YODI4SOgBMBMf3//uXPngIHdu3YfO3bs0KHDzz67KCkncCtK3jo3FjEhEwPLAVTk5w1qqK6b0NM7pKq2r6t72exZcx6btWDO3OkTJw%2bLjsbugcytns1M/Say2gOsNo/TC2z2BxyuD1xBOOBV2bdUMJ7k3UtlzxzBPVdwzxeNVbJvoF2ebpeuz5pzZer0ox98%2bH/9/ceOogcC89dffw2cgM8FM9i7dy/kFF%2bd%2bur8uW/Ka4tpAeAH2St7S2q0nVVkNiOVo0j4JKPN0XULF/xhzasr5j39s/ETn5j6yLSHJs16%2bOGpk6a0d/VZ8LtyqnsYYEcwrk2q/wMtWEori0Vjo%2bofzrgWmSknLPij4j/ri5ct3Gxef8PpK7UrozHmrUdmHpw56/rm9/55%2bfLxo0dB2MAD4P6bb74B8cMnVA2gDWDmr3/5Gxyv%2bqAKk6GUiaWMIPjKgcKOLZ69H/qmTYYAQuVk544bM3b8lMd6ukZU1zR2d/R2tEUnjB77xFPzWzr7kI82Q5jlHgjFNPAQq03j9GdE92O8vtHl/5sr8CvZ84Ls6WVcEzjXS4rvVxJSwkLJWCIZYav4uOiew4irFWP3a2uvAL3Xrt2ZFF2%2bcvnjbdv6%2b08ePXb0/PlzS5euQIGMEKG0heQZKieoPWiW/cPr%2bolP/Vvf8Rzc4w/7BY43IO9JCQXLszPTIvGJwUDI6/V7vV5f0B9KVLUwx7ktN4qemwygUhB5G7aQlPNJudAqR%2b1KASFruNBAKZWkc5FgZBJSHeFULXyXXR1mVeaw7rGMq4yQF4jeGsjObUJVeT1knRs3/Pndd7dsWP/2wgXLCgvKO6K9Bw8cPHnyK%2bCnu2ukyQDKdlGUtEAeydMM%2b9xC17njwf4Dvv9921tYnJtbOCApLSc3LXdk7eDm0pKm0uL81DRVViCT84cTU9Jzs/NK4iOZNK3it%2bIAcqiYHWVXZhakhCVKEpLL1PxGzSHyrrBIkKwrUYoboFAML4alyCCVcfJSQAzkOSmeVRMkXhL1BJpXUT0ZzOTSqjjJgD5kGXan6Bv/8665855yyijhSS5RJV0QZKG4TYc%2boEh3OVYsVF9f5etsy2hsG9Q9ZWDL2JLciqTMkqTE9Djd7Xd7wjQjCpKalV1UUlpZVVlfUVmXkp7PMBry7H5vZM3qNSlJ2dAnTfGkFKslrXoo3Qm1ZX69llPtcrmlwkatdZo3dYCaWqx2zPIXNWlp5WpygVJYrxU161C4KYbTwcq86Kzt82k%2bJZDssmACRGWQTvIgByMRZh7PDZnoictRfClyYpFa1KrrIQgLjCQH09Mzqmrqxz4ydPjDtaNnlnVNzR/1eElD58CC/LLCwoGJSRmBcGJ5%2beCa6saKiiFVlQ3JadmeQCJmlnDSihUrotEeEBhJotwzlOWsGGHo8aKd4Yta9Jo%2bo2SYPrDLnVSswru4Vc9t0PIatdrxYNwszCbkQYYD4fJGYgupVNFQPVYfAk4gv8odYgiKE90MBKT6SZ6Sdj2Q4qwYaZRG3VoAMgIpITk9NSM/L78EKOvu7RkabWwbXtszqbp91GCQN6T6tTWN1dUNdUNaCorKklNzklOzfaGIN5CAoWCG0VaCIdH1gSM%2bV0kZoObVa%2bEsZ3atK6vGBVqGEcrBF7dqSSUK8Nb%2bhA%2boV7ziqF8GgGL4xZOIgqvViqiHujmz0hUpUIBKFNetCJMFzVpqmcqJQmaVmlam5tS5YCR9kJpZBQdJDOVOSssMhhNBzEXFg4Y2drYO7W6s72hqaO/saW9p7hja1BmNjuztGlNX1xZJzvT4452qx%2b0NaZ7gjZISappY6QhExGUrihcJD0ToicgWgmV4HqTLyYKD42GB6BKhD0mrrIvotoIVSIo3b2wgwpvVrU%2bCTWzIqcfqXfRLKMOp%2biWGQ3dNFI34DKY5jQSEH1H0BONSfP6ILxDJyCqsrKhvqGsfMri1vbW7ram7rbW3u6VrUteI1pbugQOqQfAutx8KTpcRUFxe7M4LOThJ9UiCInCSAKSDpwMSgRpvRAaXB3kefCqGSFLo7sif4oQpWAnmKKoi%2bHV3WIa/fEkyDMIIgJtmeEhsYUrSRCNO1gNS7KYNRBO7hkAtKCXlB/MHR1KLQ1kDIlA%2bDqwe0DGyctqEpmEtvW0tPd2tXTObWvvauysq6jKzCnVvSPdACyqaz%2bkysHsuA%2bFIOI%2biUJHq4MzrS05gRXQvyTiE2CwkkuDIocEUSaLFsQs2Bws5F2oMe6MBfmAfyMkp%2b4370NiFDXDIiTdW2h1cYmpq6SBwnWnh5IRQQmJadnbBgOIXxldMHd7R3BB9qr55RlPT/AkdRYVl4UiaZgRBA3EJqWDT0P4foy9gScANO/wAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"zh"}},{"node":{"title":"Robonomics School 2024: Game Rules for Hack Johnny's Lab","path":"/blog/robonomics-school-2024-hack-johnny-lab/","date":"June 5, 2024","description":"In the coming days, we will launch a practical quest of Robonomics School 2024, during which you will be able to feel like a real privacy violator and even 'steal' tokens. Interested? Check out the rules for the game 'Hack Johnny's lab'!","content":"import Card from '~/components/TextCard.vue'\n\n\n## Motivation for The Game\n\nThis game draws a lot of inspiration from the ideas about escaping from Black Mirror, which Sergei talked about in his articles ([first](https://robonomics.academy/en/learn/escape-from-black-mirror/overview/) and [second](https://robonomics.academy/en/learn/school-2024-iot-vs-ai/overview/)) at Robonomics Academy.\n\nImagine, an ordinary cheap robot vacuum cleaner has a serious ability to spy on the lives of its owners. It does not even matter whether some malicious person gains access to this data; AI analysis of video recordings is enough to draw conclusions about non-public aspects of a person’s life. Any dirty secrets, unnoticeable patterns of behavior, and private information — everything goes into the profile furnace. Think about it, while you are trying to grab some free tokens.\n\n## The Goal of The Game\n\nIn the game, players are tasked to restore the seed phrase from the data of the mobile robot. The robot moves randomly around the laboratory, recording video. From time to time, the robot publishes one of the 12 seed phrase words. During one of the robot’s stops, players can see on the video a sign with a number, which hints at the order of that word in the seed phrase. The task is to match the numbers on the signs with the set of words received at the robot's stops, to restore the correct seed phrase.\n\nThe player who first restores the seed phrase and withdraws all XRT tokens from its address wins.\n\n## The Game Rules\n\n*Registration of players*\n\n- To participate, players have to create a new account on the Robonomics parachain, and it must be created with the Edwards (ed25519) encryption type. Instructions are available on [our wiki](https://wiki.robonomics.network/docs/create-account-in-dapp/).\n- Next, players need to go to the [Discord bot](https://discordapp.com/channels/803947358492557312/1245395009964871772) on the Robonomics server and wait for a message about the start of a new session.\n- At the start of the session, players send the created account addresses in **Robonomics parachain format** to the Discord bot. Players will have 60 minutes to enter.\n\n*Laboratory exploration*\n\n- After the registration is complete, the mobile robot will go to explore the laboratory. After that, the robot will send a video recording and a list of the words in the seed phrase (not in the correct order).\n- Players are waiting for a message from the Discord bot about receiving results from the robot and go to the application [via a link](https://robonomics.academy/en/demoapps/johnnyb-lab/) to start restoring the seed phrase.\n\n*Restoring the Seed Phrase*\n\n- To access the data, players have to use the registered Robonomics account.\n- Players will have access to the video recording and the set of seed phrase words. The player's task is to find the correct order of the words based on the numbers on the signs located in the laboratory.\n\n<Card alignContent=\"left\">\n\n**Example.** If the set of words: \n\n`finding -> church -> relation -> dog -> sample`\n\nAnd the robot's route, reconstructed from the video: \n\n`Sign #5 -> Sign #3 -> Sign #1 -> Sign #2 -> Sign #4`\n\nThen:\n\n`finding — Sign #5 -> finding is 5th word`\n\n`church — Sign #3 -> church is 3rd word`\n\n`relation — Sign #1 -> relation is 1st word`\n\n`dog — Sign #2 -> dog is 2nd word`\n\n`sample — Sign #4 -> sample is 4th word`\n\nAs a result, the correct seed phrase: `relation dog church sample finding`\n\n</Card>\n\n\n- After finding the seed phrase, players can restore access to the account with tokens using any application.\n- For example, in the Polkadot.js extension, this can be done using the *Import account from pre-existing seed* function.\n- All restored account with XRTs have **an Schnorrkel (sr25519)** encryption type, that supported in most Polkadot / Kusama wallets.\n\n\n*Announcement of the winner*\n\n- Once a player has accessed the account, he or she has to withdraw XRT to become the winner of the session, until someone else does it.\n- For example, using the Polkadot.js extension, this can be done on [our Polkadot / Substrate portal](https://polkadot.js.org/apps/?rpc=wss%3A%2F%2Fkusama.rpc.robonomics.network%2F#/accounts) on the Account page. Just press Send button and withdrawn tokens to any place you want. You can use *Transfer the full account balance, reap the sender* check to make full balance withdrawal.\n- Upon completion of the session, after the tokens are withdrawn, the bot will notify the Discord channel by publishing the winner's address.\n\n## Event Conditions\n\nThe event will last 9 days, during which in the morning and evening (18 times in total) you will have the opportunity to be the first to reach **42 XRT** within each session.\n\nThe registration for session is started at **10:00 and 20:00 EEST** every day and last 60 minutes.\n\nFollow our social networks so you do not miss the start of the event!","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/cover.62c183a.26e750acf55da7d69cd6ab4f25cd5b93.jpeg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.26e750acf55da7d69cd6ab4f25cd5b93.jpeg 480w","/assets/static/cover.6b2ed88.26e750acf55da7d69cd6ab4f25cd5b93.jpeg 1024w","/assets/static/cover.62c183a.26e750acf55da7d69cd6ab4f25cd5b93.jpeg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-47a27c26f6e74a5020972ac145d57ba1'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-47a27c26f6e74a5020972ac145d57ba1)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwABAAIDAQEAAAAAAAAAAAAABQQGAAECBwj/xAAtEAACAgECBAQGAgMAAAAAAAABAgMEEQAFBhIhQRMiMVEUMmFxgZEHFSNCwf/EABgBAQEBAQEAAAAAAAAAAAAAAAMEAQIA/8QAKBEAAQMCBAQHAAAAAAAAAAAAAQACEQMhEjFBUQRhcZETUoGx0fDx/9oADAMBAAIRAxEAPwD53rGsILPxCu0pQCHl9A2fU/jVh4J4ZO/ynMU05aTwYoYnVC78pc5ZuigKpP40JvJpG8x2zIr4HQ59e%2bM6f4cXcaO1rYamk21WplR8kEkhiMhcggjBwcjvqttSjQrAV4LRIkZHO%2bk/CPA%2bowuYDueQ16KFxZsh2G9GI1miBZ0McxBeKSNuVlyOhwe40bahvWoW3GwrvG7YMp/X61P4hl3C8sc1ig1avCOVAsZVEBPQD75zk9STrTf28e2ybY1Z/DB6gLlgPXp7joeusfxHCve%2bHQw5Abjfl7SgFQBrSCJ66fYRtCjPflKV1B5RlmY4Cj6nWnRRYjgkCYQ8peHzc%2bTnOe/rjSXC0MEm%2bCjuk01SrKHjmdIjIyEKSPKOvzAA/fXewUH3CzdtwQGWpVA5gpAYBiQuB3OB1A1KDsq7G6P3ej/X2fh3WVJ1%2beORcFfbXO5UbG3OkNkrllEgVWyBn/ukd1o2m203mrXPhElESzzQsi%2bnRMn1OP1jQoIZiZXf5eh9TnsPtpGluEgi%2bl%2b65MyDosjcJz5RX5lKjm/1%2bo%2buplW9bMUdI2JTVDcwi5vKCMnI/JJ1J2ahBZ27crEwJaBPIAcYPvoca9WoEU2udk6Y7wsbUkua0xofVKOrOih1kOfUHxCD7d9aUOw6eLjsv%2bQ5APXv9dGazU/h80%2bJnlCZo37O0XFu0okZsefxY2dGBIOGBPXqAfxq0bHxPZ37iSrHPWpUqyxnxUoVxEDyqQGIzjOSDrz7TPDW5vR3as3IrrymDHykBj65986RogXK4cZNgr7/ACPLfh4VML2w21zWEavE7KGcjJLBBk9O%2bfca8vqTGtZinEaych5grjKnVq/kYE3KJz0EJGPzqtTbhJNt0FJkj8OFiysB5uvbTB4JxGxAEQMyI/Sd0WEgRnK//9k=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Build DePIN projects at Coindesk Consensus Hackathon!","path":"/blog/robonomics-at-consensus-2024/","date":"May 22, 2024","description":"Robonomics is hosting a track at Consensus 2024 Hackathon, challenging participants to build useful DePIN projects. Participants will have remote access to robotics and smart home labs and can add their favorite web3 tools to build infrastructure for the real world.","content":"\nWin 500 DOT for 1st place and the latest Razer laptop for 2nd at the Coindesk Consensus Hackathon! And Raspberry Pi 5s to install your self-hosted smart home for top-3 winners.\n\nJoin us for a unique and exciting track focused on using Robonomics for smart home and robotics use cases. We offer remote access to two cutting-edge labs:\n\n- **Boston Dynamics Spot Lab:** Work with the renowned Boston Dynamics Spot, a quadrupedal robot known for its agility and maneuverability. Explore how to control Spot using web3 tools, create decentralized applications (dApps) for Spot, or use Spot's data to develop innovative services.\n- **Smart Home Lab:** At present, Polkadot is one of the largest DAOs in the world! There are many interesting events taking place in the ecosystem as part of the on-chain governance experiment. Robonomics developers suggest that hackathon participants increase Polkadot community immersion by integrating events related to voting, new treasury requests, epoch changes, and much more, into a typical smart home system.\n\nWith our track, you'll have the opportunity to:\n\n- Explore the potential of blockchain technology in the smart home and robotics industries\n- Gain hands-on experience working with cutting-edge robotics and smart home equipment\n- Collaborate with a global community of developers, engineers, and enthusiasts\n- Win exciting prizes and recognition for your innovative projects: A top-of-the-line Razer laptop, smart home equipment, and 500 DOT cash prize!\n\n**Boston Dynamic Spot Lab Description**\n\nHere are the instructions to work with Spot: <https://merklebot.notion.site/Docs-for-RoboHackathon-b057d24828194c78bac53a3885305382?pvs=4>\n\nThe SDK is relatively straightforward and we offer an easy-to-use platform to deploy your code to the robots directly.\n\nThe robot has a microphone, speaker, and camera so you can build use cases utilizing that equipment. For example, issuing an NFT certificate based on the sound or video data captured by the robot; or exploring ideas of how you can pay the robot to perform certain tasks, like going somewhere and inspecting a part of our lab.\n\n**Smart Home Lab Description**\n\nIn the Robonomics wiki, we have prepared a guide with an example of launching an autonomous agent. This agent allows you to link on-chain gov events with smart devices, such as a light bulb. The instruction is available at the link: <https://wiki.robonomics.network/docs/on-chain-gov-experiment/>\n\nAt the initial stage of the hackathon, a mentor from Robonomics will provide anyone interested with access to the demo stand of a standard smart apartment. This stand will be available online 24/7. On this stand, developers can test their solutions and record real demonstrations of their code for the final presentation.\n\n[Join our Discord](https://discord.gg/k9G2WQWcmj) to start looking for teammates and discuss your ideas with the team. We are excited to see what you’ll build at Consensus this year and our team will be there to support you!","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.225f06eabacd884349950c5448f773cb.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.225f06eabacd884349950c5448f773cb.png 480w","/assets/static/cover.6b2ed88.225f06eabacd884349950c5448f773cb.png 1024w","/assets/static/cover.62c183a.225f06eabacd884349950c5448f773cb.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ff90d454905f007f84cdae61d216b326'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ff90d454905f007f84cdae61d216b326)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAAAsTAAALEwEAmpwYAAAOsUlEQVRYw9VYeXRUZZYvdVpIann7XlsqSaUqVVkqISsJISFAEiBssoTQLGFrG7FBbQGxRQE7KjQSoBEDIiABQpKqV%2b/VXllIQsKOgKjIqLQw3TLtOeM403Oc48x05r5KWOyg033O/DGTc887X1W99737u/d3f/d%2bUdG0d7gxjJdlpYf%2b9H/NVA/1HsM8Wq0bFv/PAIDHPC%2bhqKekpHPu3NM6nUcQ5L8KBiX%2bb7rFwoZ3jRmkwxApmNjHB11SDQ8/grh/%2btMzzz13GfIweOuPY2AYiRV88DJmGOsYWuRokfmbvKe8FC4yRokxSYwg0YRIxAy8RxDFH4rykqT4cABwx6FDN7/44t/C4TstLbevX/%2bX/v6vTCbfPSQ/EDApMac/wdWblNvPcxJLDTkN3pOspGN9cMPfhEHIDRgqIoZpUX1hkLLJKYmB2vlnJk/uyc2NTpt6atq0U3q9TN3NuepB3o8Z0/nNN999%2beW3u3ffeOedz3t7vxoYGFi8%2bByQ6scAUCKa2MHaOkhrp4YLorQUz/gxWsZp2Yi05KnfozE3wfwVGBgl9pzLzzn9rNVnnNMO2RDKw4ZU//Tq3pqa/nnzToPNnt2fl9d%2bL6b3AYCXR49%2bAR5fufL1gQOf79//eTR6Bz7evPmnxEQ/JPGhGMAtjJE3xNfP0%2b6arfvtRnV9LnFkm3rTGOKQBWvpztzzbV3zActvGcJNM9L/CAAIoy8J0YLEuQL6ygifFWALA8npwerJvStXXgRiA4A5c06np4dxfBgA%2bMpuD925821X1z82Nn4GdvzYre%2b%2b%2b6/q6l61uu1HVJWkpaMj1x2I29AUt64hfmPH40/vi39xU/zmxcz%2bPy9qupO%2b%2b%2bsFTcXqAzrWz1KeIUdjXH9IBjBRGBsyzmo3LejkUv00KuKox5oUmDWrf8aMvrS0cElJF1AIbqaoYTUQwyBu23a9t%2bePDTtubH/zk1Doy9bW2yaznyDvFiJzv9SUqo15r6c8W9Sv7ol76RVNPVzrkF1HR66tQfbk4U3XJjT8cdmBcP7OJKSZ4GRe71feTXqg3BlOfmgGhDEhhpO4DP9QBgoCtqxQ3aKztbVnAADwZ9Wqi0CHH5BR2qse0TpiRCuqc2Mad9zjrSPi2midm8E8NCcxmMigHhoXFe8hIVBGMTwU7U2iWuAKpDdRbg3jN1NtBC2hlFyEHFgm7HRq30NoCaTQ7OoxZ/Wa0rsTcvr11ihFeIbXgJAVENIDvN1vrulgGck4IcKn%2bEpLOpcsPQf8Wbbs/JNPXigs7ADCw4YPAABXMA%2bR346teZ%2ba0ovVnkGevEDO7oM1svwCNqsPH38SWXQWm3oKWXYen9CNVfWgtaepBB9NKjDA3UH8kBAWxIeWYirkRVm/jgpTQphjAxwXNqf1GW3dgrXd6OjiDIH73YN5oKIwD%2bqQsaIAVh5E0uR4o2g2%2bCoquidN6qmq6snIiACXHlIDQwAKO3Qg/zP6kBXnkeevoEvO4VN60V9e1r14Fa/oRlde1G64iq6%2bBDcQlT3Y8vNURpgBzWa9bKzXKFdG2Uq50pAoH882mYzFApNPoqNIYzZOZrJUIcccIglIoOe%2b8CNwszjI4aysSHVV7/Q5fTNr%2b2fV9E%2bq6Jk5s2/%2b/DMrVlwAJS0t7aqrO2e1Bu6JyvdrgFRaBp7gIwRJBx95CTPKmvg2HSaiCT4E85CMpMM8GC9p9bKa9aKESMYeGRw9oI3odG6IDRjoNEX5ef49ikBVGtWj4x55dOwjKpVKo9bq9QfgJwWhQnovzXn1xUGFopRXh3pmzOzbvOXDra993Lj3s4Pv3tzz1t%2bDNv7mN9f3NX62ffsn9fUfNTTcgFRoNO5BXfleH4AqsTtCtuSAzRYsK%2b1KtYVSkgLLV1yorOpJd4SKijtTU0NjS7tcmeEnpvctrTtXVnYS2pzTGcrOji5YcBbCU15%2bMi0tlJvbbjTKBOHj%2bSMajQ78fiTrMZXrkUdVf0fRgiC8qwBgRPAe6lUYE8DtHqEkzHBeChVpTDTpfQajTMZqDBQ8JSWQkRHOzAzn57fDzqNGReGl95rxEABAA1pZWdm9du3V1avfHz/%2b5JYtHy5ceBYMultZWdfbb3%2b6bt0VCHZDwycgBRMn9vxsxYXp0/vWrLkMsrB584fgPYxPjY2f1td/vHTJeZstgGEyzx8VBBOK4ARCs2beYDAZDIk8f5iiAzRUMOsVykJ6q1SULfFWGQQUWhhfHCQTJRxV/INKhVAWF3dMmNA9f/5p4FJt7WlorBDHv6yBIQBV3c88exliuWHDBy%2b/fO3VVz9au%2b5KQUF72biT0JufWfP%2b7Nmnt269DkggidXVp6C2Vq68BOwEtAAA0K5ff3XVqkuHD980GiUMCzgdv5oyObeiYvS4cTnlZTkVE0dPnjTKmbYBR4MMKxrGhzFBys7wXfng05REL6GXzPM6uJwAPyqgaN2gxMUmH0AC/BykKNhDZqG7FAo5rAGL2Tdjaq810Z/liowb27Vo4dmqCd0ZjpDTEYICgvRBKgsKO0AKMjMCthTZaou4MiMLF54G/sC4kpwcmDr1lKCXSEpOsGy12danWF%2byWNaBwcJmfyHB/DrNyIZxQdYiY1qPPVVuazlrTvASmOI0lyRDEwA9pdm/OJ8oUR60h0%2bjUEM4K6GZYQIKN8GHWgOo0ac1%2bzSQHFhD1mivRt0GLIJ4AFqC8MRrAhpdKD9jf7KlKS5OGWPhe5IQoaApUoSGReB%2bHA8TRIQkoyQZIcgIjkVIJqgvCzNGP0t6R4wUV60MDgx8PH%2bef2ScMgVSvCSUhJR6IEX6Bwew4Y0s1gVpix8knyg/SRVEybx2yhak8qJ0WpiY1INX99IJPvZuPDhOJEhvRfGuuoo1H7Wlv/a8s2jUXpwIcKwiiLwpaHZ1G%2bxRISlgymjnTRLHQvf1MLSH4Tz6shBrFSnjMZYXUcSbUyDv3SE5XTKOwUDu5UmRS5QFQMjeGzfAXfeg07HmBUmAU4pnWCcmRMriJwrbiZJOorSLdARhgZd0QXdTutUD3Ru8QVG/03HsE7%2bzsoAMN1jdW%2bmayQu0SJhlPRA5AGB0neFtp81pl0yZl3AyrFa7SSo2qxX4yaR2h/DrublZRv6wmo5M0TRsVD2bhx5AGQiQODm1KZVpJZP8puIgqxxoFDlmmChNw9Wr1baR5AkEOUZRgWEAQLkNMpETJbOjhCtMJgfI9DCR105mhL9/fAEkPhxr2bvuicstTorka0o04mZ1Se5iHRphGRAHEcd9mbnv5I9/wZC1NCnvqfLp9UuWy1arBH1Kn%2b/H%2bXA6/sbP1aNN9BE1E6rGd7%2bHPVVN7omjg1ahbWJyk8vYCnTFMv06Lewmc9w%2bFN1IkvsIQl6wINB8oq%2bubpNa/SoNUkaLqgeHM5r0KmMPDDxwJZXeTKNu5XrXezaWOIpue33h6K/9vG9HcrlLo1KRuU5Lpu1dDIcgiSzn0cUHxy947gXP2FWNU8b%2bkn5yR3nfRX/RGFmnhQwE4ZxFkh6ebyFjLyU52ZrcSvIyFCEUWFKCmyHdJos8a2VnWamfoYMUWUlTKpKcT9NdBQULKyqK586dWlAwjaJagU6qoblS8DIGCdrh0JGU%2bb4pRSLynAfDoWqDW5eM/f2%2bn9xqSdq%2bWhg/qsZknjVm1BMsE6ZiNAUMBBbKLl28YGPiie5D1b8oqN1UdryzMSffi%2bi8xtFBHSGufb6v79S16dM71CPcxuKgoabTUBJC1O7cPPns2Q9e2dSbk%2bP/j29vt7e/T7DiSM1edfwbavW7wB%2bnc1Y06m1uPpaYmM6yTTCtqKCTMwkS5/RxaT7O4VNgUMNPvSJOSI893mk0bZ1fOeVWI/r28rizOx%2bfUToRJ6JpjjyT/jWSitC0J1ZnHq0mWFXzq5fcZev9U5ZtG//ysVmBi/vzR0uIVgQAWszT8Oa5b/75xqIlJ0eqWlK29GZfi6Zs69X8BLIU/N3Nj/a%2b1ac3tP18U3vVnEBBZbDN%2b7u21tvHjt1ISmpzueRbt/799u1/EIRiLbKDMwZVXIoMfnNpfi5dwcDafAp5mLukimkOSUoW04lfr3nm08Co9m3EpKzHEI15SUX2mKwiBG/Xc7UC9zRNRQfnM7ifILypqe6isubCsc0ZOYeycg/l5DcbDBKJe4X8IAhlkkWCocBgDBPagLG6y7r1pGFmVGB2k1Sz3e7VCyIrtFGFHtLqTi2Ub//%2bTwOxv6dW9qpU7oQEzx/%2b8K91ixerRlQbsk6qOJvMpfogA7xyGPWxyXLsG5mz%2b2L/FPCytEeti9ZMe/HNDZlFBUdSzTvt5gKBfwPFT3Fsndn0LMn3cOZFestOmg3dwwCaqFNLiEbGdD4E8aEgfFaZMUl8PtQA/CprNIdxYjJFlxGat8i4AKE94UidznMHESQEjRZmpISJIbNLVgvN%2bw9eHRj4z4GBP/v816y2g1MmH//qq386dHB3HL1Sn9mtUryHJNhjZlX8Vrg0mI3YK4FUbKIMU0o8uxk3ryZMPTTvMSS/oHe46aSIYPqZMeM4kyrrU57hU%2bUhPSC9LO/lLIqxepG3SXqXj3cq20IToHmRY9u12hkOpz4n1z4yLo/lIyTdlpY8M8G8nuNbGThdwIg6PsI5JMy01eKsL63aNaZyV9647UUT6p9fu%2bPIkSavJAn2/Wx6%2bH4GFCKlxq5gWX7OFlsMIkmRBadszOkS7K9Z7E9x9g69fYslfSeX3sVaGw3J61lXD5uwwpJazyRGWIuiB8rj6TGDTSAusH%2bGH9Yw/wAAho4gyBKcjKdYjUZTxYAAUK1GY7kg1DOD7AUAE8PwCO8McfYQaQvSaSFdcjCtIPrK6%2beffVEyOV7hHW1wbo4BGKzgDJ/y1sEMDCZESYV/CJtN5rMDjEOy2NYLVhG2FlwS7wxStqNCQkVCrpu1HTSmHuYygpxzKI38XQCAX6FoprKVvjzM8OAiyJ0bRZbqdDUUdRQaCwgAxz4dW8eOCgBgQlh5u0NmraAxMu%2bSKadsz5WW/SIyaZ5Pl3ich7q1yv8NckxPbFODuJIAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Robonomics at Polkadot Weekend in Tbilisi","path":"/blog/robonomics-at-polkadot-weekend/","date":"September 14, 2022","description":"Cyber Academy is hosting an event in Tbilisi, Georgia, where participants will be able to get acquainted with the Polkadot ecosystem, starting from the very basics: a detailed discussion of all the components of Polkadot, networking in an informal atmosphere and developer workshops.","content":"import Card from '~/components/TextCard.vue'\n\n[Cyber Academy](https://cyberacademy.dev/) is hosting an event in Tbilisi, Georgia, where participants will be able to get acquainted with the Polkadot ecosystem, starting from the very basics: a detailed discussion of all the components of Polkadot, networking in an informal atmosphere and developer workshops.\n\nEngineers from the Robonomics team, Pavel Tarasov and Makar Chernyaev, will talk about the use of Web3 technologies in the context of a Smart Home, as well as demonstrate how to operate a smart light bulb using HomeAssistant, etc.\n\nDuring the report, Pavel will talk about the traditional ways which users interact with Smart Home devices, the role of the device vendor in these operations, as well as show examples of open source solutions for Smart Home local networks. He will also consider the shortcomings of the conventional smart home approach and outline the methodology of the Robonomics team and our plans to solve the existing issues via the use of distributed technologies.\n\nAs part of the practical demonstration, Makar will illustrate the main ideas of organizing a Smart Home/Office with real examples of using Web3 technologies in this area:\n\n\n1. Remote control of Smart Home devices using transactions on Robonomics parachain on Kusama. Controlling a smart light bulb that streams to YouTube.\n2. Installing a local smart home system and demonstrating the operation of this system. Registration, access control. Deploying a Home Assistant OS image with Robonomics enabled.\n3. Reading telemetry from sensors outside the local network at home. Receiving data from the sensor when the user is in another local network through messages on the Robonomics Kusama parachain.\n\nAt the master class, participants will see how HomeAssistant works by operating a smart light bulb and reading telemetry through a demo in the Robonomics dApp.\n\nDetailed program: [https://lu.ma/polkadot-tbilisi](https://lu.ma/polkadot-tbilisi)\n\nThe event is in Russian, participation is free, there will be an online broadcast of the reports - join us!\n\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Polkadot_Weekend_Georgia.62c183a.04e75db75ffb9a350f2c47730cd5c455.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/Polkadot_Weekend_Georgia.9ea8d39.04e75db75ffb9a350f2c47730cd5c455.jpg 480w","/assets/static/Polkadot_Weekend_Georgia.6b2ed88.04e75db75ffb9a350f2c47730cd5c455.jpg 1024w","/assets/static/Polkadot_Weekend_Georgia.62c183a.04e75db75ffb9a350f2c47730cd5c455.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-23340bc47ca4bcc444182243576f4ed5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-23340bc47ca4bcc444182243576f4ed5)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAHAAAAgICAwAAAAAAAAAAAAAABQcEBgADAQII/8QALRAAAgECBQIGAgEFAAAAAAAAAQIDBBEABQYSIRMxBxQiQVFhMnEVFiRCUoH/xAAYAQEAAwEAAAAAAAAAAAAAAAADAQIEBf/EACYRAAEEAQEHBQAAAAAAAAAAAAEAAgMREhMEBSEiMUHhUWFxgdH/2gAMAwEAAhEDEQA/APOURQyL1L7LjdbvbBalo8umg3PVJG5c2DzhfTusLjabcfftgTRQ%2bZrKeDeE6siR7j2XcwFz%2br4aNN4X07zzJR6ny2q21HlxNGgMasCoKM28gSEv6VFwQrci1sRXG1bLlxr9VEzPLqOCnMlLXU0jqfUnmQ5I9toCi5wHPHf94dGR%2bEEuY5dSS12YQQyVFO0rxsQGp3HAiYk/mx7fXP1jfnfhjW5dA9VHqWPyywgyCamVmjG0tdzu4i4tv%2bSBtxYtNWmk2WVseo0Aj58JIDntzju0ZWJJDba17c88fOD%2bpEkoM4loYMyNfDHGkjTiAR/kgciwJ7bgO/fGyvp8kOmaY01WTm4f%2b4j2tsZGA27T8oRY/IJwkcZe0n0WEyFpAI6/aFplFV1zSyU861zNGI6cxkO4cXBANvbn7xtrYsoXJUeinllreuwO8bbxXO1itiAbW/yPfEzIqFtSajoKXM8zcVNRJ0JGn3XiREAUlz7WFrewXFt1pp2o0Tp6oXLszm6WYdOCph2raSMhmXkqDbv2%2bcQ2J%2bGZUunY14Z3KVQ54tf6xNy%2bY0tQryUazqhBMckZI/7iLG7RSpJGbOjBlPwQbjFjXW2aiWokeOikedy8haE88AWsCBbjt9nBpUyND6yyyqojSpSUEFSottddlx8i55xE8TNSZWNNSZVSGmkragqrLCLhFDBizH54AAwpsyrPPTCQ0tHTADbspYumv7t84ijjthdU44rrO3vIYNGva/CKSLSpl8bQSMk57qDyfkHHOX1KwukrtGZFcFRMC8d9y/kvuLbuMDUOJ%2bX5hNQbzTpBvYi7yQrIbD2G4Gw/WBcXAcq5IAJ4pneC%2bT0D/wBX5tXTRVP8XDDTxSgEg9Wba0q7hf8AFCASL%2brFyqNJxa9ojlK5slPmE0y%2bSlMbPExRXbpPz6SUBII/1bjGeG9fNp/wE1prLL1gTOKuo6akQrshCFESy2sbdRm5He18KTw91/nWjdUfylDKtS1RIoqoqj1LMC1yfpuTZh2ufYkYeKbGIscOJ72sk2ymSdsodQb2rqv/2Q==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Polkadot Decoded Workshop in Berlin “Kusama Use Cases For Your Home”","path":"/blog/polkadot-decoded-workshop-in-berlin/","date":"June 10, 2022","description":"The Robonomics team wants to impact the Kusama network development with scenarios for personal use in your home! We will show: how you can interact with the most popular sensors (such as Aqara/Xiaomi) over Kusama, how you can connect up a co-working space to be under the control of a Kusama Parachain, and more…","content":"\nThe Robonomics team wants to impact the Kusama network development with scenarios for personal use in your home! We will show: how you can interact with the most popular sensors (such as Aqara/Xiaomi) over Kusama, how you can connect up a co-working space to be under the control of a Kusama Parachain, and more…\n\nLink to Decoded schedule table: https://decoded.polkadot.network/agenda/?date=2022-06-29&location=berlin&presentation=kusama-use-cases-for-your-home&tz=berlin\n\n## The workshop program\n\n### Part 1: Introduction to IoT 2022\n\nAt the beginning of the master class, we will look at the most popular scenarios where we use the Internet of Things in 2022. We will also look at the standard scheme of interaction between IoT applications on your phone and smart devices in your home. We will learn about the current problems of building IoT solutions.\n\n### Part 2: Lights up!\n\nLet’s discuss the most popular open source home assistant solution and go through the main stages of its installation, configuration and explain how to connect sensors to the assistant.\n\nThen we are going to try a simple decentralized application in conjunction with the polkadot.js extension to turn on a smart light bulb. After that we will send the first transaction to the Kusama network and find out how IoT subscriptions work in the Robonomics parachain.\n\n### Part 3: Co-working administrator case\n\nLet's consider a more complex scenario from the IoT world. You are the administrator of a co-working space in Berlin, but you left for 3 months to enjoy a vacation in Bali. How can we organize a secure scenario for managing co-working users, where we can remotely & regularly receive data from smart devices, all without using a connection to centralized cloud services?\n\n### Part 4: Robonomics use cases today and tomorrow\n\nIn the final part of the master class, we will talk about web3 application scenarios in the field of IoT which have already been launched. You can familiarize yourself with these scenarios, and try to interact with them on your own after the lesson is over.\n\n## We invite everyone who is interested to learn about the use of web3 technologies!\n\nTo fully participate in the master class, you will need a laptop with the [polkadot.js extension](https://polkadot.js.org/extension/) installed. However we also invite listeners who would like to learn more about the use of Polkadot in scenarios from the IoT and robotics world.\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/cover.62c183a.4cfe6eafd068a1ca667ec55ea4fec715.jpg","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.4cfe6eafd068a1ca667ec55ea4fec715.jpg 480w","/assets/static/cover.6b2ed88.4cfe6eafd068a1ca667ec55ea4fec715.jpg 1024w","/assets/static/cover.62c183a.4cfe6eafd068a1ca667ec55ea4fec715.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-827274415216a2a22be53935445aa319'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-827274415216a2a22be53935445aa319)' width='1500' height='675' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAABwIDBAUGCAD/xAAvEAACAgEDAwIFAwQDAAAAAAABAgMEEQAFIQYSMRNBFCJRYXEHFYEIIzIzQpGx/8QAGQEAAwEBAQAAAAAAAAAAAAAAAgMFBAYH/8QALBEAAQMDAQcCBwEAAAAAAAAAAQIDEQAEITEFEkFRcZHwYaEGEyIjgbHB8f/aAAwDAQACEQMRAD8ACojp/t/d6spuEjCgfL55B/jnOkyULMcbSNE3agyxHPbzjnTdWRYbMUjp3orAlc4yPz7anb9uF3cNum2rpeKVq0UKyX5RhXcMwCqSecZI4Hkn7a9G2jfmySF7sjzFTyHFuJS0mZPr5nlzOIGkKlAttnVLEKyJyUJJOPc4APA99JhjLzhAC/IGF8tzjA/PgfnTGzdL9Xbc0tupstgq0LqWdAQBlhkc%2bQyEj7rpzYp7ewXaiXEUWTH8RCJfm7eSB4PtgkZ99YLHbqblwNrTBOn870brTqUqUkSOHXPalTIY5WUgjB8HyPsfv7a9DDLOzrDG8jIhkYIpJVQMlj9h7nVnuO8SXN3fdQ0UF0yrODCmFMmRlsHgZI7seM5%2butJ0v0fuO/8ATpuputeCsZpv7Phw2AHY45KkY48carv3PyE7yxilKcShMrPsaxKoEeFpf9bEE/jPOiTUgD2pYYCHhB%2bXJBBXGfP051l5tlrVa29VbM8LbhSkxHKZiiFAMnCYOe48A5HJA1Avvb2eZ6Ve%2bzxFASYm459vtoWrlLoABycjHDBnsRTpCkacQf3S9m2pbk8EIRpZpTjtBwBn21I3PabfSN2/ulSvTv1JI170lriYRAEfMO4Y8%2b/kaZ2y%2b%2b3SRTxorn1VBVs4K%2b44%2bvjRH6l32O90Ctb4CKH49TXdo2wFQHPAx548/nU34gtLq5W2wyBuk%2b/%2bV0ViizTspTrqSVASTxEzHUY0oQwdfyQSWnSjUcz5yJa0bBeMADjgYPP8eNUNSeXc97sXpEjjLs0jLEgRFLZ4VR4HPjTv7FF3Z9V%2b3zjA1YV4I68YSJe1f/dTtnbCfbfS6/gJzrMxpURx7eFXEEsSQT/Dz%2bjbaMwiP0u4TB2ClSf%2bOBzn/rGjlf2VOl5pNn2gqkleNKljEgUyExK0khJ%2brH/HxoNdIerum/7TsryJHVuWoa7kQqWCs4yQcZz986JH9T1upB1wKVLb1rXJII7Vm9HPIHmyCir257VACjkDJ41tvW3XrhFuRzOvDET9PXGcnWNMV2yp5ndbIB9RP9HfFNb90fY2KLcerohFvOxsCjxKO9A3aB2zqGU/JIByARwDxob75tm40Nuoz3aMNapdaSWsydvcRnlTgkjHcOGwfGukv0e3GDrb9Kd8225SSvLIkkNqeNs%2bvI0fb63bjCthVJxwSCffXLtzc712rUrXLc08FVSsKSNkRg4zj6ZwNFs0uqdLSwPtmD0jEcOcniOVPCQlAnWPx55mv//Z' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Robonomics Hackathon v0&#58; building a smart place","path":"/blog/robononomics-hackathon-v0/","date":"April 13, 2021","description":"We are launching our first online hackathon from April 9th to May 2d, 2021! Check out the details.","content":"\n## Participate, learn, win\n\n_Robonomics Hackathon v0 is a major milestone for the Robonomics project and a chance for your talent to shine. Besides the opportunity to share an $8000 prize fund, you will connect with our experts and learn from the best._\n\nThe event will run **from April 9th to May 2d,** so if you have a team, [register on DevPost](https://robonomics-hackathon-v0.devpost.com) and start building your project right away!\n\nDon’t have a team yet? No problem, we will help you to find it! \n\n## Why sign up\n\nDuring the event, you’ll learn how to work with ROS devices and simulation, get to know the Robonomics tech stack and build your smart space.\n\nThink of home or office environments, and robotics connected with the blockchain network of Robonomics as foundation. The future of tomorrow needs your creativity. Nothing is too crazy, no dream too big!\n\n## The challenge\n\nLet’s spark your inspiration with some topics we’d love to see:\n- Networked cyber-physical systems\n- Multi-agent systems\n- Robot-as-a-service (RaaS)\n- Smart cities and infrastructure\n- Internet-of-Things networks (IoT)\n- Sensor network\n- Peer-to-peer in robotics\n\nExcited?\n\n## Join hackaton\n\nRegister on DevPost here: https://robonomics-hackathon-v0.devpost.com/\n\nIf you have any questions, don’t hesitate to reach out!\n","cover_image":{"type":"image","mimeType":"image/jpeg","src":"/assets/static/Hackathon_BLOG.62c183a.4c594d526df7be6a56f87d0effaef8c7.jpg","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/Hackathon_BLOG.9ea8d39.4c594d526df7be6a56f87d0effaef8c7.jpg 480w","/assets/static/Hackathon_BLOG.6b2ed88.4c594d526df7be6a56f87d0effaef8c7.jpg 1024w","/assets/static/Hackathon_BLOG.62c183a.4c594d526df7be6a56f87d0effaef8c7.jpg 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-ea2bf8ef455183aa26dd7e39f178e5c5'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-ea2bf8ef455183aa26dd7e39f178e5c5)' width='1500' height='676' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAdAEADASIAAhEBAxEB/8QAGwAAAQUBAQAAAAAAAAAAAAAAAgEDBQYHBAj/xAAvEAACAQIFAwMDAgcAAAAAAAABAgMEEQAFBhIhMUFxExQiMlGBB5EjYaGxweHw/8QAGQEAAgMBAAAAAAAAAAAAAAAAAgQAAQMF/8QAJREBAAIBAwEJAQAAAAAAAAAAAQACEQMSITEEEyIyQVFxkcHR/9oADAMBAAIRAxEAPwDzmoBvfB7EsObn7Xw1hyD09xaUblUcLfqeww/RD0gpBkVQBtN7m2GsSEg4RZo41Vx9QFtp7f4xacnpIhldLUVGnIpoUhDSVDOtnBv8z3Hj/WNuPaVVzKOOnTCjwcaF7KmhASbS0COHtuedbN8Q2z7dGX5Dnr3vZivo0pYZcwn05BDSQMrTRq0bbAWJC889GXnwDg9m6TMpLKBEhB5PXCGwQH/r4OemqIYPcSRFIWfatyLi/I/p3xyMxHJ6HFnZTU8VYFdUscOZ1QQvPII4lLOfpUAkk/bFizXROq9P0LZjm2nsxo6NLB5Z4bItzYAntcnETlVZJQQz1MBIlV4uQbXAbdb8lRjTNd/rJmmrNE1eT1WWUUENW0Ts8bOWUBgyhbm1ha3jCVNzbpxN77QMdWZQ1Qqq3pRbWbgksWt4wcNW0MSMI5Bt%2bO5Z2Xm3WwPHFv2wuSSQRZzQSVdOKqnWdDJAzbRIu4XW/a44xqertQaP9lmtHSaAoKeoVJYoqlaprxtYgPbaL262vhqtmqAZmVqj1mUe%2bHqXMcrJbhDUPx%2bfNz%2bcOR1sscfqCOfaDZCtQ42/yGOGll9Cpik2RyFGB2yLuU%2bR3xOrrDPCKmGTMJnEymMEkfw%2beSo6A2FuOgJth%2bzq1x3VB%2bXH4wDTo%2bZT7/srzuz3BZtt7gE3thGDAAN5GDpZ3pqiOaEgSIbi4DD9jwfzid1Lqmrz6CCGely2ljiABFHRRQFyO7FFBP8AbHRwiFTiAYn/2Q==' /%3e%3c/svg%3e"},"locale":"en"}}]}},"allPostsTags":{"edges":[{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Events","title":"Events","path":"/blog/tag/Events/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"en","tags":[{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"Цифровой двойник","title":"Цифровой двойник","path":"/blog/tag/%D0%A6%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%BE%D0%B9%20%D0%B4%D0%B2%D0%BE%D0%B9%D0%BD%D0%B8%D0%BA/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"en","tags":[{"id":"Digital Twin","title":"Digital Twin","path":"/blog/tag/Digital%20Twin/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"zh","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"uk","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"pt","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ko","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ja","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"it","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"es","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"fr","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"el","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"de","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ar","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"en","tags":[{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"Анонсы","title":"Анонсы","path":"/blog/tag/%D0%90%D0%BD%D0%BE%D0%BD%D1%81%D1%8B/"},{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Consensus","title":"Consensus","path":"/blog/tag/Consensus/"},{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Buidl","title":"Buidl","path":"/blog/tag/Buidl/"}]}},{"node":{"locale":"ru","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ru","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"zh","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"uk","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ru","tags":[{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"},{"id":"Умный дом","title":"Умный дом","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BC/"}]}},{"node":{"locale":"pt","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ko","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ja","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"it","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"es","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"fr","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"el","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"de","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ar","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"zh","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"ar","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Мерч","title":"Мерч","path":"/blog/tag/%D0%9C%D0%B5%D1%80%D1%87/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Merch","title":"Merch","path":"/blog/tag/Merch/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Robonomics в Ethereum","title":"Robonomics в Ethereum","path":"/blog/tag/Robonomics%20%D0%B2%20Ethereum/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"},{"id":"Умные контракты","title":"Умные контракты","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D1%82%D1%8B/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"},{"id":"Умный дом","title":"Умный дом","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BC/"},{"id":"Интернет вещей","title":"Интернет вещей","path":"/blog/tag/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82%20%D0%B2%D0%B5%D1%89%D0%B5%D0%B9/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"}]}},{"node":{"locale":"pt","tags":[{"id":"Filosofia da Robonomia","title":"Filosofia da Robonomia","path":"/blog/tag/Filosofia%20da%20Robonomia/"}]}},{"node":{"locale":"ru","tags":[{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"it","tags":[{"id":"Filosofia della Robonomics","title":"Filosofia della Robonomics","path":"/blog/tag/Filosofia%20della%20Robonomics/"}]}},{"node":{"locale":"es","tags":[{"id":"Filosofía de la Robonomía","title":"Filosofía de la Robonomía","path":"/blog/tag/Filosof%C3%ADa%20de%20la%20Robonom%C3%ADa/"}]}},{"node":{"locale":"en","tags":[{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"XRT токен","title":"XRT токен","path":"/blog/tag/XRT%20%D1%82%D0%BE%D0%BA%D0%B5%D0%BD/"}]}},{"node":{"locale":"pt","tags":[{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"},{"id":"Gettone XRT","title":"Gettone XRT","path":"/blog/tag/Gettone%20XRT/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"fr","tags":[{"id":"Parachaîne Robonomics","title":"Parachaîne Robonomics","path":"/blog/tag/Paracha%C3%AEne%20Robonomics/"},{"id":"Jeton XRT","title":"Jeton XRT","path":"/blog/tag/Jeton%20XRT/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"}]}},{"node":{"locale":"pt","tags":[{"id":"Colaborações","title":"Colaborações","path":"/blog/tag/Colabora%C3%A7%C3%B5es/"},{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"}]}},{"node":{"locale":"it","tags":[{"id":"Collaborazioni","title":"Collaborazioni","path":"/blog/tag/Collaborazioni/"},{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"es","tags":[{"id":"Eventos","title":"Eventos","path":"/blog/tag/Eventos/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"de","tags":[{"id":"Veranstaltungen","title":"Veranstaltungen","path":"/blog/tag/Veranstaltungen/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Mapa ruta","title":"Mapa ruta","path":"/blog/tag/Mapa%20ruta/"},{"id":"Nuevo lanzamiento","title":"Nuevo lanzamiento","path":"/blog/tag/Nuevo%20lanzamiento/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Fahrplan","title":"Fahrplan","path":"/blog/tag/Fahrplan/"},{"id":"Neue Version","title":"Neue Version","path":"/blog/tag/Neue%20Version/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Gemeinschaft","title":"Gemeinschaft","path":"/blog/tag/Gemeinschaft/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Demo","title":"Demo","path":"/blog/tag/Demo/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"ko","tags":[{"id":"로봇공학 파라체인","title":"로봇공학 파라체인","path":"/blog/tag/%EB%A1%9C%EB%B4%87%EA%B3%B5%ED%95%99%20%ED%8C%8C%EB%9D%BC%EC%B2%B4%EC%9D%B8/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"},{"id":"XRT 代币","title":"XRT 代币","path":"/blog/tag/XRT%20%E4%BB%A3%E5%B8%81/"},{"id":"RWS 令牌","title":"RWS 令牌","path":"/blog/tag/RWS%20%E4%BB%A4%E7%89%8C/"},{"id":"质押","title":"质押","path":"/blog/tag/%E8%B4%A8%E6%8A%BC/"},{"id":"新版本","title":"新版本","path":"/blog/tag/%E6%96%B0%E7%89%88%E6%9C%AC/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Токен RWS","title":"Токен RWS","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20RWS/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"},{"id":"Стейкинг","title":"Стейкинг","path":"/blog/tag/%D0%A1%D1%82%D0%B5%D0%B9%D0%BA%D0%B8%D0%BD%D0%B3/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}}]}},"context":{}}