{"hash":"e8b400c290966916122c87eb2807cce3a688f6c2","data":{"TagPosts":{"title":"Web3","belongsTo":{"totalCount":19,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"title":"Introduction to Digital Twins","path":"/blog/digital-twins-introduction/","date":"August 23, 2024","description":"Digital twins are a powerful concept in modern technology. This guide will introduce you to the basics of digital twins, covering their history, types, current industry standards, and potential applications in web3. Whether you're new to the topic or looking to refresh your knowledge, this concise overview will provide valuable insights.","content":"\n\nWhen people first hear about digital twins, they often think of computer models. Even experienced robotics engineers sometimes make this mistake. It's understandable because for a long time, computer modeling has been used to design things like cars or factories before they're actually built. Think about a 3D model you might see on a computer screen. You can look at its shape, figure out how big it is and how much it weighs, check how strong it is, and even run tests on it. But here's the thing: this isn't really a digital twin. So what makes a digital twin different?\n\n## Models and Their Types\n\nA traditional engineering model is basically just a *blueprint*. It doesn't describe one specific object, but rather a whole group of similar objects. (When we say \"object,\" we mean anything that exists in the real world and takes up a particular space.)\n\n<rb-image zoom src=\"digital-twins-introduction/eng_1.png\" alt=\"Robot Class Model\" />\n<p style=\"text-align: center; \"><i>A model is a description of some class of objects. It can be digital, but not necessarily. A model is primarily a description of an abstract, rather than a specific/physical object.</i></p>\n\nWhen a system is built using a blueprint or engineering plans, it doesn't stay exactly the same forever. As it's used, it starts to change bit by bit. Over time, it can become very different from how it was when it was first made. This is why it's important to keep updating our model or description of the system. We need to make sure our model matches what the system is really like now, not just how it was at the beginning. This helps us when we want to think about the system or use computers to work with it. By keeping our model up-to-date, we can make sure we're dealing with the system as it really is, not how it used to be.\n\nThis is how we come to the need to distinguish between general models (or class models) and digital models (or instance models). A general model describes a class of objects and its main properties, while a digital model adds to this description data that allows us to judge a specific representative of this class - its unique name, identifier or serial number, position in space and time, calibration coefficients, and other data that allow linking this description to a real-world object. This is why a virtual world cannot be a digital model if it is not associated with a specific physical asset, and actions in this virtual world do not lead to changes in its parameters in real life.\n\n\n<rb-image zoom src=\"digital-twins-introduction/eng_2.png\" alt=\"Physical asset's model\" />\n<p style=\"text-align: center; \"><i>Multiple physical objects can correspond to a single abstract object.</i></p>\n\nWe started this article with examples from technology and manufacturing. But now we're using broader terms like \"systems\" and \"objects.\" This is because digital models can be used for more than just machines. In fact, anything in the real world can have a digital model. This could be something as small as a living cell or as big as an entire ecosystem or even a star system.\n\nLet's provide examples of digital models from other domains:\n\n| **Physical Object** | **Class Model** | **Digital Model** |\n| --- | --- | --- |\n| Citizen | Standard passport format | John Doe's passport |\n| Patient | Medical reference guide describing disease symptoms | Maurice Bruchier's medical record |\n| Automobile | BMW X5 User Manual | Maintenance records for BMW X5 (serial number: 29591376838) |\n\nThese examples are intentionally simple to be familiar to every reader. Note that all these examples mention models used long before the digital age! This illustrates a key feature distinguishing a digital model from a conventional one—the recorded history of its state changes over time, preserved on some information carrier. This carrier could be anything; data might even be manually collected and written in ink on paper. So why weren't these called digital twins (or models) before? The primary reason is automation—both in data collection and in the computations performed on this data.\n\n## Digital: From Shadow to Twin\n\nUntil recently, humanity was quite limited in its ability to work with information - to store it, copy it, keep it up to date, and perform computations on this information. Books and scribes were expensive, and libraries regularly burned down. In such circumstances, it was not possible to keep records of all objects in the surrounding world on paper. The computer era brought about radical quantitative changes in this area. Literally everything increased: the volumes of stored information, the speed of its collection, and the ability to quickly process and transmit it over communication networks to any distance. All of this together provided unprecedented ease in creating digital models for literally anything, and most importantly - human involvement was no longer required for obtaining and processing information.\n\nPreviously, information about the operation of devices was entered by people (for example, into some kind of graph or table).\n\n<rb-image zoom src=\"digital-twins-introduction/eng_3.png\" alt=\"Digital model with historical data\" />\n<p style=\"text-align: center; \"><i>A model of a physical object is a description of a specific instance, manually compiled and incorporating its operational history (log or datalog of historical data).</i></p>\n\nOf course, this was time-consuming, expensive, and led to errors in information transmission. The addition of microchips to devices and the development of the information technology industry made it possible to continuously collect information without human operators. While devices used to be released and then lived their independent lives (including modifications), now each smart device can provide feedback about its state and record historical data. The digital model can receive up-to-date data about the system's state automatically. In this case, the digital model becomes a *digital shadow* - a log of changes in the system's states during its operation, collected autonomously.\n\n<rb-image zoom src=\"digital-twins-introduction/eng_4.png\" alt=\"Digital Shadow\" />\n<p style=\"text-align: center; \"><i>A digital shadow is an automatically compiled record of an object instance, including its historical data.</i></p>\n\nIn the case of living people, digital shadows are user profiles on various digital platforms - online stores, social networks; for organizations, it can be the history of bank account transactions; for computers - various program operation logs. In Robonomics, a digital shadow is created by calling datalog, which adds another entry to the history of changes of the physical parameter we need.\n\nBut where did the concept of a digital shadow come from? Why wasn't this automatically collected log of system changes called a digital twin? To understand this, we need to ask ourselves why people keep records of historical data in the first place. The answer is simple - accounting allows us to understand how to influence a physical object to obtain the desired behavior. To implement a full control cycle, we need not only to be able to automatically collect data but also to automatically make decisions about changing operating parameters. Significant progress has also been made in this direction - humanity has learned to automate the calculation process, which allows predicting model behavior with changing input parameters. With classical models, calculations were performed manually - it was necessary to formulate the task, describe its conditions, and solve it by applying the laws of natural science and their corresponding mathematical equations. The automation of calculations provided the ability to simulate the model's operation, that is, to make it interactive.\n\nActually, a *digital twin* is precisely such an entity that automatically receives data (collecting a digital shadow), performs calculations on them (making decisions about changing the state), and then carries out some actions on the system.\n\n<rb-image zoom src=\"digital-twins-introduction/eng_5.png\" alt=\"Digital Twin\" />\n<p style=\"text-align: center; \"><i>A digital twin is an interactive model connected to a physical object that can automatically make decisions to change its operational parameters.</i></p>\n\nIn other words, it's a working computer program or simulation model directly linked to the control object. If the simulation model is not yet tied to the control object and lacks a unique ID, serial number, and operational history, it is called a *digital twin prototype*.\n\nDigital twins are directly related to the so-called 4D extensionalism - an approach to modeling the world where objects are not three-dimensional, but four-dimensional - the dimension of time is added to them. Such models reflect not only the geometric parameters at the time when the system was released but also its entire history throughout its operation, as well as its possible future(!) states. Moreover, data collection is carried out not only during a short period, as in classical control systems, but throughout the entire life of the system. Systems that allow linking different states of a digital twin over time are called a *[digital thread](https://en.wikipedia.org/wiki/Digital_thread)*.\n\nSo, after a rather lengthy prelude, we can summarize all of the above in a relatively concise definition:\n\n> A digital twin (DT) is a digital representation of a physical entity or process modeled with the purpose to improve the decision-making process in a safe and cost-efficient environment where different alternatives can be evaluated before implementing them.\n\n## Basic classification\n\nDigital twins are mainly distinguished by the time range in which they operate and how much data they can consider in the decision-making process about changing the operational parameters of their physical world counterparts. The terminology and classification, as in any developing field, are still being formed, and there is no single established meta-model for naming different types of twins. Nevertheless, we can already identify the following main categories.\n\n### **Reactive twins**\n\nThey perform operational control, continuously receiving data from sensors and changing current parameters in real-time. This type of twin includes *Model-Based control*, where a simplified model of the controlled object is embedded in the control program - for example, an onboard computer (embedded system) working inside the object of its direct control, which is very limited in computational resources, so the model of the object embedded in it must also be quite simple, but sufficient for effective operation. However, unlike a classic control program, a digital twin can exist \"separately\" - for example, in a virtual machine on a remote computer or in the cloud, so the simulation model embedded in it can be more detailed and therefore more accurate.\n\nThis variant of digital twins can also be called cybernetic. Cybernetics as a science describes control processes in nature and technology, and since any control implies a controller and a controlled entity, the digital twin is essentially such a cybernetic control agent.\n\nA reactive twin operates at a fairly low level. Its program must be able to interpret system service information - for example, temperature sensor readings of the onboard controller for internal use, to prevent overheating or other undesirable situations. The feedback method for influencing the physical twin is \"fine\" tuning of parameters without changes to software versions or physical construction.\n\n### **Digital siblings**\n\nIn literature, this type of digital twin is often referred to as \"what if” twins. These twins allow simulating some hypothetical situations that may occur in the future and take measures to prevent negative scenarios or improve efficiency. Unlike the reactive twins discussed above, which have a direct connection to the control object and are presented in a single instance, situational twins can be copied and deployed in any number of instances on any number of computers. The \"detachment\" from the control object lies in the fact that the simulation model is placed in a virtual environment where information comes not from real sensors, as in the case of reactive twins, but from a virtual reality created by us to reproduce a hypothetical situation, and the control action is carried out with the simulation model itself, not with actuators like motors or heating elements. These twins utilize external or cloud computing power, and therefore can take into account a much larger number of parameters than reactive ones.\n\nAlso, in this case, it is possible to change the course of time in the simulation model. Reactive twins must be able to respond in time to changes in the state of the physical twin, so they are forced to make decisions exclusively in real-time conditions. Situational twins are free from this limitation and can use, in addition to real time, simulation time, which can be both slower and faster than real time. Time slowdown is inevitable in cases where it is necessary to take into account a large number of parameters and, accordingly, perform a large number of calculations to use highly detailed simulation environments containing very accurate physics engines and environment rendering. Time acceleration helps in cases where it is necessary to produce a large number of simulation runs - for example, to form a dataset or for reinforcement learning.\n\nThe feedback method with the physical twin here is software updates - both system and decision support. For example, during multiple launches of the digital sibling, a program being developed for a robot to assemble a new product is tested, after which this software is loaded into the digital twin - the robot and production receive a new capability.\n\n## Industry's State of the Art\n\nNow that we have defined the concept of a digital twin and its main types, we can ask ourselves how these twins should be designed, implemented, and used in practice. Since a digital twin is a reflection of a physically existing system, the ways to describe them depend on how we understand this world as a whole. This is why the digital twin movement grew out of modeling, simulation, and predictive analytics systems, which reflects the actual state of affairs, because in reality all these systems are usually subsystems of a digital twin. In this regard, we can distinguish between the domain-specific and informational components of twin description methods.\n\nThe domain-specific component is related to different ways of representing knowledge about the system - for example, even a geometric model can have several variants - a CAD model to reflect the system structure, a dimensional model for movement simulations in physics engines, a simplified model with PBR textures for game engines, a model for highly realistic rendering. Additionally, models can be nested within each other - for instance, a car's gearbox and the car itself are often developed by different companies, but during simulation, the car model should include the gearbox model and interact with it in some way. In this regard, we can highlight the [Open Source Modelica Consortium](https://openmodelica.org/home/consortium/), which develops open standards to exchange dynamic simulation models such a [Functional-Mockup-Interface](https://fmi-standard.org/), methods of composition (see [System Structure and Parameterization](https://ssp-standard.org/)) for multi-domain modeling and distributed simulation (see [Distributed Co-Simulation Protocol](https://dcp-standard.org/)).\n\nThe other component is informational. It is higher-level and describes software interfaces or APIs for accessing information about the digital twin. Currently, there are many diverse standards, among which there is no clear leader. Now we can highlight the following key trendsetters in this direction:\n\n1. [Asset Administration Shell](https://industrialdigitaltwin.org/en/content-hub/aasspecifications) (AAS) by Industrial Digital Twin Association\n2. [Digital Twin Definition Language](https://azure.github.io/opendigitaltwins-dtdl/DTDL/v3/DTDL.v3.html) (DTDL) by Microsoft Azure\n3. [NGSI-LD](https://ru.wikipedia.org/wiki/NGSI-LD) by European Telecommunications Standards Institute\n4. [Web of Things](https://www.w3.org/WoT/) by The World Wide Web Consortium (W3C)\n\nMany of the mentioned standards are based on or strive for integration with a technology stack called the Semantic Web. This technology stack was proposed in the early 2000s by the founders of the internet as a response to the challenges faced by the first version of the web, which it did not adequately address. It turned out that it was not enough to simply physically connect computers to each other and ensure the transfer of information between them. For full-fledged interaction with each other, systems must \"understand\" each other, that is, have certain agreements on how they describe reality, which goes beyond the classical OSI network interaction model (on which the modern internet is built) and adds new levels to them. Subsequently, based on the set of Semantic Web standards, semantic interoperability standards also emerged, prescribing methods for aligning information systems with each other. These include, for example, ISO 15926, known in system’s engineering communities, developed to describe the lifecycle of complex systems, but which has not gained widespread adoption.\n\nThe internet has fragmented into large platforms or ecosystems, each reluctant to achieve \"mutual understanding\" with others. As a result, key industry players are hesitant to support semantic integration standards. This administrative, rather than technical, barrier prevents effective interaction between systems. Digital twins may face similar challenges, potentially unable to \"understand\" each other due to differing standards. Web3, with its emphasis on legal aspects (the administrative component), might reignite interest in this topic, potentially leading to a new evolutionary stage.\n\n## Linking Digital and Physical Assets\n\nBlockchain networks, as a significant part of web3, were initially formed around the financial sector, and their physical embodiment to this day are database state holders and validators. Both types of devices are nothing more than computational nodes that do not directly change the state of the physical environment - they have no sensors or motors. Unable to directly change their \"habitat\" environment, blockchain networks become focused on developing themselves and turn into a slightly more advanced, but still financial bubble, which raises doubts among the general public and hinders mass adoption of the crypto industry. Nevertheless, the resources that this industry has absorbed at the moment can manifest themselves constructively - in the ability to change the world and solve those problems that the modern global economic system cannot solve to this day. Including with the help of digital twins.\n\nWhen we talk about the ability to change the world in the 21st century, we primarily mean robot agents, so the topic of digital twins and their reflection in information systems is extremely important for linking the world of relationships of private cryptographic key owners (which is formally what blockchain is) with technical systems that are developed and built by people. Blockchain in this respect is quite simple - it usually abstracts from the semantics of the information stored in it - it does not endow transactions and accounts with any semantic content. Users fill it with semantic content by creating named assets (tokens) that reflect some idea. To this day, tokens predominantly reflect the community's faith in a particular company (in the case of Governance) or some expected utility (in the case of Utility). Moreover, Utility tokens are usually concentrated on IT services, that is, entities comparable to the blockchain level. And few try to make a token that could reflect the physical state of some real system. The physical state of the world is de facto assessed by market participants, often relying on unreliable and often contradictory information. Oracles can only partially solve this problem, as they can also be subject to distortions. This is where the growth potential of web3 and the mission of Robonomics lie - in ensuring that the physical world is directly connected to markets, and not through intermediaries in the form of mass media or asset holders.\n\nIn relation to real-world objects, blockchain assets can play different roles. Fungible tokens can be similar to macro-characteristics - they reflect the state of a large number of agents. Just as the temperature of a gas reflects some average indicator of the entire set of kinetic energy values of gas molecules, the token rate reflects the degree of society's interest in a particular project or development team. Non-fungible tokens have a somewhat different nature - this is a record in a decentralized registry reflecting some unique object that cannot be divided without destroying it. It is this property that makes NFTs suitable for real-world objects or digital twins. An NFT can act as a unique identifier for a system instance, containing a digital passport, a link to its simulation model for running simulations, and a datalog of its changes in the past.\n\n## Web3 as Internet of Digital Twins\n\nJust as the historical internet came to the idea of the necessity of a semantic network, Web3 will also have to take this step, but bring it to its logical conclusion. And there are already certain progressive steps here.\n\nIn particular, alternatives to DNS have emerged in the form of Namecoin and ENS, and immutable content-addressable resource identifiers (in the form of IPFS hashes) have begun to be used as links, guaranteeing the immutability of content. If we look at the fundamental standards underlying the internet, we can notice how, for example, in the [list](https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml) of universal resource identifier (URI) schemes, in addition to traditional http, https, ftp, mailto, new ones have appeared - such as ipfs, ipns, web3, bitcoin, ethereum. Yes, web3 still uses the IP network protocol to connect computers to each other, but it already allows for significant abstraction from it, transferring identification to the level of cryptographic verification. The network has ceased to connect impersonal computers with IP addresses, and has begun to connect people as owners of cryptographic keys. You can be located anywhere, but having a private key allows you to be connected with other similar users regardless of their location, including transferring value to each other. This is particularly relevant for mobile robotics, where location can be highly variable and dynamic.\n\nThe aforementioned semantic web stack, as well as the possible reason for its failures, was largely built on the original foundation of the \"old\" internet. For example, on DNS, which is actively used to identify URI resources. DNS is a global, administratively managed routing table through which users could access network resources via human-readable addresses. This feature cannot provide the necessary degree of reliability when describing models of real-world objects for the interaction of automatic systems. For instance, when referring to any model (or prototype) of a digital twin in the form of a resource with a URI in the form of a domain, we can never be sure that the content of this model will not change to something radically opposite. This may be a potential growth point for web3 as a kind of interface to unmanned robotic systems through their digital twins. For example, we can describe a model of any system in the form of multi-nested [IPLD](https://ipld.io) structures (each level of which can describe a special semantic layer in the system model), record their addresses in the blockchain, and be confident that systems and devices relying on these models will never be \"deceived\" regarding their content. This can become a reliable basis for communication of autonomous automated systems in the future.","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover_eng.62c183a.cafb5ec8ecf175ade06d92bfac3c7b7f.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover_eng.9ea8d39.cafb5ec8ecf175ade06d92bfac3c7b7f.png 480w","/assets/static/cover_eng.6b2ed88.cafb5ec8ecf175ade06d92bfac3c7b7f.png 1024w","/assets/static/cover_eng.62c183a.cafb5ec8ecf175ade06d92bfac3c7b7f.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-6c4cc65a702044f8e5ce32a21c1fc79b'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-6c4cc65a702044f8e5ce32a21c1fc79b)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAATqElEQVRYw3VYCXSU1dnOOe1f/Y9VFAxJJjNZZyYzIfu%2br2SSSWaSzGRhRymy1EpFbYVja/vXtUUFsb%2blAcWqCCIgiCiQBEL2AIZsk4SEEBYR2WUxQSLM8z/3fpMEe/rnnJvvu/e7y/s%2b7/Mud9wMuZ1ONuht3c6ggi4YTJ0w5LFxTGfvRpC5S77LlifnjX0fH3OM9%2b%2belzu%2bl9hHX%2bz46f4c01q6EJTjGuM3vdWBIMtP5RB9feFda13zRPvJWNG/rRVjPFPqdZcsQrbRMTcK79QXdwtlnYGzeqUyYoJYqCvthnZGr3yXYzxAO61HtiAxZnfN4xwxd2yezbVOvjuUOSVirGdsji8FyPx1P8qeG0QAFdEKQYuV/XVlPT89k%2bvE%2brExMW9mrzSQIq9Dvouxu%2bf8v/JP75HvYsyNlnEG5XcJdJxiUGwkkHKNKYcI9GktOcamLyNgfOrMimWFFfUU0Dg6J09BXq5z7SWaAMzIuT6ZHXjylVM45PgeexquYvu%2b7%2bS%2bQf9pHfeUTCxQ3mWzdI2xc%2bw8AUTRv60r/Q/rSsbXiaebtrxHUj/I2iWfQjlDiQPB1i4YC8U4USvvkYs5B9p8B9QxDYhMrUdUWgOC42sRk9EATcQBBAi6WhXKCXTHBOc68RQCGYq7oMpow9ubzmHw9DD21l1B34khRJfznLwOguQYo%2bgo9QUjlH2UvSUb7poj9teNymhRlNO5WCEVtSjnCz301vG%2bAM2NmzkFLfjBaRDUsvZAZe%2bFV24XNHk8sFChkhBCx0Vh5d1IKzkMU/lB5JYfQlZxM/LKDiLddhBRszjPqqwZpZve9S4O1k3rhaF8AFrbAOLmnMDCl85hwcvnYFv6NfyLjsFYdpzu1K/ML1SaUEK6hHV8TO7rmiNAkfIJaxex2QlEKWWdfRQG8S6ajfNnHYWe5wcVK4yWbkpXcCNCTrm4tNvpl9OFCEsTnn6pFSvf68ecpa20Sjv0BaQW/VCV3YknXuzDnds/4Or3I7g%2bNIIbwyO4euMWgDv43w0noc7uIHOUYKQjm8asYqHghUegjngPGuNaeAWtxQRtBSbw%2bbBuLTTB6%2bBt/Cd8cyqpVM%2b4JUsV35XWFlYrcoxT27W3ZIgAK6sV/rFN8E1ugU9iM3xjmuAX1wy/hGaoOebHbwEJLdCbO5Q4QKO4EQ2ngZtq7D1O81IHjnSdQn9fH86fv4jr16/h2RWN8KOvBJM%2bHtZuPPnqMYg/5x0n222M3PoBIyMjcqxixxmoTARABByrQl1JV0E721EEZNfinonF%2bFniIvxXyuO4N/Yx3OtXhnsMs/DzgmfxswA7Juv/CkPpcVqpU7G2oK2te9z67I/GJf0YO7ulZX1i65E59QAKSxtRzGaxNSAhbT9ik6sxfXYLCoobYAirhK%2b1TbJEAmAwdzqD87rgl3nEuX5zO65cvoyevjNobOnEiVPn8dXhdqRMOwI92aEydeG3EoDbcPL/xYsXcfr0aVy4eJm9H/HPT8/AO7sdwa7UKVOaTFUdDKIUNLMBD3gtxgP63%2bJ%2b3ZO4z%2b83sv3SayHuC3oK96vnQxVaAWNBH4K4RqbO0RSb95/TsIwFos%2b5AfFN0EdXwxhXi5DEeoSlNMDIZ3B8I6IzGjElbj98I/ZDl32Ee7jSoHZ2r1NXInzjiPPzqm4MDp7GpUtXMHzzB3w/dBNDN64ge34LAgp74EVKLnlrkOa/iStXruLatetkynkXACN4e/NJeAkBXUFKWCpwdq9kgc6mWCqwvJ0gHYTWfBghZUdoiSOYYjuC4MKvoMk/zDjRNZY%2blTTWM57qyKjxVOqQgW%2bsL%2bJXmQP%2bZccQwH1C7Id4ZjPPboZP9m6oc6hDeT8CSzvH58sYUMDoX94LDRnw3taTuHT5qlSooaEBFy5cwMZNG5H%2bKDczOeCd3oGlrxyTyp46fQbDw8NwOp24efMWnLe/x7qPv4aK1jAKy5uV9BQw7ygC5x6F9lE%2b5xyFel4//lxxDturr%2bKL2mtMhcNoaP0e7T3DmPeX01BN7UTw3anU6viJ9aXfu/aWKa2gy8WAdgJyCtqUdQiPycG8Rcuw/6szqG%2b/gLIZ8%2bHln8p03YRgyzEE5baP1StuDCpOAyP7ZHuvc9nKI7h0tgenTp1EW3sHvj49iOaD9P%2bZpNb0o/BiZfXkigECcAu3Rn4kUy6RCVdw5sxZGQQrtnwNL%2bHvM3vH8nIAFfd/4hh8WfR4P3IUKz69QPBu4vzlERw7eVPGjtt3nPJ55dqPmP38CahF6rIr1h8tsHR2xzgbRL/sriKHqVU35ww8U1YjMiIKCQkxSEqKwuJf/wrTphUiJTkBURFGaAKT4ZNbC93MQa5V9pUMCM7pQICp01nwVB/e3XIa3X3ncePGNVy/egl/WdUBdWobppBu3qksYF7ol/5%2b%2bco1CcDBgwfR3X1UKrBmwyk512BXymDj1A5J04DH%2buBP6/9920UGzTu4eGUE9YeuY/X75/DBZ5ewaeclsuk2bt92wtE/jOlLBxgwGQOE/%2bcJi4uAJyzGaJ/rUPoivbEQM%2bS0w1DQD0362wjS6REfH4v09DSExMyEh58dnoFl0IemIToyFAnxUQiOsrCWaYTRJGTsYAyY2cM6gDmyqN/pn78Lkdb3cKj1JH4Yuoy3t3TCu4ARs7gPRhYq7syzv3tjQCp75/YIvvnmLLbv%2bAxDQ0Ny7P2dZ%2bBFMAUDZPQXlRkt6EWkn379a4z%2bDZ75AQVLjsGTVNbwmyeV/cPb3%2bD02Vs4xVb/1XWEELhAUWLn8fzkJoLJ9JXahCnpzTCmNyEwv02yIcjeB01hDQKN4bRyKEJDDNAnPcPSup/fBiUzAgvrEBFvRUZmFmIig2BI/hNrkeMsnbtFFuhyam0diLe84MzNM2HxghkMbGexYcNH2LJ9O5LyFjIqU4CCXlm/Fz7VizUfnkLLkQtoaqxDW2sL2tqOYf22rzH/edKdVg8qdoyVqiIeeHPdq2vPYmj4Do6dugkzGeGdzmxhVwKmkd9F/60PzuHMuVuoqr%2bK2Dm9FJw0Tz2EaCqcnHcYEanNyCxsRYqJAS2xhZYnA%2bzH4ZOzHX6%2bgXju%2bedR/tga%2bGXz3AJx/xAXMMEQFliZ2xAVHQ2rNR/5c9%2bFfwkBYqXrFlg66IwxV8BemOm0FFhgNlvgcDgwd%2b5cfLL5E0wvzUdc2qPQFYoy1gHf8j48kHwAW3e2YXCgEztqjiP50cN4aGo7NCU9MIhAJaq3WcplSKxRkQl/33JBWl8AEFLmquREDqeljbSkmoHsb%2bu/RVffENq6hxC3gG4jLmnFbZgYuRoPhr2GiSGv48Epr2FCyj%2bYlVpk7texovSfuh0BAVocanfgubcYq5iKg6Z3u4odlufTBqAu%2bAzukz3w6ed78czqdhlnhGxuAbZ%2bZ2rhcygpNjst1iKkpaWhtbUVCxcuxKZNmzBz1lwsmD8TMbkreAEaYBTuQYr1Kfxh%2bePY8EkDAq2s7ljbB5vbaLF2pjc%2bs1sRQNfRE2ER0dVkwsqPzuMsrXuIyoVOF75MwYqUdBZMBmh4QXp61Rlc%2be5H7Gu%2bRpcTdTwVsLTh3vDF%2bEXII/iF8RHc416Mex%2b0wi9jN%2bMA03cJ40XKVgRq9ahYvx6L/1DPEp77l3Up8UOW4H3Q5TQg2zQDH274F8oeZ5WYw7N5hhtvdM5syxIUWfOchUXFDCDp2LNnD0wmE1588UVs3boVzy5bBtPULISYv0BU7loUW3ORn5%2bFiJhXkEi6pUw9iMikZmSYWxHCcjPNdBjxaTyEhUkw44Yvlf3jum9xnFG/qf0GTMwIPlmsGO1KrSBuiOqcTpQzA6zdehEvVJxFINmkz2%2bFJvsz3Kt7DL9QsWL0moZ7PEtx7y%2btDNq1LM9PwGDth3/aFsQlJiE%2bLgphCXPhT1CNVsX6OoItbq6hJZ1Y9uYRLP9bLaxLWqEu5l1BusC0LqepaDHsxQVOi8WK3NxcrFu3jr5iRW1traTtJ5s3IT83B9nW6ci1lqGkKJfvv0ZA8mb4h7wIXfzr8I9YAZ8pL0ETzlI2bhUrslUMVPRTFllq3vLmvXwS3139EcdO3ERr7xAySHG1yOHitwVayY9CJ83vQwQBSV1wFEG8NKlzduDnfqWsHJ/Cg0HLMMHwLCb4LsUEn6V4KHs1VAU7yKI%2bgnUICalFSE6MkylQNaWMQU64Yb9yCRNAM%2b3FlrUgdNphRM/vQqBFKczc9JZ2Z451AWwEIDfPLBW32%2b1YsmSJVH54eAgvr/wAprw8WPNzYbWYYbGaYbAcQHjuC/jVE28h1/YUSkvysOrN1/H4bxYgNTWBuTeRcYMXm%2bIBBLOE1hb10g0u4gemQfF3nECYFtF64u6fr1R/4kcR8a5lzg%2by9cHPVI37Y/8C3/wGxoJeVnLKbTOQge3%2b9L/BI%2bUdVpIsshjQjLk7yLosxMZEImKKFipjGS3fIW%2bI2mnKtVhrV5QWv0TJJ/tkQLczs2ARzKZMp9lcIJUvLi6W7b1/vY/lv1%2bCoNTXEW1%2bR1GeQEQUrafFvkVi3ot4462PUTbnebyzdg2WLn0a//jHP7lHCTIzp/LQKvjN64Xf7EPQzCedy9vwzuaLuOkC4bXN38KztB1GccMTypV3y6JGy2u1wcIr%2bZN1mPzZFvh9vA2emz6GF4Oyx0d8btoCz%2b1b4bmsAfqyPgZUxp6ZJxCQ9wlCQhKQmJRId4iDP8/XzTquxIHpDMplysVKN1MJ0DpeiNwCzL3OOPNL9GuT024vlYrPmDED7u7ufLczLc5FRMFqbn6C19xdsmkZXAKmnURY%2bp%2bQkRrJwJmOlStXYeGiRSigG5nNeYhLSGBA/BwPrfgSqs83wOeLjbjvpe0Io9/1Dg7zHvEjXll/lqUz0xRLUy1vfzr6rJ6lsGRCRhd8ZxyG6pl98Fl6AKrfH4Dmif1QLauB%2bvc1HK%2bCesEh%2bXuiWKu1M/LnD2KSbjrlNuPLWpbUpU3Qiu%2blXXJvnaUTgbwv6MR1uET8DMfLkEd6yx1txrvCugyCRcjKykZFRQWWL1%2bOirXr8BuWk8a0l1lmNsErrVE%2bvVOqSb9W%2bvkzyMmMRWJCIhYvXICVb7yOyPAwLFywAL/73XK4h3yAyZZaTDYxBRV9iYez98CQVofmtus4e34Ef3xzEA9F74Mmah9USQfglVwDz4w98LBUwTNzNzxzqpjS9sMrsRKeJn5Lq4YqhsonNEIdXgvvhFrKRHASalhH1OLhuAOIyFiGjz7Zhu17WCtk7YZHUh1UGWIeG%2bd4ZbiemXXy3W1yUsMdHS8Qdluhs7S0dCwIir/zFy5i7uwyhCS/DI/YBqgSKVAcWzRbUj0CYp5AGH0uNDYF8SnZSMspgDEyDvbp87BoyXLOrYA6rA7ehip484rqrq9EXF4Deo8PQ9yn3//sHCbGVkEVtRdesdV4OHcPJr7/IXx2boL3pxvhtW0D/Pjuvu1DeG7dAI9dG/DgzB1QhVXBI7MankmUg%2bs9Uwkg7/wTkvbgf1bXoa7RgS8qW5DzyD48GLWfQO0jiAQyQWmeSftlXzzdPJIa72iT32EWGAUgD2vWrJEAnD37LR6ZU87y8xV4JDQR/SplIS3lHb0HmsTtUKXtgDpyK1TR9MuUT6GJ2QaPKRsxKXYjfBN2wSuGgmYegDq9Bv%2bt343n3%2bjnPeMOHH3DOMecH88r6yTjXu7BeWn74Z7zBYHYhUnFu/FwPt9zPsekot2YZP0S7qZd3KuaStRIEKRSQpaoakyO2Q8t2dLQ9g027qxGY3sX3ninD/cZeBVOIbuSahQAXGvkk2NunpF1t3Xx62CzFUkA8hjkVq9eTSFvYGDgOOYSgNC4l%2bBJS6riSMFwWpMCe8UQ1egDtC7HQrlZPCkZQh8NYj%2bW71G1UGkr4ZVSQ0o3wCOvHhMpQN3h75jnT8AjpAoNzVfw5xX9uM97F3xCKsmEaqi5XhNQCbVxH7zD9vMGx3cdz4yskd%2b89XvlPK9Yfg/aQyAq4U1lHgjYjTmL6/FF/QA08TtRNr8GexsG4Je8F57hXBdeJdepaBAVwVZFsB9dTQbE1t/RJr0rAbDZbBAgJCYmQqPRQMvbVaElB%2bFZKzA5roECuQ6nUioC4B3CPqnrlUzFIyhIKIERdEsQwlfKJtEWtIvbBzVbRkkLfNh/gMJHZNUhvqCRYIi5wr24Np50Dq%2bUTewrGCT7UYLqNYrgoZUSALG3eBfKeZAVQVl7EUzlJ4bsY78a4VMJbJTLWIL2XCPlj3O5BJ9uHvEEIJ4uYC9yihRYUlIi44CoCLOyprI%2bYNpLfpW0pkW5qaCNQNCbQnvFKzQSrBgTigcJesoxCi8OkkKK75FVDHpUiGs1VMSdbRIF8h6dL4QjOPJ9tD%2b6X5hiMam0%2bCbApWKeKQooAuzJDKjuiXQ3154PRwk/r5HrxBqpuDAI1wkdJACekbW3/RM/gMVicRYWFspCSDTBBhvzeZHVxCD4V0xOapIAKIe7/C/pLmF5yKgwsokDhbBR1eN9KufNQ71dfW9hkUSXgq51cs3de4xaznWOYMhPzhUxJlU5R7LOJYc4Sx1W6QKxRjHU6BmjcSBGABB/4I46aifM%2bXan3VYk6wChPAFBsY2MsDGyp6yCRzijecgexdLxCn28p1TK/iggUhFhbeHP0S4/FXPCKl2McSkS4poTedcc17pRmsrvYm8XcPJdzOFcaUnpgq59XEBJJrjWyTli3d1niTmUy3vK3jFG/B94C9q1dRIOVwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Введение в Цифровые двойники","path":"/blog/ru/digital-twins-introduction/","date":"August 23, 2024","description":"Если Вы до сих пор не успели познакомиться с понятием цифровых двойников, то самое время сделать это! Под катом Вас ждёт краткое иллюстрированное руководство по этой теме. Мы рассмотрим его происхождение, классификацию, современные индустриальные стандарты описания двойников и перспективы цифровых двойников в web3.  ","content":"\n\nПервое, что ассоциируется с понятием цифрового двойника у не владеющих данным дискурсом людей, это компьютерная модель. Такое представление о цифровых двойниках мне встречалось даже у достаточно опытных инженеров-робототехников. И это неслучайно - исторически сложилось, что объектом компьютерного моделирования становилась именно техника - какой-то автомобиль или фабрика - которые предварительно появляются именно в таком виде, прежде чем воплотиться в жизни. Вот, к примеру, мы рассматриваем 3D-модель некого устройства или системы на экране компьютера. Мы видим его геометрическую форму и можем даже производить какие-то рассуждения/вычисления над этой моделью - примерить габариты, посчитать массу при наличии информации о материалах, проверить её на прочность, запустить симуляцию. Тем не менее, фундаментально она не является цифровым двойником. В чём же заключается ключевое отличие?\n\n## Модели и их виды\n\nДело в том, что классическая инженерная модель является ничем иным как *чертежом*, описывающим не конкретную систему, а определённый класс систем (под системой мы будем понимать любой объект, воплощённый в физическом мире и занимающий в нём вполне конкретное пространство).\n\n<rb-image zoom src=\"digital-twins-introduction/ru/rus_1.png\" alt=\"Классическая модель\" />\n<p style=\"text-align: center; \"><i>Модель - это описание какого-то класса объектов (обычно составленное вручную). Может быть цифровой, но не обязательно. Модель - это прежде всего описание абстрактного, а не конкретного/физического объекта.</i></p>\n\nДа, по такому чертежу или, если обобщать, конструкторской документации систему можно изготовить, но после того как она выпущена с конвейера, она начинает жить своей жизнью и постепенно меняться в ходе экспулатации, всё более отдаляясь от исходной модели, вплоть до неузнаваемости. Поэтому, чтобы не потерять возможность производить какие-либо мыслительные или вычислительные операции с системой (на бумаге или в гораздо более продвинутой информационной системе), нам важно поддерживать модель в состоянии, соответствующем реальности.\n\nВот таким образом мы и приходим к необходимости разделять модели на видовые (или модели классов) и цифровые (или модели экземпляров). Видовая модель описывает класс объектов и его основные свойства, в то время как цифровая модель добавляет к этому описанию также и данные, позволяющие судить о конкретном представителе этого класса - его уникальное имя, идентификатор или серийный номер, положение в пространстве и времени, калибровочные коэффициенты и другие данные, позволяющие связать данное описание с объектом реального мира. Именно поэтому цифровой моделью не может быть виртуальный мир, если он не ассоциирован с конкретным физическим миром, а действия в этом виртуальном мире не приводят к изменению его параметров в жизни.\n\n<rb-image zoom src=\"digital-twins-introduction/ru/rus_2.png\" alt=\"Абстрактный и конкретный объекты\" />\n<p style=\"text-align: center; \"><i>Абстрактному объекту может соответствовать много физических объектов.</i></p>\n\nДля простоты, в самом начале статьи мы приводили примеры из мира техники или производства, однако сейчас перешли на более обобщённую терминологию, употребляя “системы”, “объекты” и так далее. Это имеет определённый смысл, потому что понятие цифрового двойника универсально и далеко не всегда имеет отношение к техническим устройствам. Цифровым двойником может обладать любой существующий в физическом мире объект - от живой клетки до экологических и звёздных систем.\n\nПриведём примеры цифровых моделей из других сфер:\n\n| **Физический объект** | **Видовая модель** | **Цифровая модель** |\n| --- | --- | --- |\n| Гражданин | Стандарт оформления документа под названием “Паспорт гражданина” | Паспорт Джона Доу |\n| Пациент | Справочник врача, описывающий вид заболевания, то есть признаки, присутствующие у больного человека | Амбулаторная карта Мориса Брюшье |\n| Автомобиль | Руководство по экспулуатации BMW x5 | Записи о техническом обслуживании BMW x5 с серийным номером 29591376838 |\n\nПриведённые примеры намеренно просты, чтобы быть знакомыми каждому читателю. Обратите внимание, что во всех этих примерах указаны модели, использовавшиеся задолго до начала цифровой эпохи! Этим я хотел показать одно из ключевых свойств, отличающих цифровую модель от обычной - историю изменений его состояния во прошедшем времени, отражённую на каком-то носителе информации. Сам носитель может быть любым - данные могут собираться вручную и записываться чернилами на бумаге. Почему же это раньше не называли цифровыми двойниками (да и моделями тоже, в общем-то)? И дело тут прежде всего в автоматизации - как процесс сбора данных, так и вычислений над этими данными.\n\n## Через цифровую тень к цифровому двойнику\n\nЧеловечество до недавнего времени было весьма ограничено в своей способности работать с информацией - хранить её, копировать, поддерживать в актуальном состоянии, производить над этой информацией вычисления. Книги и писари стоили дорого, а библиотеки регулярно горели. В таких обстоятельствах вести учёт всех объектов окружающего мира в бумажном виде не представлялось возможным. Компьютерная эпоха произвела радикальные количественные изменения в этой сфере. Увеличилось буквально всё: объёмы хранимой информации, скорость её сбора, возможности быстро обрабатывать и передавать по сетям связи на какие угодно расстояния. Всё это в совокупности обеспечило беспрецендентную лёгкость создания цифровых моделей буквально для чего угодно, а главное - теперь для получения и обработки информации перестал требоваться человек.\n\nРанее информацию о ходе работы устройств вносили люди (например, в какой-нибудь график или таблицу).\n\n<rb-image zoom src=\"digital-twins-introduction/ru/rus_3.png\" alt=\"Модель физического объекта\" />\n<p style=\"text-align: center; \"><i>Модель физического объекта - это описание экземпляра объекта (то есть некое его отражение), включающее его историю эксплутации (лог, даталог исторических данных).</i></p>\n\nРазумеется, это было долго, дорого и приводило к ошибкам при передаче информации. Добавление к устройствам микрочипов и развитие индустрии информационных технологий сделали возможным непрерывный сбор информации без людей-операторов. Если раньше устройства выпускались и далее жили своей независимой жизнью (в том числе видоизменяясь), то теперь каждое умное устройство может давать обратную связь о своём состоянии, записывать исторические данные. Цифровая модель может получать актуальные данные о состоянии системы в автоматическом режиме. В этом случае цифровая модель становится *цифровой тенью -* журналом изменений состояний системы в ходе её работы, собранным автономно.\n\n<rb-image zoom src=\"digital-twins-introduction/ru/rus_4.png\" alt=\"Цифровая тень\" />\n<p style=\"text-align: center; \"><i>Цифровая тень - описание экземпляра объета (включая исторические данные), составленное автоматически.</i></p>\n\nВ случае с живыми людьми цифровыми тенями являются профили пользователей в разнообразных цифровых платформах - интернет-магазинах, социальных сетях; у организаций - это может быть история операций по банковскому счёту; в компьютерах - всевозможные логи работы программ. В Робономике цифровая тень создаётся вызовом datalog, добавляющим очередную запись к истории изменений нужного нам физического параметра.\n\nНо откуда взялось понятие цифровой тени? Почему этот автоматически собранный журнал изменений системы не называли цифровым двойником? Чтобы понять это, нужно задаться вопросом о том с какой целью вообще люди ведут запись исторических данных. Ответ тут прост - учёт позволяет понять каким образом нужно воздействовать на физический объект, чтобы получить требуемое поведение. Чтобы реализовать полный цикл управления, нужно не только уметь автоматически собирать данные, но и автоматически принимать решения об изменении параметров эксплуатации. И в этом направлении также был достигнут значительный прогресс - человечество  научилось автоматизировать процесс вычислений, позволяющий предсказать поведение модели с изменением вводных параметров. С классическими моделями производились расчёты в ручном режиме - нужно быть сформулировать задачу, описать её условия и решить её, применив законы естествознания и соответствующие им математические уравнения. Автоматизация вычислений обеспечила возможность имитировать работу модели, то есть сделать её интерактивной.\n\nСобственно, *цифровым двойником* как раз и является такая сущность, которая получает автоматически получает данные (собирая цифровую тень), производит над ними вычисления (принимая решение об изменении состояния), после чего осуществляет над системой какие-то действия.\n\n<rb-image zoom src=\"digital-twins-introduction/ru/rus_5.png\" alt=\"Цифровой двойник\" />\n<p style=\"text-align: center; \"><i>Цифровой двойник - программа как интерактивное описание объекта, которая может принимать решения по изменению параметров эксплуатации автоматически.</i></p>\n\nИными словами, это работающая компьютерная программа или имитационная модель, напрямую связанная с объектом управления. Если имитационная модель ещё не привязанна к объекту управления и у неё отсутствуют уникальный ID, серийный номер и история эксплуатации, то она называется *прототипом цифрового двойника*.\n\nЦифровые двойники имеют прямое отношение к, так называемому, 4D-экстенционализму - подходу к моделированию мира, где объекты не трёхмерны, а чётырёхмерны - к ним добавляется измерение времени. Такие модели отражают не только геометрические параметры на тот момент, когда данная система была выпущена, но и всю её историю за всё время эксплуатации, а также возможные будущие(!) её состояния. Причём сбор данных осуществляется не только в течение короткого промежутка времени, как в классических системах управления, а на протяжении всего срока жизни системы. Системы, позволяющие связать между собой различные состояния цифрового двойника во времени, от задумывания до вывода из эксплуатации, называют *цифровой нитью*.\n\nИтак, после довольно продолжительной прелюдии мы можем обобщить всё выше сказанное в относительно лаконичное определение:\n\n> Цифровой двойник (ЦД) - это цифровое представление физического объекта или процесса, созданное с целью улучшения процесса принятия решений в безопасной и экономически целесообразной среде, где различные альтернативы могут быть оценены перед их реализацией.\n\n## Разновидности\n\nВ основном цифровых двойников различают по тому в каком временном диапазоне они оперируют и как много могут учесть данных в процессе принятия решения об изменении параметров экспулатации своих двойников из физического мира. Терминология и классификация, как и в любой развивающейся отрасли, только формируется и нет единой устоявшейся мета-модели о том как называть те или иные типы двойников. Тем не менее, уже сейчас можно выделить следующие их основные категории.\n\n### Реактивные двойники\n\nОни осуществляют оперативное управление, непрерывно получая данные с датчиков и меняя текущие параметры в режиме реального времени. К такого рода двойникам можно отнести и *Model-Based управление*, где в состав управляющей программы, так или иначе, “вкладывается” упрощённая модель управляемого объекта - например, бортовой компьютер (встроенная система), работающий внутри объекта своего непосредственного управления, который весьма ограничен в вычислительных ресурсах, поэтому заложенная в нём модель объекта должна быть также достаточно простой, но при этом достаточной для эффективной работы. Однако, в отличие от классической управляющей программы, цифровой двойник может существовать “отдельно” - например, в виртуальной машине на удалённом компьютере или в облаке, поэтому заложенная в него имитационная модель может быть более детализированной и потому более точной.\n\nДанный вариант цифровых двойников также можно назвать кибернетическим. Кибернетика как наука описывает процессы управления в живой природе и технике, а так как любое управление подразумевает управляющего и управлемого, то, собственно, цифровой двойник по сути и является таким кибернетическим управляющим агентом.\n\nРеактивный двойник работает на достаточно низком уровне. Его программа должна уметь интерпретировать служебную информацию о системе - например, показания датчиков температуры бортового контроллера для внутреннего использования, чтобы предотвратить перегрев или другие нежелательные ситуации. Способом обратной связи для воздействия на физического двойника является “тонкая” подстройка параметров без изменений версий программного обеспечения или физической конструкции.\n\n### Цифровые родственники\n\nТакже в отношении данного вида цифровых двойников можно часто в литературе можно встретить термин “цифровые родственники” (siblings). Эти двойники позволяют симулировать какие-то гипотетические ситуации, способные произойти в будущем и принять меры по предотвращению негативных сценариев или повышению эффективности. В отличие от рассмотренных выше реактивных двойников, имеющих прямую связь с объектом управления и представленных в одном единственном экземпляре, ситуативные двойники могут быть скопированы и развёрнуты в любом количестве экземпляров на каком угодно количество вычислителей. “Оторванность” от объекта управления заключается в том, что имитационная модель помещается в виртуальную среду, где информация поступает не из настоящих датчиков, как в случае реактивных двойников, а из виртуальной реальности, созданной нами для воспроизведения гипотетической ситуации, а управляющее воздействие осуществляется с самой имитационной моделью, а не с исполнительными механизмами вроде двигателей или нагревательных элементов. Данные двойники задействуют внешние или облачные вычислительные мощности, а потому учесть гораздо большее количество параметров, чем реактивные.\n\nТакже в этом случае можно изменять и ход течения времени работы имитационной модели. Реактивные двойники обязаны успевать вовремя реагировать на изменения состояния физического двойника, поэтому вынуждены принимать решения исключительно в условиях реального времени. Ситуативные двойники свободны от этого ограничения и могут использовать, помимо реального, симуляционное время, которое может быть как медленнее, так и быстрее реального времени. Замедление времени неизбежно в тех случаях, когда нужно учитывать большое количество параметров и, соответственно, производить большое количество вычислений, чтобы использовать высоко-детализированные среды симуляции, содержащие очень точные движки физики и рендеринга окружающей среды. Ускорение времени помогает в тех случаях, когда нужно произвести большое количество запусков симуляции - например, для формирования набора данных или обучения с подкреплением.\n\nСпособом обратной связи с физическим двойником тут является обновление программного обеспечения - как системного, так и для поддержки принятия решений. Например, в ходе многократного запуска цифрового двойника тестируется разрабатываемая программа для сборки роботом нового продукта, после проверки которой данное ПО загружается в цифровой двойник - робот и производство получают новую способность.\n\n## Современные стандарты цифровых двойников\n\nТеперь, после того как мы определили понятие цифрового двойника и его основные виды, мы можем задаться вопросом о том каким образом эти двойники нужно проектировать, реализовывать и использовать на практике. Так как цифровой двойник является отражением физически существующей системы, то способы их описания зависят от того каким именно образом мы понимаем этот мир в целом. Именно поэтому движение цифровых двойников выросло из систем моделирования, симуляции, предиктивной аналитики, что отражает фактическое положение дел, потому как в реальности все эти системы являются, как правило, подсистемами цифрового двойника. В связи с этим тут можно выделить предметную и информационную составляющие способов описания двойников.\n\nПредметная связана с разными способами представления знаний о системе - например, даже у геометрической модели может быть несколько вариантов - CAD-модель для отражения структуры системы, габаритная модель для движков физики, облегчённая модель с PBR-текстурами для игровых движков, модель для высокореалистичного рендеринга. Помимо этого, модели могут быть вложенными в друг друга - так коробка передач автомобиля и сам автомобиль зачастую разрабатываются разными компаниями, но при этом в ходе симуляции модель автомобиля должна включать в себя модель коробки и как-то с ней взаимодействовать. В этом отношении законодателем мод является [Open Source Modelica Consortium](https://openmodelica.org/home/consortium/), разрабатывающий стандарты описания моделей (такие как [Functional-Mockup-Interface](https://fmi-standard.org/)), способов их компоновки (см. [System Structure and Parameterization](https://ssp-standard.org/)), обмена между различными инструментами для multi-domain моделирования и распределённой симуляции (см.  [Distributed Co-Simulation Protocol](https://dcp-standard.org/)).\n\nДругая составляющая - информационная. Она более высокоуровневая и описывает скорее программные интерфейсы или API для доступа к информации об имитационной модели. На текущий момент существует множество разнообразных стандартов, среди которых нет однозначного лидера. Сейчас можно выделить следующих ключевых законодателей мод в этом направлении:\n\n1. [Asset Administration Shell](https://industrialdigitaltwin.org/en/content-hub/aasspecifications) (AAS) от **Industrial Digital Twin Association**\n2. [Digital Twin Definition Language](https://azure.github.io/opendigitaltwins-dtdl/DTDL/v3/DTDL.v3.html) (DTDL) от **Microsoft Azure**\n3. [NGSI-LD](https://ru.wikipedia.org/wiki/NGSI-LD) от **European Telecommunications Standards Institute** (авторы стандартов [CAdES,](https://ru.wikipedia.org/wiki/CAdES) [GSM](https://ru.wikipedia.org/wiki/GSM))\n4. [Web of Things](https://www.w3.org/WoT/) от **W3C** (авторы семантического веба)\n\nМногие из указанных стандартов основаны или стремятся к интеграции со стеком технологий под названием семантическая паутина. Этот стек технологий был предложен в начале 2000-ых годов отцами-основателями интернета как ответ на те вызовы, с которыми столкнулся web первой версии и которым он не очень соответствовал. Оказалось, что недостаточно просто физически соединить одни компьютеры с другими и обеспечить передачу между ними информации. Для полнофункционального взаимодействия между собой системы должны “понимать” друг друга, то есть иметь определённые соглашения по поводу того каким способом они описывают реальность, что выходит за рамки классической модели сетевого взаимодействия OSI (на чём построен современный интернет) и добавляет к ним новые уровни. В дальнейшем на базе набора стандартов семантической паутины появились также и стандарты семантической интероперабельности, предписывающие методы согласования информационных систем друг с другом. К ним относится, например, известный в узких кругах ISO 15926, разработанный для описания жизненного цикла сложных систем, но так и не получивший широкого распространения.\n\nТак сложилось, что интернет в настоящее время разделён на крупные платформы или экосистемы, каждая из которых не сильно стремится к “взаимопониманию” друг с другом, поэтому стандарты семантической интеграции не очень охотно поддерживающися ключевыми игроками отрасли. То есть технические системы не могут эффективно взаимодействовать друг с другом скорее по административным, а не техническим причинам. Аналогичные процессы могут произойти и с цифровыми двойниками, которые, в силу принадлежности к разным стандартам, не смогут “понимать” друг друга. Возможно, что web3, где правовой аспект (то есть административная составляющая) имеет первостепенное значение, способен возродить интерес к этой теме на новом витке эволюции.\n\n## Связь между цифровыми и физическими активами\n\nБлокчейн-сети, как значимая часть web3, первоначально формировались вокруг финансового сектора, а их физическим воплощением являются по сей день держатели состояния баз данных и валидаторы. Оба типа устройств представляют собой ничто иное как вычислительные узлы, не меняющие состояние окружающей среды напрямую - у них нет датчиков и двигателей. Не имея возможности менять среду своего “обитания” напрямую, блокчейн-сети замыкаются на развитии самих себя и становятся, чуть более продвинутым, но всё же финансовым пузырём, что вызывает сомнения у широкой публики и мешает mass adoption крипто-индустрии. Тем не менее, те средства, которые на данный момент вобрала в себя эта отрасль, могут проявить себя конструктивно - в способности менять мир и решать те проблемы, которые не может по сей день решить современная мировая экономическая система. В том числе с помощью цифровых двойников.\n\nКогда мы говорим о способности менять мир в 21 веке, то подразумеваем прежде всего роботов-агентов, поэтому тема цифровых двойников и их отражения в информационных системах крайне важна для связывания мира отношений владельцев приватных крипографических ключей (чем формально и является блокчейн) с техническими системами, которые разрабатываются и строятся людьми. Блокчейн в этом отношении достаточно прост - он обычно абстрагируется от семантики хранящейся в нём информации - не наделяет транзакции и аккаунты каким-то смысловым содержанием. Смысловым содержанием его наполняют пользователи, создавая именованые активы (токены), отражающие какую-то идею. По сей день токены преимущественно отражают веру сообщества в ту или иную компанию (в случае Governance) или какую-то ожидаемую полезность (в случае Utility). Причём Utility токены, как правило, сконцентрированы на IT-сервисах, то есть сущностях сопоставимого с блокчейном уровня. И мало кто пытается сделать токен, который мог бы отражать физическое состояние какой-то реальной системы. Физическое состояние мира де-факто оценивают участники рынка, часто опираясь на недостоверную и часто противоречивую информацию. Оракулы лишь частично могут решить эту проблему, потому как могут быть также подвержены искажениям. Именно в этом есть потенциал роста web3 и миссия Робономики - в том, чтобы физический мир был напрямую связан с рынками, а не через посредников в виде масс-медиа или держателей активов.\n\nПо отношению к объектам реального мира блокчейн-активы могут играть разные роли. Взамозаменяемые токены могут быть подобны макро-характеристикам - они отражают состояние большого числа агентов. Подобно тому как температура газа отражает какой-то среднестатистический показатель всего множества значений кинетической энергии молекул газа, курс токена отражает степень интереса общества к какому-то конкретному проекту или команде разработчиков. Невзаимозаменяемые токены имеют несколько другую природу - это запись в децентрализованном реестре, отражающая какой-то уникальный объект, который невозможно разделить без его уничтожения. Именно это свойство делает NFT подходящим для объектов реального мира или цифровых двойников. NFT может выступать уникальным идентификатором экземпляра системы, содержащим цифровой паспорт, ссылку на её имитационную модель для запуска симуляций и даталог её изменений в прошлом.\n\n## Web3 как интернет цифровых двойников\n\nПодобно тому как исторический интернет пришёл к идее необходимости семантической сети, Web3 также предстоит сделать это шаг, но при этом довести его до логического конца. И тут уже есть определённые прогрессивные шаги.\n\nВ частности, появились альтернативы DNS в виде Namecoin и ENS, а в качестве ссылок начали применяться иммутабельные контентно-адресуемые идентификаторы ресурсов (в виде хешей IPFS), гарантирующие неизменность содержимого. Если мы посмотрим на фундаментальные стандарты, лежащие в основе интернета, то можем обратить внимание как , например, в [перечне](https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml) схем универсальных идентификаторов ресурсов (URI) помимо традиционных http, https, ftp, mailto появились новые - такие как ipfs, ipns, web3, bitcoin, ethereum.  Да, web3 по-прежнему использует сетевой протокол IP для соединения друг с другом компьютеров, но уже позволяет существенно абстрагироваться от него, переведя идентификацию на уровень криптографической верификации. Сеть перестала связывать обезличенные компьютеры с IP-адресами, а стала связывать людей как владельцев криптографических ключей. Вы можете находиться где угодно, но наличие у вас приватного ключа позволяет вам быть связанным с другими подобными вам пользователями независимо от их местанахождения, в том числе передавая друг другу ценность. Это может быть крайне актуальным и для мобильной робототехники, где местонахождение может быть весьма условным.\n\nУпомянутый выше стек семантического веба, как и возможная причина его неудач, во многом строился на исходном фундаменте “старого” интернета. Например, на DNS, который активно используется для идентификации ресурсов URI. DNS представляет собой глобальную, административно управляемую таблицу маршрутизации, посредством которой пользователи могли обращаться к ресурсам в сети через человеко-читаемые адреса. Эта особенность не может обеспечить должную степень надёжности при описании моделей объектов реального мира для взаимодействия автоматических систем. Например, ссылаясь на какую-либо модель (или прототип) цифрового двойника в виде ресурса с URI в виде домена, мы никогда не будем уверены, что содержание этой модели не изменится на кардинально противоположное. В этом может состоять потенциальная точка роста блокчейн как некого интерфейса к безлюдным роботизированным системам в через их цифровые двойники. Например, мы можем описать модель какой-либо системы в виде многовложенных контентно-адресуемых [IPLD](https://ipld.io)-структур (каждый уровень в которой может описывать особый семантический слой в модели системы), записать их адреса в блокчейн и быть уверенными, что системы и устройства, опирающиеся на эти модели, никогда не будут “обмануты” касательно их содержания. Это может стать надёжной основой для коммуникации автономных автоматизированных систем в будущем.\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover_rus.62c183a.85478862305c99620c54e04f55db52f8.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover_rus.9ea8d39.85478862305c99620c54e04f55db52f8.png 480w","/assets/static/cover_rus.6b2ed88.85478862305c99620c54e04f55db52f8.png 1024w","/assets/static/cover_rus.62c183a.85478862305c99620c54e04f55db52f8.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-9d162d8ec98f5920d04a2701e4c0b1c6'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-9d162d8ec98f5920d04a2701e4c0b1c6)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAATyElEQVRYw3VYB3iUVbrOc7fovSouCiRT0iYz6Y20Sc%2bE1MnMZJJJIbSgq6DuigKLwvW6610RvaJiWVQQV1eRRYoURRNIQgkpBEhIDwmQAGIWaVIkFGHefc/5JwnuszfPc/L/5/vP%2bc5X3q%2bccQvMaXdywL%2bwyxlg6UBgdjsCczlIMzi6EGDukO9y5Mp1I99HaZ2j8zvX5YzyEnz8Czp/zp80vbUDAVkuGr/52zoRYP25HGLun3/HXtc6MX5Gs//LXkHjmVKvO2QRsg3T3Ci807%2bgSyjr9JvWI5URC8RGQ3EX9FN65Luk8QD95G4YOAIETRhIrBNrSrpH1xW69sn3ToVXkaCNrvGmAOlP9KHkuX7oqIheCFrg4n8nL3Em94n9IzSxbmqPdJAib6d8F7Q71/x/8uvLuuW7oLnRM86AvA5hHacgCkbCUi6acoiwPr0l0UDB9RTGwO/%2b5nY5hBf1AgWkDe%2bTh4p9Ll5iCIMFca1XehuefvkE9nf%2biMq6i9hc84Oy99/t45kSiRblXQ5rxwg6R84ThrD/y77if7OvaHSfeLrpS7sl9ANsHfLpX0IDFHUi2NaBoHxBp9VKuxXI2Lvgm3oAgcY9iDLVISq1DhFJexGXUY%2bIlFp4xTXINZJPYdeo4DYFhoYi8ijogNp0CO%2buPY3%2bE0PYXnsBvQNXEVXKc3LbaCSu4xq5zwV9gYif8%2bkagbFYI2UsuWNO5QwuVEhFrQo/oYe/bXQujOZGZk4BC35wBgpo2bqhdvRAldMBz1wemK9AycADDLYuhFpbkFHQiMzSJmQW7UNG4T7kljQhp2QfIm0HYchXEDMMN/meL/iQPq0fgWX9RMtRxM0YwOyXTmPWktMonHcKOvsRBJUcgz/pAY5e7nEp7%2bhSQsLWOcJL8rW7%2bNpc8k3uQWBhNwIdNFYxQ2b6YeWdQ9D9px1GANcE8D3A7gpThoIbLeSUUCnucvowGUXaGjB/STOWfdyH8nkt9Eor/C2EFuNQndGOJ1/qw0%2b3ruPSjzdxZUgZF6/cAHALy9cch3ZSG5GjJCNhNMVDjLvMBqjDV0DtvxyagHfh4bccY3yX4z79u3jQ821og96TdFXwX%2bBt3ESDUdi8dqmcTG4Wl9fsnaPQtrpgTc/6JTfBK6peGfEN8DI2wJPvvkSlN4c2gbRozmPrYchohqGsR6LBjVZ0BpKpp6PbaZ7biZaOE%2bjr7cX335/FlcuX8OzSevgwzoN5iDsR8PQrRyD%2bnLedHLdw88Z13Lh5U9JWbDkFdTYNIBKOTYGuwUHjOY7AO2EzfjXBjl%2bYF%2bAXuX/Ar3Lm4y7zfNwdPB2/ti/EL81/wC%2btC/EfYVPxgGYBAksGyKNdgW1h16j3S7tH8pK/C50C/l7BVSid2ogp5U0oLmtEnn0vfjv7AMz5e5GRu4e0BpTxW1RsFbRJdRIl0gCB5nZncG4HfNJbnB%2bta8WF8%2bfR3XsK9fvaMHDiexw80IrkyS3wz2LsZnfgKWmAW3Dy/9mzZ3Hy5EmcOXues5%2bwYtMpaDJaEewqnRK21nYEmXugS/gG92kex71hC3C//incGzAX/%2bU/F/d4/w73hD2DewxPY0zQfNzjMwvuhqUItvQxKbaNltjcf1%2bGZS7ged6RuxGZtAcT0/YgNKEWIfF7EZVWj0A%2bQ%2bLrEW1qQGTybugm1sCX6Ahyyeimn97jNBQRbgUtzq92dKG//yTOnbuAoWvX8ePVa/jxygVkPNIEXX43VEwoc97pp/uv4fyFH3Dp0mUi5XucPScMcBPL1w1AJQR0JSnhKb/pPTJpGQqZhOzN8Cs8SCPtZxU5gLDiZnq6BaG2AwjJP8ics5/5gfC0tyr7i12lc7jUEVGjpbRTQn94brDTiQVt8C7qg29eC0IcTTy/kTwa4ZO1nWfWwrfkCHRFrkoj8p3MARZm/9IeeBIBH288jnPnL%2bLMmfOoq6vj8wzWrP070h6iwNmd0KS1Ye6SI1LZEye%2bxbVr1%2bB0Ovm8AeetH7Hq82%2bhpneCRLY2K%2bVJ9/Bh%2bJUfhv4h8eyF9rd9eGHlaWypvohv9l7Gga4h1B%2b6itaea3j4xZNQE2nBls7RUmrr/Jn3Zdy7eMuSNlLmWpnkjkOftgHh0XkonvI4vq7txYHDl/HEU89jgjYMfrkVrG5MxDk0cIHiJDcmFWdgaRcmOHqcC5c149xgN5U7jkOtbfj2ZD8amyjQ1Ab4lx2Gip3V00uP0gA3cPPmLSLlHC5cuIBTpwZJu42V67%2bFSpSZqT0jdVlHxX2fZA5g06Oe2YOlm87gxMlr%2bP78TfQdvyZzx63bTvm8cOknTH9%2bAFomvwCH4n2ZBIWHHZ2jaBDzkuEmR3xncpxB409ag/CIeMTHR8NojMSjs2Zg2jQH0lITET0xFD5%2bkdCmb4FhGg01ReErERCc1QZdVrvTMq8Xf91wEl29pwn9S7h88Rz%2bvKwN2pRDCCHcNClsYP7cJ%2bP9/IVL0gBNTU3o6josFXj/sxNybaBDaYODMtskTHWP9sJ3Rg/e%2beIsk%2bZtnL3wE2qbLuPtT07j063n8Pcvz2Fo6JY0RGffEMrmHoUuo40lS8Q/vW3ulOXVUMASJkqz2dWFMjkHZrWyOeuFV8bn0OtDERs7EWlpKYg0ToaHrhjuHH5hmYiKDEW8MRphUSb45VSyTWZ5zGljDpjazT7gML3V5/TN24aJto%2bxv/k4rl89j%2bUb2qGxtDA/9CKIjcp41s8Fbxx1VYGbOPXdd9i8ZSuuDg1J2idfnoKKxhQIkM2K6MzoQRUtPf/1bzH8d%2bzUdZjnHIEHoevJbx5U9rl3v8PJwes4MXgDew9eRqgobfSwwUJ%2byQ0IyW5CUHojAlMaEMDhZ2tTQoJG8SlphXdQMqIighAeGoSAuIeZb4hExwAMRIaf4xDCjFNhSk8nEoIQbHyMiDrK1rlLVIEOp76wDUbri86c3Gw8PmsKE9sgPlv9GTZs3ozE3NkIsjBrWnpk/54/vwer1n6H/W3n0FBfi0MHG9He3k9P/gOz/sQERK/L%2b4GrVQ1iSGi475UPBmmo2zhy4hrMRIQmjdXCoSTMIH5Xcy4Qcer0DVTtvYhYIkbPMudnamYG34ec4hakMnEaM/cjJq0BuhR2pCIfFBJdlj3QeoVhztNP4rF578EzbT%2bCrcIJIo%2b0sc3ugz57NyKiE5FnzkLBzDeYDHvZa7AM6or7nTHmlXDkpzutFivMZis6OztRXl6O9evWo6w4D3GpDxGC9CYV8y7txZikXdiwtQUDR9uxZXc/EmcewNjMVnhSmUDhFZHBebEScSx6AjWRsHzDGel9YQDhXdnJiQ6O70GEupbGevWjf6Cj9yoOdV1F3CwqJuP7EB6c%2bA7GhL2GscEcoa/hN6nvsyrtk/FvmH4Uvrm7oPUJxbbKCqxkKR5PA4jGTV562EsEUGafonrce78aH61eg9c%2bpcHZ4AVyv5uusM%2bZkv8cigrMTqvNjtTUVDQ3N2P27NlYu3Ytpk4rx6xHpiIm51WWrqPMwt1Its3D84t%2bh9Xr66Fja6xNJ7OcQ/DLb4Uuh91jZgtL0SHozMwHrOVCuWVrvscgvbufyoVRsABxzbUr5SyYCPDkBWn%2bm6dw4YefUNN4iSEn%2bngqYD2Eu8Mfx6/DZuKuII7xdtz1Gxt8TBXMA4dl26wzVcNbF4nXli3FH9%2bohyZLKO2qJESgP1tgQ3Yz4unIDz9cjscWsVvM5Dee4WbIa3dmWOfAbst15tsLmEDSUFlZiezsbCxevBgbN27Es88uRHbmJISav0ZUzgcotOUQShmINi5GJstUQvo%2bmMwHkZ7XjNScg4hJ3oe03IM8sB76mN3wZqP1/KpBHGPWb2i9gmxWBC/RMjuUXkHcELUUuvSPA/hg41m8uHIQfkVUnvw8M7bibsOj%2bLW6BHepJuMuj2Lcfa8Nuuw99PJxhkEPfCZVISYxm0kuismvgKHayHa8j8ZrkygItDKU8ljCX2/Gn95qgmNuHbTMHYFEtZvf5A5ntv1xOAosTqvVhpycHKxatQo2mw179uyRsN2wbi3ycrKQYStDjq0ERfZcTLLMgn8GG42ov8Bn4hIExL4On7CXoQ1fAl3kawiMXQpD8qcIyBYIaMPDS47jh0tK6WvuuQoTIa4VNVz8tkAv%2bRIJCY/0IpIGSZ5Fz5YepVG24FfexRjjPw%2b/CViI%2bwOfxf1ec%2bUYO%2bltqC1biSImS3oyzjQTSTRAUlIC7xQZDBH2LjOOyRAQFUPHhGqcvA8hbLxiHyFarV3y5uvmb211ZtlmoZAGyMk1S8ULCwsxZ84cqfzQ0FUsWfYpsnNzYcvLgc1qhtVmQYi1At6OZuQ5ZqP8qfVIS8/E/Pm/xxvLXoXNbkFaUgQismik4uMIzhJdYA/eXH0ON4aUmn9s4BqyH2PSzFd%2bR5C3swLlXc%2baL5KbT3Y17ov7M3wsdewk2U5PZnIl4nQFrbgv7VVMSF7Fnv4wk10v4b4TsaZ8xMZEyGqg9c9kaW%2bUVUJfqlyL/Qpdt9o85aIm0EcEdDnTLY/BnJ3uNJstcDgcKCgokOPjv32Chc/MYdl5HdHmD6l8Hqw0RIT9bzz0BFvM3Zj15Av4n8Ub8NgTC/D%2b%2b%2b9h0aL/xktLXkGGKQFxGXPgW34MPuX7oH20Gary/Vjx1SCuX1eM8Nq6f8CjpFX%2bRqAv65TD39EOvxni%2bszWe94eqL7cCJ91X8Br/Xp4btgA1drPoVm3Ad5bN2Pcm5XwmyyaoVb4TWMyzN%2bOkLB0xMbFICnRCN%2bs1UySx4kwXqrKlF%2btZIKe2uNqtdkK68w9zjjzSyiwZTsdjmKp%2bJQpUzB%2b/Hi%2bO/D47HJEWt6GLneAcbWN42tekbuUW1lWA%2bITzUhJicfksjK89977rCJ5KCouRUoy4zF%2bFiY80wDNtk/ht2k9Jny1GtrFFejtEVfon/DyR4NKNmZrqs9nayvgyuQkkWDiBWfKAXjMr4b6qZ1QPbMb6idr4LGAGX8e3%2bdVQcVY9mffIfbqWesDLcfhEbUIxphQbK9tgekR3gN4hTeUdEjeBl7M/EpoZIakvkj8DMfLkHvavtt6018FtJkE7Zg0KQMrV66kJxdh5Qer8Psnfovg1CXwYDOiYlITT3XyTqhT9sIjtgKx8VlMkCYmoDgsf%2bdtPDRzBuJiY7H4f59DFqvL2NRauGd9iQmWCjyQ9zUMuTVobLmCwTM38fxb/RgbXcN7ew3UibuhYnn1MFXC3VoFj/QKeGRRyQyelch59i6eXw1VWjXcCXdNNEdcLWk0RvwuqPmckMBQSXgR733wISp2HUSs4xuMi6%2bF2kQkpXLwpqgyuZ7ptfLdbUJi3W0DY8lRmO8sLi4eSYLiT/wmUD69BKFJS%2bAeWwd1AgWKoxDRHAm7oTVuQFDUJETEJfACkoTULAuMqZkIjUrE0wsWIb1wITzCKqENqobGSAH1VTBm16PnGDtHRsEnW0/jAd7P1VHboYqtxji2qA98shpeX66F56a1UH2xBhM2fwbfrWuh3vQZPLasge/mz6GuWI375m6CKoaIMO6ARwoNmFSDe%2bMr8fsXdmFvQyd21OzHlLk7MSaiBtoEIkiMeGV4JCpz8XRzT6y/rU/6kFVg2AC5WLFihTTA4OBpzJxRipC0l%2bEeT8/HVCmM6Cl1VDUN8DW0aVugnbgR2pgviI4voInaCE/Ox0av4RrGbRw9aqKx0nbhP/0r8Mdlfbhy5TY6e4dwmjXfWNiIB4O2k0c1PFJ3YnzW1zTENjxYUIFxLLvjsvhur8CDtm8wPvMrPvnuIDoSKqEy7lJk4V61cScmxFXxhnkKm3bUYkfDAXy2lQgLr6RxuC5xl2IAl/zySZqbx8TaWwbjKmZ%2buzRALivBW2%2b9hYsXL6K39wjKaYCwuJfgEU4o0fvq8CpoKLA6RiCB8AwgLYzM4vZAE0pYcq5i7ddEcW6gUkm74W6rI2z34gEKUHvgB9b5AbiHVqGu8QJeWNqHezTb4BW6QzEq93vqdhA1NdCE74TWj%2b8Gnjlxl/wm5uIcdZQ4i8qFcU6%2bDxi2I8NejZ0H%2bhGeW4kEcwXvFAOIzKvGeJ6liaiS/IXc0mCRnBPJbu6xe2/rE/8qDSDKX3FxCa%2bT8dBoNPDzMyDfmoWISUtp3ToKtF0yUSXvkvDTCKEJXVUSBYqkIGGEcnyNHJrwHXJIawvYGQnFuBqYivbBi/MxFD5yUi3vIPU0hlgrwot7uU4dsUMOwVclBBbzKOaBFOFtCi74irXC%2b%2bIcKufOPKA3VSE0fivGhzOc4nYiPHMbdLGV8KCsKgH72BpFfrFXIIBPN3cjDUAEOBx2pyiBRUVFREEuTCYTJmVksj/IRWTSK3APEcmmWjIS1hPKC2HlXFiXnhAHyHl4lTJErqCyaqGgWM99Y0kTc0%2b%2bT%2bB4kAIJ5dUuD8n1w/ujqn/OT8yF0q7zJAqTlbmGc3cm1HHxAn1VbMiqMI4ocU/YJeVQDxuYsFdQUCXldVNF7L7lG/8JrFarMz8/XzZCw81QoaOILXI2QhP/jxm2XgkBcbBQxpVQhAckbVi4YWHFgS5jKXPFa5rYGkVhAV16RsSu3B9xx55hg4Qp5wwrMGLkeNeeO891OUUoL%2bOdZ2kFQkkfjv1hviqjay5CwCN%2b921t1Jcw5zmcjkK77AOE8jQICgqJiEILgpLfhHtELQ9QYk4yEMqE7BgRfkTwMMXb0vtxrjAJH0aMyyDDa4Twsf%2byxgVTSRvmPaywgHuIC3muENQMK3kHMqWMcaOGkrSJ1SPel3JHKIj4J6yi2RHn3DVrAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"locale":"ru"}},{"node":{"title":"Robonomics won the Polkadot auction #75 – What's next!","path":"/blog/robonomics-won-75-polkadot-auction/","date":"July 20, 2024","description":"Robonomics has won a Polkadot Parachain slot auction and will be connected to the Polkadot Relay chain starting September 25, 2024. Below are the launch plans, what will happen with the parachain on the Kusama network, and what we aim to achieve during the slot lease over the next 2 years.","content":"\n## Launch of the Robonomics Parachain in Polkadot\n\nThe past two years of Robonomics' presence on the Kusama network have been extremely beneficial: we tested the operation of the web3 cloud for IoT in numerous R&D projects with 5 million+ transactions through the parachain over 2 years; delivered a dozen updates with the help of the technical committee; experimented with managing the treasury in the DAO format of token holders; and acquired many other skills important for the project's development in the Polkadot ecosystem.\n\n[Launching the production of our own IoT devices](https://x.com/RobonomicsHW) under the Robonomics brand, the emergence of [the first multi-apartment building projects with Robonomics technologies in Cyprus](https://robonomics.network/blog/cyprus-residence-with-home-assistant/), and of course the maturation of the Polkadot ecosystem itself - all of these things have led to the decision for the project to push to be connected to the Polkadot Relay Chain.\n\nThe process of launching a parachain on Polkadot will be very similar to how Robonomics was initiated in Kusama, but there will still be differences due to the existing parachain in Kusama:\n\n1. The launch on Polkadot does not mean stopping the parachain on Kusama. Kusama will be a network for obtaining free IoT subscriptions, while Polkadot will allow you to purchase a monthly pro-subscription for XRT.\n2. Collators can now decide which network they will support - Kusama, Polkadot, or both. Both  parachains on Kusama and on Polkadot will offer the same rewards for block preparation in XRT.\n3. The ability to purchase a pro-subscription for XRT will appear after testing the bridge between Kusama <> Polkadot.\n4. The XRT treasury will be transferred from Kusama to the Polkadot network.\n5. The technical committee that helped ensure the operation of the parachain in Kusama will undertake a similar task for Polkadot.\n6. Name registrars for addresses will operate in parallel for now - the current one for the Kusama parachain, and a new registrar will be created for Polkadot.\n7. The ability to activate a free subscription in Kusama will appear following the implementation of the ability to activate RWS tokens, which in turn is awaiting the bridge to Ethereum.\n\n\n<rb-image zoom src=\"robonomics-won-75-polkadot-auction/infographic-Robonomics-Subscription-in-Polkadot.webp\" alt=\"Infographics Robonomics Subscription in Polkadot\" />\n\nThe launch of the Robonomics parachain on Polkadot will be an interesting event, representing the start of a multi relay chain project with unified tokenomics. Establishing the Robonomics parachain in Polkadot will involve testing system on BridgeHub, making them part of the architecture. Importantly, Polkadot will introduce the oldest project in the DePIN field, bringing new application scenarios to the Polkadot ecosystem.\n\n## What will happen to the Robonomics parachain on Kusama?\n\nThe Robonomics parachain on the Kusama network has processed more than 5 million extrinsics to date and has been used in dozens of R&D projects to connect robots and smart devices over the past 2 years.\n\nThe project team does not plan to stop the parachain on the Kusama network but wants to turn it into an opportunity to create a free version of the web3 cloud for smart homes for users. You can read more on my Twitter: [Freemium Pattern to Rescue Kusama](https://x.com/EnsRationis/status/1742535268492615983).\n\nThe Robonomics parachain on the Kusama network will be subsidized by the project’s developers, will have a bridge to the Polkadot network to allow switching from a free plan to a paid one, and the developers do not plan to completely abandon the maintenance and further support of the Kusama network. I want to emphasize once again that Kusama is a great place to create free versions of your products for any project in the Polkadot ecosystem, and I urge teams to subsidize free versions of their products within the Kusama network! It is inexpensive and will provide greater security than your own testnet, and users will get a real product instead of a toy.\n\n## Robonomics Plans for the Next 2 Years in the Polkadot Network\n\nConnecting to Polkadot opens up opportunities for Robonomics to build XCM communication with other existing projects in the ecosystem, which can expand the functionality of Robonomics and improve the project's tokenomics. We plan to integrate with at least 5 parachains by the end of the current year.\n\nThe second important element of establishing on the Polkadot Relay Chain for Robonomics will be the launch of commercial services, which the team avoided during its existence in the Kusama network. The first commercial Roboservice, under the hood of which will be Polkadot, will launch in October 2024, and by the end of the year [we expect the first users in Cyprus](https://robonomics.network/blog/cyprus-residence-with-home-assistant/), who have purchased new apartments with smart home features.\n\nThirdly, we want to pay more attention to the topic of on-chain governance in management issues of the DePIN infrastructure and Network States topic, as new interesting questions may arise in this direction, such as managing street lighting or making decisions based on public sensor networks. The Robonomics team will try to be more active around scenarios where the world of IoT will be part of collective online decision-making. For example, [check out our report from Decoded 2024](https://robonomics.network/blog/beer-bar-decoded2024/)!\n\n    \n<img src=\"./images/robonomics-won-75-polkadot-auction/Robonomics-flies-into-Polkadot.gif\"/>","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.556e815ed007d7239fdee609ffda867e.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.556e815ed007d7239fdee609ffda867e.png 480w","/assets/static/cover.6b2ed88.556e815ed007d7239fdee609ffda867e.png 1024w","/assets/static/cover.62c183a.556e815ed007d7239fdee609ffda867e.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-a6d60f205699379dbdef99cb06a3b302'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-a6d60f205699379dbdef99cb06a3b302)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAARKklEQVRYw5VXeVTUV5auyF4gO0hV/ZZaqAKqWAqqoKooQDbZl4CCRpNgAhjABUVccEMQEcENwWgSNK5pTVCjJkdjNN3pnpzumelpkz6TZDonOZnTs57uTp8508lJ0k73N/e9KhCMJvYf97z3e%2b/We9/3vXvve6XQ%2bGZA8LNNG/ueGmOtHJAJY1AOZN80JPHxDBgC51NrR9wcM7QBWTDPLUFiSClEPwdkfydEfwcSlGWIDyqmsSwayyY/WsPfBYnmRPqtxj%2bLzImkkDrIXj8t%2bckBbu6jpZb9TmLr0Rxr2bfa18rXckZ3IitqDX2nULsJCSEdaFEV442GXGQ%2blgGdshj6wBzu/zBuzBQzP5jplI7pH6jmpEMf4oIpNIfIzOfkJT/mZ%2bWWFracAM8nQDZkRDxOZMo5UInIMQEEv0yaz%2bbEGWgPEQfiaG09jZ2Z04LPHtuGet9yzAtwQOK%2bTo8vFyHXIyCNi7QWE90QWAh7ZDus4U3cL%2bYxPSxzlyE1bCWygtLRLjuhn2OBISifsGbNIiz627/TV0x9SIGZfELrFYCPB9hnREcGTMoCIuCC4JtKgFwwh7aRCM10coygHSmhFUgNrSXl8%2bn36d4TdEyfvuhrQwzttW1OAy7OaUOLTxUG/Jaj26cBtx9bjTT/%2bVD7Z3ERPEI6oCMR2N5MAJOygog/BUfUavKhyFRWkxidmDfHBLWPBXE%2bVsQobDReTAewAHKgc3Y0B2bd6wdl3RNAojDXBZOzT8asaDCGubk4U4vIBE4k8iqfdKQrbaiLyEFGeAep/yyPhPggN51GGX3XcBAsJdip6fjp23lEMFK/UHTikE8T/HyTEBWyAJn%2bhfhXxUa0%2bNYhkvaTWTrQqbPfeiIil1LscQr1Djgo9FVENkFZBXvUZljCNvCTFigiWcgnBhfwFNWQaNogTwSYo%2bcTRzuJlP6wFLBx8gK1IinLBOFjZIK3lfw9tUBLAGMUaVhnzsTFWiKsyIMtZj2RLKCaYCGiNh4JydyqKBQLPUL4eoRk5Fb71MHinwcVgU4NKkM0CfukTzkq/CsR7ZfOSbM9dQF5dOrlJGgj5XwHiVpIJFJgDlkKG%2bV9YVQXmqJdMPhl8ohj6cnSRc1T1MvJzzYd7txmcGKm0PCTsfMPNf%2bB99s7puE/9PQFv2QCkctJplHxcTGgzJ82jPNJJrBVBG4JnVAS90sNYyJUUpo8TtFR6MlpSoV/UqzHxGMt8Kf1giks3f6l%2bELRixa/RYigohpPKWQOqaJoqqHa0khFltWWNPp9HheT7ZMasRmlITb8tCkP5ZS2MT5pMAS4kBRcwfGyg2Q2fZCc0712al4h%2bHvISkGUb1Tw1Jy0Z0ymMYGc1Kzw8QgoIZUtiFfmcjVj/TyqC3SCarolLFQUzREdSI9YxYmyomaikDTPLSUxqihdFkJPovQoV%2bCcbyd6KP%2bPUS3Y4t%2bMq/6bkRnagJSIhUgLbyDRapFE6aSlPFaR2AnBtbBGroUrdoDENhOpVF5s8yiiDL7J0FH4m5Qs9NM4ZmZTvEQSmZHWKulGCfCO05hIYis4QV9GlqpniJucXCRENl9Apr6GL%2bZEZlQnitUHkUzXluSXSpvlQufvyWsmQByZhRauC67jt0M2AWV1QUWhKbBiFpQHQ3AxiVQFY3gtEsKrcDJwI%2b7M6Ud98JOQI6uRHNFApCsRH7yAxMvhQEUqpFlRPbBHk1G9YYeg4Vct3Sj8EKxEnuqPMofXJ5miRO09FJWPDQmR8zkfxpGN3RPHYwp2H8vKbA5SzcjQdSQGOHmrJnXZmBSYi0LVQZSLE7BGtENFm7KTMRFQJhArbOHUrg0swI%2bVNUghEPqQWpqzc/E0tJ6awlNDd7uGiEmBbL4S6rByqMIpqkKr6fothUD7aMjUFDkaVgTJX00krZFrYAmuwfmgSrSTqBH%2bNk6C1yVaKzG4hGpLOpxUE3JiB2EKK/EcHsdPQgW5OB8NF8DhfYN4%2bgqmpqR00%2bYurqyGk6eWJuVgiojgXCJso9OjYhTeAhXbnJNxeVry0wflUsXNQxopX0ygVYwwI899iAiFp0BABXY3K4toDSeyNH3Iit4D%2b9y9cAsHYY5qJeJ0ikFFZAXkP5%2bLIQS6%2bZ4qAryR6kgjE4fW0tK7RGJVP6SCSFphoCuySD2GKuksMuhqjCNBRLqVGAYxiB5iITnTHEVqJRpjfYUQmO0BGcCccmmCieH5limsZBJA4CdCEUFXiUiARJpnJkybk0Iwj9IoDxplvtfHzcELJI5AYBkpkchLyhIIwYUwhbTC7nwauU/VIUVshyHkCRov5vMiu0Kp4oskmEBril4h4sjUtFdCcClFTKHnsDgWevFRbieFLoEzttfjz4l7cbD%2bFGb2qKJxibixvkIkgMzYKelC6aETnMf7U2MsbLUh80mI%2bZ6F6SoUKf9lGpvpJ9MjSUdmDCnhpD3rko/SS5zldUgZJKroQkA1TOZiPP1BPIbuluLpo9WI9S2FHFZNPhVkVPUprMVgrxDKfL5mItUHtr6BpR4jNL2PBwcbUwc6uFgcF40L3rlZfR6Rnr5CVDKQRI61QTP6vM3nrRTChMmfNTfb796YhiJB9P5WpJMW6KEj0v8EaS4Ro3eBFF5DBawBCQX52PNtM85jH2rfpaIV1AApoh4SXZlSaA1ZJUQSS2SCkhBMSGF6n7xpbLPx0J5c8HtzMzE%2bqK8QgovwfSbyttBr3%2b8nTvuThRBo%2bpMkhhIJqvwiIxVOf3wiFkETuRiG8CU42FWO42ecaM2tQdRcugmilkAIbyS/eu4r0YtSpAeVQNchE1K4f4%2bpvdleP8jhwaYQ6Y5%2bsJV47W%2bdm5ovI%2bKVEIi4TP8PtNGNEOlRo4teiqiYZRiP7cRdv034X6kfX/hsRHVcG1SqpUhUPwF15FKoQkms8MdJsFqvgOUP3UsXUfE9OFhqlT0Ur0IikNNGdzNrGXCZ%2bszEmfPeuZl%2bs8bvW0ukf4i66MeRk78KTSfOI7NxAKFBjVhv6cGfxUH8Ub0bf9p8E1/5b8cn0iDcOvpzZSxDx5ZJdA7eQkToUsSxiIis46nD9wm9bx8%2bVjHrW6B0%2bw6eh5iCgZxpEmtJeW10PYGv531p5lyEZ46BmjkmR9XN8uOgYxZBH7sIKc7VWH52EvbKLahOWIdv97%2bDu6/9M74%2bdQffnHwfX718B7jwId577kfQxj6F3AVD6Nl8CU8mlyBPpgiIXkzrLeRr6mIW3ttjar/Ie3szi5/XQA%2br2fgeZgqJQnOWRU21DR6bNTZzbvZvZG%2bftdqYxR6btwyyahlMYhOSElvhSl6L/xi%2bCNz5HH8F8M17v8XX5z/Enz/6Hf5C37jxa5xrPYq5UW1I0XdgSUot2tPLiPRiqOiVKEYugkx92bsPxxDl2U%2ba8W3WNpGQi%2b/hn4n9PlPIsVR8HsGkR5zXUP5GBTcieu4S%2bqtLd3vsM9BKzdDJHbi95Qzwzh3c/fYu/vLNXXz55m/w5U8%2bx1dvf8oF%2bb8vvwau/RxbG/YjNKIFkZHtiKQHktXcgcMHzyLPuYaEWEJ7LeMmz3swNoHqjPSIvBSyqhmPYlp1y33f91o25/l%2bFmbTGqxv3YK3xhdj6cIdSE7qQkxcOw4tGcMf9l/Fp9tew1f/8l%2b4%2b/sv8YdrH%2bF3Fz7AF29%2bjL9%2bfRd/fOdj/LZ3Ep/tnER7wwFULh6CKqoZSxqGsH3LCZiNHYiLbEWSoR06dTukuNZHwvp9ptCKK/FotgpaYaq/BqJ6zfS4hgiyvix0wGbtQf/u5/HWT/dj46ZRGC2b0ezciV93nMQ/rjyNv3/iRXyy/xa%2b%2bvf/wX9e%2bxD/du5X%2bP27n%2bFPn3%2bB9ztfwy%2bWTeCXz57Az7e9gv2nLkJvWAe9tAqq2FYIdFOkJD%2bNHf0bUN9A5IVmvr9OWkk2E9%2bjm0Kr7cajmk7XDUnoRmJiGxyONsjSOkjiWmRk9MBg2ACDvhuxMWsRFrYSev1K%2bAc9hzypG29WHcKNujG8VT%2bOG9VHcDV/FJec%2b3Ax%2byDO5ezDBfs%2bvGobxuXcQ7hWNoY3yg/jYukIdhbvhMmwGZJ2PSR5E6XRelQ804VnxgewuH8r7I41hGED1Op1mDdvHcf3t/BhptDFb8cjmXE7tLrt0GeuQHJjFRKyiqE3rsOrr76Dt2/9EoK8FWpxG5w5fSgr345Ey060rT2DyxvO4JXs3XglfwRnXYfI9uGEfS8mDPux3rgWtsRC7BF7ccQ4hBfSBnHctgdns0fx8oKDOFE7jFXmHVAbepGV2UVrboJG2w/BtBuiYQCidiNUtGdJ2RAWNY5wDHrjjmm8euMP81Lok4bww7YHBjNr98OQ3gtj9gbICUMwJQ/jww8/xfCBt6Ex9KGkYg82bplAU8tu5OaM4L137%2bDOG3%2bHUXMfTriGcL56E8atAziQNIB9OR0YG7qA2x98hH3te9Fn6sSgfhCHEoexIXU5OpOaMebci7HUXlTod2FZ3U4sr%2b2HSD7x5kFodAOorV%2bFotIedKw5juePXUKMMEgp58GsSxyCNmHPNH6PfZebwpAyhgfbKNlhGFLHoE0%2bAiHxIPSWHTAkj0OXdBiicRu0SdvhyB9HrHY/6pqOYmBkgnyOIdowita0EbxQfBCjOWN4IWsYJ1cuQH9bHPbSSfbJe7ArbyUmj13Drz7%2bbxxY0YcNxg3oju/FaP6TOFKcj7GyJ7AncS8Gzf3YbB1GXuFObGg9jPUFwzASJn3q80hJq4MlYxVM1lFYbBQRiQPQpRC%2b5MNISB%2bDJXOM9xmH%2bLRx3t7PUxGf8TKYGbzm6Z9EvP0c4m2nobW%2bDHveEVSXNUCfUApT5inorEcgkRhqCkVLwWEkOo5ATnkJz644ghXrT6LRfRQH7AcwnHEAQ/Z%2bXFlrxQvdWpQaCrDLsgvbKNzXhO3CsaYz%2bOT936DPMYZ1sbvRZezDtmQSKGkYx2oXYmtqD3bGj2DjwglUtfaieN051DTuhSVtGImuc0hKpTdA8i7C%2bQrEtOPIt7ejJGcHYs2nsPfADdy6/Q%2bQ0whv%2blloko9Te4p8PRx5S6Ywui5SSM%2b0SzC5LpAIB2F0HIec9QaKSrqx/TkrqquWISH3KtWB86htPonqZS8it3IEyQXnYHRfhSrlNHoOncRY84voN49jpGAILzU3YEV2JtqsT6E1oQubjXuxiUh1qnZjf%2bNJXDh2C31541irGkS3fgRdugM0P441Vje2ZjZhk34ch1vO4snV%2b3B0YBKljWthLqLTz59EdukAnCWHoHNfR2H2JuwuL0JJwQhExxXUP/smOnp%2bhvLyFmx5OoiuVSPM2ccR73odRtekx5yTFAHumzA4bkBvvw697U1obbdgznoOqTY9kjPpTZ11G2ULVqO3tQhW9yiE9J/AXXYU1TXLUVvbjJqaZaheuBWC9QZSUy5jU%2bcBnNj4GnZlnMJQ7ml02Q6hJ3MCm%2b3PY6W1F922UezMOEcnfQo7y85gsHMS2x2nsSOdjCJuu%2b0U%2buwXsDCxEU3m1ehPPY%2bu7NN4ZtEZtHVdQEPJcSS7L1OqvQTZQlFqnaBonYQ7sw4uRyZs7ka4XSUU8i8ixvJjZOVsQ/2CLLQtLkBK7hkY3Ldhyn0Lxry3YSJTxKmuYF7c64iNZXaZ7BriVKOImUePDtUeaq9BL78MUfoRomKv0/xVyDItpH%2bBrroJ6k/AGP8ioqJfR7zmMrJTLiHfdh3zzddRnHoTJSRMWfoNlKe/haK0SVTabqLafovsNmocb5PdRE2m57uKxivpACozbqEw9TqKUm9gQdpNFFpuoDTlGtyOSWRor0Idc4muW8IafYXaK1DFTSJBuw9a2YPHpB2BXjhOvK4iIvoiwqKuIDTyNXqQETf1FY9pKGLFa/h/xYhPGMCDOtoAAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"The Experiment With Beer Bar at the Polkadot Decoded 2024","path":"/blog/beer-bar-decoded2024/","date":"July 19, 2024","description":"Last week, the Robonomics team visited the Polkadot Decoded event in Brussels. They did an experiment to measure different readings from sensors around the Free Beer Stand from ChaosDAO. The team wanted to see how many people attended and how interested they were in the bar. Read this article to find out what they discovered.","content":"\nLast week, the Robonomics team visited the Polkadot Decoded event in Brussels. They did an experiment to measure different readings from sensors around \nthe [**Free Beer Stand from ChaosDAO**](https://polkadot.polkassembly.io/referenda/821). The team wanted to see how many people attended and \nhow interested they were in the bar. Read this article to find out what they discovered.\n\n## Equipment\n\nFor the experiment, a set of sensors was chosen:\n\n- temperature and humidity sensors\n- motion sensors\n- door sensors\n- air quality sensor\n- beer meme-counter in the form of a light bulb and two buttons\n\nA Raspberry Pi 4 with Home Assistant installed and Robonomics integration were used to save all the data in the Web3 cloud. \nAt the end of the article, you will see a description of how to obtain this data.\n\n## Installation\n\nHere’s what the bar looked like:\n\n<rb-image zoom src=\"beer-bar-decoded2024/bar.jpg\" alt=\"Beer bar\" /> \n\nThe main counter where beer was handed out. Behind the counter, there was a tap and 2 refrigerators with drinks. \nThere were also small couches and a PlayStation 1 with racing games on the right.\n\n<rb-image zoom src=\"beer-bar-decoded2024/play-zone.jpg\" alt=\"play zone\" /> \n\nThe door sensors fit perfectly on the refrigerators. This allowed us to count how many times they were opened to take out a bottle.\n\n<rb-image zoom src=\"beer-bar-decoded2024/fridges.jpg\" alt=\"fridges\" />\n\nA motion sensor was installed in the PlayStation area so that it would only trigger when a person approached the TV to take a gamepad:\n\n<rb-image zoom src=\"beer-bar-decoded2024/sofas.jpg\" alt=\"PlayStation zone\" />\n\nA motion sensor was also placed at the main bar counter and oriented to trigger only when a person was directly at the counter. \nIt can be seen on the left on the column. A temperature and humidity sensor was also installed nearby:\n\n<rb-image zoom src=\"beer-bar-decoded2024/column.jpg\" alt=\"motion sensor installation\" />\n\nSeveral more temperature sensors were placed inside the bar counter and at the coffespot which was nearby.\n\nA beer meme-counter was also installed, which would light up green for 5 seconds if the “Beer” button was pressed, or red if the “do not press” button was pressed:\n\n<rb-image zoom src=\"beer-bar-decoded2024/mem-beer.jpg\" alt=\"mem-beer counter\" />\n\n## Data Obtained\n\n**Disclaimer: In this section, all data will be shown in the Home Assistant interface for convenient visualization.** \nThis same data can be obtained from the Robonomics parachain and compared. Instructions are to be provided later.\n\nStudy period: For the study period, we will take the time from 16:00 on July 11 to 20:00 on July 12, which corresponds to half of the first day of \nDecoded and the entire second day.\n\nIt is also important to clarify that the bar opened at 12 noon, which also limits the measurable interval.\n\n### Temperature and Humidity\n\n<rb-image zoom src=\"beer-bar-decoded2024/temperature.jpg\" alt=\"temperature sensor\" />\n\nFirst day (July 11) - as can be seen from the graphs, a comfortable temperature of 25-27 degrees was maintained indoors.\n\n<rb-image zoom src=\"beer-bar-decoded2024/temp11.png\" alt=\"temperature 11th\" />\n\nSecond day (July 12) - the temperature dropped by a few degrees but remained comfortable.\n\n<rb-image zoom src=\"beer-bar-decoded2024/temp12.png\" alt=\"temperature 12th\" />\n\nThe temperature drop is related to the rain on the second day, which is clearly visible on the humidity graphs. Humidity increased by 10-15%. First day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/hum11.png\" alt=\"humidity 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/hum12.png\" alt=\"humidity 12th\" />\n\n### Motion Sensors\n\n<rb-image zoom src=\"beer-bar-decoded2024/motion-sesnors.jpg\" alt=\"motion sensor\" />\n\nYellow indicates the time when someone was near the bar, gray - when there were no people. Motion sensor at the bar - first day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/motionbar11.png\" alt=\"motion sensor at the bar 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/motionbar12.png\" alt=\"motion sensor at the bar 12th\" />\n\nAnd PlayStation area - first day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/motionplay11.png\" alt=\"motion sensor at the play zone 11th\" />\n\nSecond day:\n\n<rb-image zoom src=\"beer-bar-decoded2024/motionplay12.png\" alt=\"motion sensor at the play zone 12th\" />\n\nFrom the sensors, we can see that almost all the time the bar was opened, someone was standing at the counter. \nAlso, almost half the time, someone was playing on the PlayStation.\n\n### Door sensors\n\n<rb-image zoom src=\"beer-bar-decoded2024/door-sensors.jpg\" alt=\"door sensors on fridge\" />\n\nGreat, we've looked at the general indicators around the bar, now let's try to get some numbers. For this, we have door sensors. \nThere were 2 refrigerators. On the example of one of them, let's see how to count the number of openings.\n\n<rb-image zoom src=\"beer-bar-decoded2024/door.png\" alt=\"door sensor example\" />\n\nOf course, you could count the number of yellow stripes on this graph, which are the moments when the door was opened. \nBut you can export this to a csv file and get the following:\n\n<rb-image zoom src=\"beer-bar-decoded2024/doorcsv.png\" alt=\"door csv example\" />\n\nHere, each individual row shows the time of the sensor state change. So, by simply dividing the number of rows in half, \nyou can get the number of refrigerator openings.\nAs a result, we get the following table:\n\n|          | fridge 1 | fridge2 |\n| -------- |--------|---------|\n| First day  | 76     | 78      |\n| Second day | 111    | 87      |\n| summary    | 187    | 165     |\n\nA total of 352 refrigerator openings. And we can confidently say that this is the lower bound of the number of beer/water \nbottles that were taken over two days, as multiple bottles could be taken at one door opening.\n\n### Beer  meme-counter\n\nAnd lastly, the beer meme-counter. It was installed only on the second day. There were 2 buttons, one labeled “Beer” and \nthe other “Do not press”. How many times was each button pressed?\n\n| Beer       | Do not press |\n|------------|--------------|\n| 83         | 44           |\n\nAs you can see, about 2/3 of the people chose the right button.\n\n## Data Verification\n\nLet's move on to obtaining this data from the blockchain. All data is stored in the datalogs of this \naccount - “4EsopMUbxQH5NseBXiJcPkTy5ZRhs7XrjuMBqmoCzBqWQ9gB”. Let's open it in [Subscan](https://robonomics.subscan.io/account/4EsopMUbxQH5NseBXiJcPkTy5ZRhs7XrjuMBqmoCzBqWQ9gB).\n\nWe will see all its extrinsics. Let's filter them by date. We will get about 140 extrinsics.\n\n<rb-image zoom src=\"beer-bar-decoded2024/subscan.png\" alt=\"subscan extrinsics\" />\n\nEach of them contains an IPFS CID with telemetry. Let's take any extrinsic and extract the data from it. \nFor example, [this one](https://robonomics.subscan.io/extrinsic/0x4f1bd898b367f32414fd397094e132262fbeaa8b50e7288d9aed908a138382f7). \nIPFS CID inside it - `QmZMkJo6StbfDVvGCqVnV3sZeG7R3cftt7WXfdUVdpJ4c3`.\n\nThen all you need to do is use this script to decrypt the data. Replace the IPFS CID in line 11 with the one you need:\n\n```\nimport requests\nfrom substrateinterface import Keypair, KeypairType\nfrom robonomicsinterface import Account\nimport typing as tp\nimport json\nimport os\n\nADMIN_SEED=\"client teach develop blush just ginger depart sister orange rather measure park\"\nIPFS_HASH=\"QmZMkJo6StbfDVvGCqVnV3sZeG7R3cftt7WXfdUVdpJ4c3\"\n\ndef decrypt_message(data: tp.Union[str, dict]) -> str:\n\n    \"\"\"Decrypt message that was encrypted fo devices\n    :param data: Ancrypted data\n    :param sender_address: Sender address\n    :param recipient_keypair: Recepient account keypair\n\n    :return: Decrypted message\n    \"\"\"\n    try:\n        account = Account(ADMIN_SEED, crypto_type=KeypairType.ED25519)\n        admin_keypair = account.keypair\n        print(account.get_address())\n        sender_public_key = admin_keypair.public_key\n        if isinstance(data, str):\n            data_json = json.loads(data)\n        else:\n            data\n        if admin_keypair.ss58_address in data_json:\n            decrypted_seed = _decrypt_message(\n                data_json[admin_keypair.ss58_address],\n                sender_public_key,\n                admin_keypair,\n            ).decode(\"utf-8\")\n            decrypted_acc = Account(decrypted_seed, crypto_type=KeypairType.ED25519)\n            decrypted_data = _decrypt_message(data_json[\"data\"], sender_public_key, decrypted_acc.keypair).decode(\n                \"utf-8\"\n            )\n            return decrypted_data\n        else:\n            print(f\"Error in decrypt for devices: account is not in devices\")\n    except Exception as e:\n        print(e)\n\ndef _decrypt_message(encrypted_message: str, sender_public_key: bytes, admin_keypair) -> str:\n    \"\"\"Decrypt message with recepient private key and sender puplic key\n    :param encrypted_message: Message to decrypt\n    :param sender_public_key: Sender public key\n\n    :return: Decrypted message\n    \"\"\"\n    if encrypted_message[:2] == \"0x\":\n        encrypted_message = encrypted_message[2:]\n    bytes_encrypted = bytes.fromhex(encrypted_message)\n    return admin_keypair.decrypt_message(bytes_encrypted, sender_public_key)\n\ndef main():\n    account = Account(ADMIN_SEED, crypto_type=KeypairType.ED25519)\n    admin_keypair = account.keypair\n    response = requests.get(f\"<https://gateway.pinata.cloud/ipfs/{IPFS_HASH}>\")\n    print(response)\n    with open(\"telemetry.txt\", \"w\") as f:\n        decrypted_content = decrypt_message(response.text)\n        print(decrypted_content)\n        f.write(decrypted_content)\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\nAs a result, you will get a \"telemetry.txt\" file with json inside. It will contain all the same data we reviewed above. You will just need to parse it.\n\n## Conclusions\n\nThanks to all these indicators, we can say that the idea of “free beer” from ChaosDAO was successful, and people actively used it, \neven though some the beer didn't run out. And thanks to the sensors and the Robonomics team, you can see quantitative and \nqualitative indicators of this event with data saved in the Kusama network.\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.fe70e4359427333ee63b6d89158536ab.png","size":{"width":1500,"height":675},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.fe70e4359427333ee63b6d89158536ab.png 480w","/assets/static/cover.6b2ed88.fe70e4359427333ee63b6d89158536ab.png 1024w","/assets/static/cover.62c183a.fe70e4359427333ee63b6d89158536ab.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 675' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-813079ed5b23b588d9ce05e2e5dfb096'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-813079ed5b23b588d9ce05e2e5dfb096)' width='1500' height='675' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAAYJ0lEQVRYwzWYB3Rb15WukbyWFZeJLVuyJav3YomU2HvvvTeQBEEQJAEQ7EQjAVaQYO9FJMUqUpJNUZXqvVh17DiSZVtO/Cw7WXbi8WScGTsZv3zvRLMGa%2b117j0XuDy7/fv/KfF3csVr9zoC7d7GdcsWvHasxW/3aoLs1hFqtxH/XRvFuoGwfRsJsl%2bHv3gWIGz5std4Y9ly3nz1dd74p1fIdlqJ0nMtGu/1aH23kOe5hRyvTSj81pHqvo4Mz9Vk%2b75FhvdqktzXk%2bGzCanvJrL8t5EVsItMfzsyffeQ4SXMw41k5wgyXZJReStR%2b6pQiDXPNwZ5oB9ZQR6k%2bTuTEOhIpM92wrw2EuGzlSDPbYR4byHUexMhYi/Ye6O4F2f33UaQxxY8HNbi4bgSz33LcbZ7DTf7FUg8XCLZvH4P29c5smWNPZtW2bNzgzM7xPX2t%2byx3%2bSC4y53secg7h3Yt9sdO3tXNr2%2bgVdfeoOXX17Oqy%2b8RuCOUFR%2bWsr8jSg8VLjt8MF1qy9e2wJx3OSJi7h23uqH3SYP9u7wZZ%2bd2HcIxMkhAId9ocKixHUc7o4KvOxq8Fzfgu/rM4QsXyLkjVMErZ0kZOM4PttacdidwZ5dLuzYKpLm7oN/WCw77VzYtn03mzdsYduWHWzfuoPNm7ezZu1GNm3YzLaNm9m5ZavwdROrV65mxfJVvPnmGiTxiYmY6xrJzpbh5%2b3DujfWsnr5ata8sYq3123CadtOnLe9zcY1G9i6aTO7t29n%2bKVkPpNUcuvnKnxe3cWvxG/SXTPI90jGEFyILlBFZYgGqWs8sU7%2bxLkFEeHgTbi9B6H7PPG18xBOehHhFUZ4YDzJCXlkpWtIiZIR5pFKpIOO9H0DFOx%2bj8rdDyjedw2d523yd7%2bD1Gc/4b6JBDu54Gu/l717HImIS8Hd3Q8fZwdCXe0JdXck0Hkvvg52uNntwsvhbfyc7PC224Hn7m04vb0VD/sduNrvQjI0MsLI%2bCjDU%2bNMHpnj4Nws8eGROG3fRbiLB0m%2b/iT6BuDs4cjI%2bnT63kxi6PVknkhKOCpJR/GiJ7Mv52H1MtGdqKM32cRgjoXW1AKashUUhkWiiY0lNzyC7MBAZCEhRIn3ZsYkECQy5x%2bWSF21CVtTA/2tTeQnJxHvGUmaq4q6oAs0Csct/rdoCX9EmecCRamDZIrvxHp5EuXtxVsr3mKPvQvh4XEkhQeQGupJUrA3sX4uRHq7kODvTqy/G/GBHkR7O4k9R6L9nQj188bTJwZJpc6Ek6sn69ZvxdHVHX2Nmbi4RDau3siWtZvYtnozK1evIuU1V5C0sCCR8sLyV3jrV2/ys5deIOkFF7HfwMM3LLRHmjlmnuTq2Yu8OzbL4f3jzI2NUynN5NjBOep1Omb3jzE2MMLY2AGOnFxicGSc48eOcXrpNAO9PTTVmDCUaPG3y0breo8mv19T7/sIi/cTDP4XyI3sIyE8nqQAX1JCgtkmzu3q7k9MVCIx4eGkhPuKIHiRIHAiPsBdBMCNxGBPERBXYvxdBD644Oq4DzevaJw8E5BEJiSTW6imsLiEvCItmrJyomLiWfvmWtYJW7PsLV569RXK/qcPX0p0hP1yF8uWLWP9slWsFEHY8MoGzv9CxW1JPuWeucyWdNFfZqO1yEBfkxWbxUKb2UxPczMt1TU0mqppMNUwNjlFXZON2nobbS0ttDZbabSYsZiMmE0mfHdKKXF%2bQJPbE1qcvqDd6/dUB1wkN6aHjJhEsiNCyIkLFTiwBU//AJLik8mIjyY7LghZXCBZwjKj/JBG/FdAkoSlBLkTF%2bgusu%2bGX0AiHn5JSMpr6zi4cJgv/vCMjz//lDuP3mdyeppQZ3dR/oHEu4vedXcncO0%2bZCtcBXLuIsxun5gaAmhWrsdptx0puxKxrSvkbPwA99XzHNON05Ovp1YEtFKaRWNJ6fMqsKjUVOcpqVLmc2BunqKqGjSlBkZ6umkUQTqwf4TujnZ62lpRpxTRn3%2bLobhPmcv6Etue32H0miYnwkx2bJSYBF7IgmJxEADr7y7KPzGdnPhgFDH%2bZEf6IBfOy8V1ZoQ3GRE%2bpImKqArxI8XHmRhfB6Ki0/EKSkaSkpBDWKToO9GvBZU6bIMDdPX2ib73JS8mEnlosOgtH9rXpvCFAD6zWwoZUQFECFDZsX47ie4eXFym5ekvazgV3MIT6xKnjyxy4tC7nBJlPT40xJh43/TYGIdE1t%2bZP8T8zCxXrl5lcmqa6elZZkXAm61WThw/ztTEJIfm5hjoGhLtcoJDw0scHbuEfustyrz7yUvRI4%2bPpza7nhuL7/PtV39l3DZPomMOmiQpmpQAFLF%2byKJ8RJX4kBHmhTTMmxR/V5I8nUjwdRT4sQdv72B2O/ohufXgLuevXaWusxNVhZGswmKy5PnIwgNRx4ahigpFFhtAtX2y6HUrd1YbqWuxUpgYywb77WjW%2bYv9Jo7%2bPJ2TyTaeaBc4kNdAdWoetQoldbk5mAtzMcmk1KryMOVmUa7IoaWziwpzPVpjA1k5CspKSzHq9Rh1Riq0GlHqMmqk%2b2n1uU%2bz6w3qXS9jDB6iKKea3poZfvjX/8c/PiemDvLjv/0ZRaKU4DUR1Ctyqc6NoiIzCp0sRqzRFKdFoEkOIj8hAE1aiLBg5Dm5pMtVSErFIToFUI3NH2FQvKyopha5opDcqDDUUSEUx4ejjvAnNSWZjtdSqX8hknP%2bDXz%2bT0bOLytk0kXG1C/SqbaT8VgxzRfKI1yMaaQhXEp/SRlt8mxqkyKpTY6kKioIQ0o8%2bZFhdAkwrB2cpHFsgabRecotVnRGE3q9jprKUhJ8AigK7KNj9xf0b/ktfT6f0Jo8g1ZMmi8/%2bdfnzv/wHz9yvG%2bKv//0d0aLzKyXvIQmvJCu0hQaCxJpLU7DVpqOJT8BkzyaGmUcVXnJlAjrHRmla3QayU5BbBwcvdgn5rSdoy8O7iEEBEQjFT2lz5VhU6bSpUonLzsTOxc39jq5c2KDlo8lGi5LZLTF51BcU8mseoo/lSzxjfo4VxObRQDSuH1ikamaKhpTIujKT6NDk0t%2bhpzQQAFgBSpS5YVEJmUhVarJUBaRkKFAliWYX2EZURGFyF0f0LfvGxb8vmPI/RssiX3UKSz8/T//4f7f%2be/PjcOnyHjFnlcl/0uwzFT2mwoYMGTRq5cxUCOnS59DZ1U2tpJUjCX55Kk0KNUqZEo5knC/cCL8I4kIjCYqOJbkOCmhAZF4OnuSFhmBQZ5MszqTYD8fgaBBJARH0qKrRRkaR6LgCzaTlia9haHcbp5V3uX7nt/wxfR17i0s8uTuXR7fPM/dEwIYR7rIixd/JzSCaDGzC9TlVOjMlFbUUFJloUClQ5FnolDTTmp8O57b64hdc5vWt59xKOD3dHk8ozqpgRpZNT/99b8CMFxkweN/v0W4ZA2a/%2bPA7p%2b9Rvy%2bZEYayhm1qjlgK2ZC2FiDmonGAsYbCuhqradCtJpKjGRDoxWJk2c0rgFJ7HQIYoe9P%2bu3uuHiEUF5USWZkdEkC9TMEPM01MOfQPcAgj2DOW0bZ354kuSwJDJC0tBHl7CYfpi7ccf5%2buTT51l5%2btmPNNuecujI75/ff/v11yhjBF2WiX6vsPDw//6Jh7//M9c%2b%2bQM3PvuGqXM3Wbz7Eac//C1Hbj0QzNBK9Ir36HL8M4MBggPseYBi%2b1VUCa1889W/8bu775Mv2Ul3sZnqbVGE/I81rPq5GNcJFfQ2l9LaYqbZXEJJYSZF6lwGGjQMWRQ01FZRUlkhwPYAB8f2I4mQFpNd0UxWSS1SYRqNAKXsSvTVzfTpytlfmk2LPAVtZi6x4enUFhq42THF1f45umpbqNWa0ae2UB1n5Jb1KH//40/PHe7tecL161/T1vqYZ198/3zv/oXTmLTlmBraGT5ymv3zC8wuXWXh9iPGT11h4MgZWoZnsE4uYGgYIcf1JofDv%2bVG9tcM%2b35Mrf%2bHyOItDNRO8eTqb3B9cSUGVRHJ6xzwkqwgcHschRk5FMrjMBnLqVRnI0uJRJmThkmdRr3VyIQY%2bc0N9fRplQzrypB4R8pILjSRrjaSUFBFuaqRppI2qg0t9NW2MWIWFFVfi0mjIyZSybHWg9zrmubm4GHeO3QCvU6PbG8rAY7xVBhM/PWnH/jq2b9z4sQzero/Ynz8Kbdvfc1PArQ/%2b%2bC%2bIEV1%2bHiHsGLFGjYKphkYkYR1%2bgyJ2Wre3i5EmRAya9dsIik6l9LwgzT6LDEacIuOoHcwRk%2bTlVJJlE8EloI%2bFEJ3rP/ZGna8ak%2bubxGWqgYqSrMoElnPkOcSkaklIymK4sIs5IlBlMeEMSFKv9FSQ3dRHsNilbiHZBKeriY4Phe5rhG92ow0UE50vBRTfi7WHIGe6SFkxiXRWDPK3aEFbjaNcrV1gtuDR7BUWsgP7kHqX4m/kKtXL1/ju7%2bIChj4nMHhL%2bno/pwLV//Cf/7wPTPGQkGND%2bLjE8Qbr69k3eoNQsJGcarzMqGRqYLXv8matzbwyitvkhaWgTV1EpvvJWadn9GfcB59%2bDFSY0wEhwaKVgygQmUQpMpAeY6GSlGtFms15dos1HkpJKenEZWSjTwjjvJ8AeJRggjtWM94RBgWQyUDZRp6youR2AvUdPSLw945FEVZPaamTvJyyzEIgGkpMzBQXsFYaSWq9Dx6TL18ICrgcu0Q50393GqfZa57gqKkQeL98ggNi2eoZ5x//%2bgpv754iaXZeR5fO8f3n9/h8cVDHKguZ35qkaS4DNauXseWjVsI94njRNkiYTGZRLjYk%2bK%2blijnVdQmpnJQM89g%2bhVGYmY4aariqGkAbVapAOlACtPSRKazUeSkUCBPQCNKurrWQLEqg7ycBKKjg1FmRKGQxqLNTRI8wBfVtrUYXF0wVZYxqhPgKCaUxCNcTlCqAt%2bYFBSmZsqb%2bhhpG6TX2Io5rxiLMo/OijKK8zXM28a4WTfKOfMAZ429nG8e49L4AlpFNqnhrkKkBGBr6OF2/TwDomVGWio42mFgsEbLSLWYz6KVGqobUKYr2LxxI7t3bCcqMp3B7kWiM4vpkkbwwBrEuDqQQyVC0e1LxHNzrJCw0SyWLuNR/c%2b5ZFjOpdrNHK/xZMFgj14RREpCFLnydFTafDLTIpEKzpESH0N4RBDJgsekJMfgJKj7tuXLef3VFfjstadNmYVVJcZgf2k9IyWNDMlMTKXpmI4sZCa7ioWKNmYLhKCpEs9rrFwRmbs/eoILwulTwvmTVT2csU1wc2yR2lIhoPw9yJWms39wluM95%2bnRtmIsEAEdv0Df3El0guFpZHk0WepRpckIdvfFTgQgISaVuYlTooStdGaFc9eWJLKjZEblybbtEcgyCtlpl8yoYgU3bG7cqdvE45aV9BV7c8rsSJ3SAz9fP3bt3MOrr63ihV%2b8RERYDA2NHWQqVGTk5qPMl5OQlklqRibe/oFCHQbRosykKT8byaJ1QIy1Axw3D3LcOMCirptDTf0c7BjiqGBZR/tmWOyZZMHYQb8ISLMAS3NWCabkAprzKmhUlFAhl5OXLPi50UybaKGZkXlmRSVN1tjoHNjPjz/8hW//9EeWlpYoyCtgcvQAUyPTWC1tdDW20d3Wz1D3CMN1jfQUxHBQCKO67ETBF/LJzaoiLFRGq0D19tJE6lI305a9kUF9CGM6LxFMX0GaIvD2C8RZiDZPDwcSYmPIU2SSk51CUnIyqUkxyLLTn1uaYKLpKXGC74SRmRCJJEdZTm5BBQVFehSqKnIFIVHKVKQFhlOZpaVRXoElu5SyWDnFYVIqQqSURgigCUxFH5GNPk5OqwDQ4gQ5ZZWNlIj3FCqraKprp61/gAKhLeqEk8%2b%2b/MPzUTg1NcW3//In7ty5g7qgEl1ZI5XCTIZOWprG0FW00FCzH5OugxbrkNAG4t7SQa14Zi6soy/DzEBxJwdLhezOrWMiv5kxRR3jynqm1Famq7qYK%2b%2bmW1HDXLCOY2F1HMhoYqqwncn8Vobl4nvZTczLWzkgE0RImV%2bJskCHpkiwMLUBqXC2WATCmJXHXPUAd/oXudk8y73GKe41TfHYNsf9llnes07zqP8416xTfNI%2bR3dOBQmZgsYWlIn%2byxJO6cjLyqWzzIkPr3RirNLS19fPmTNnGN4/IVighcpKvSAsnZRq6jBUWp8Ho1rXhqHMwp2bd/juuz/T2tSFWddAuaGWtpJm7ndc4ErvRT4avceN1jM86LrMnfYL3Gg5Lc55miuNi/x6%2bDpnWxb5UH2YZ3nH%2bef6JR61XeTTlks8ab7IZ40X%2bLbpOp8aTiHJlArhk11MgaxMKK0KwdQqyMwqFCWdwaSpj5MNouerBzlnGuSMoY8r1UOcNvSyWNklwHCYBX0PFy1D9OQUU5qeT6WygvRUOUOCKSaFOnPe%2bjK8H8L5jk3Eh%2b4lNU3KycPdXJgQJRrvS6utG115Da2NfbQ09mCpbuP2zQd89eWXnD65xI9//RsNxkZqc0Swcky8Wz3D4Vohp5sWOaqb4KR%2bmmO6SdG6ExyrGuNIxQDnameYNoozKwa4JSbUQskw5w1T3CyfZjSnkV61qJy6fmYbB5BEObjTFKegMUyOJThLjKEgPO0diHXx5pAYdZfMI9ys6uNuZS/vVfTwvn6A98TLrwm8uC%2byf1k8v999iAclLRyPyxHiqRBpXAKFOVK0sS/z7cldcMeVpbpfkiRQeb9%2bD/9yzpXvz%2b8TKvNF6uqa6bW10SvW9uo6rp4997xVvvriGUvHTvDDX77now8%2bpDtDy%2bGkeu52XuB62xKfd93gjvEo943HxHmOcl13SKyHuWI6yKOOc5wxz/LbwsN8J1vkgeFdPjAs8LBwgjTXOPY5hpOlqiRCNyQwICWMnOQocoS%2blyckUJSejjlfQUWSVES7n3si449LOvmwpIP7pR081PVyTd/LRQGWt0R1nBVVcrVjhntlrYwLldXRXs14VxOqrFiqpb8SUm23sK1YZS%2bi16iplb7ON4vr4aE3YyUvkpsaSFtdA731dVgFS3v8/vt89unHPP34CdcunOPqqWP87W//wURTA8MhpSyZ50TlzfOb2pNcKpniSuk050omWCrez6XKA5yq2M/1%2bmlO1HUxIaZal0c%2b7XFlLASZOO6sQ%2boWRWGWmjzR%2bvq%2b40iazRoMxbmCUclp1mppV2uw5YkAxKdwqqyNp/I6/phWzVeyep7kW3lc3MGdsg5uCLtvHuKaqJI7XQf5SATknYIiaqqLqRUMS6OQ09/bxfVTPSz0RCANWkmz0PmK6G38bmYF3Hubu8NrCXNbRZ%2btmZHeTtrrzXz86Df89rOnXDpzgqWTi/y38J2vt3LOu5Ybte9w17zAV5YL3NPO8VB7iNvFs1wrOsB7ZVPcyBXTLNaA0tcVVaj38/8MFSYHowjwIXqdPRkOoSIRZSIA5fRNnUVirVHTKxTSmMXCfmM1Q2YLbYJWViQksSSy%2blRRzzNpDZ/lNvBBfhPvF7dyXQTmUmkrt2pEn%2bm6uNQ8zj9XtTMtRpxNSNGeOhPd9dU0mvS06CuxNbeTnxrJWIeNAjHr6xRrebhk5MisYHblgpt39DM5PMBARxvHD4tgCs1wZHaSd4Vdu3CWqyfPigqoZSKygsvGg9yomuN3VSe5XjjJLc0MVzQTnFePcE0zyrHQGk64alHucyNh114yvN2I8nNj9cpVbHnlLZL2%2bKPN0yDLLyG0%2bRASW53Iem053YIWdteIkhFm1ZViSE3nTJmNjzRtfJZn5RNBan6tauGRGD93yzsFoHTy0DLC9X9UQMcsHwmaPKPRMjDQzHhfC6O9NmZHepjsaeLIeLeQz61M9LVirRFjMl/N6MAwI13tHJ4YYWZ0kPnRAU4cnOD49AjvjnXz7oE%2bjuzvEL9r58hoB7PddUwlG3hgPsoD0fPfVF/mgaDKD4vmuVs6z7WCMe4rxzjnb%2bGqRxWWAH9Kvb2oSghDlxPDro2ryFrthebtSAH6MpQlBkq0Qgu0WIrobbEwOzgiDjzK7PgEA92dVKSlc7TSxu3yDm6L%2bXpH3cJ1sd4QSvF8iY0zpTYxEfo5KRjj2YZhERDhuDKfxlpBm3MzhWqLRV9UgLU0n/HOBozyRDQ5GRTJpailibSbtBzostKsL8ZoMNLePcB4fxczQz0cHO6iy1ovwLFJnK2FrqYmxlprGEkq53z5JBcrp3msX%2bSCeozLWpH94nFOKAU1l3cz5yXot5ManY8HKjcnLNJo2soycLPbQM4GP7r2yslOy0BbZsTU3M3/B6VHEjldqqPBAAAAAElFTkSuQmCC' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Hacked Johnny's Lab","path":"/blog/hacked-johnnys-lab/","date":"June 25, 2024","description":"There was a recent event “Hack Johnny’s Lab” by Robonomics and I believe I did hack it in a way! Apart from the very first try which I lost due to rules misunderstanding, I won every round I took part in and here is a short “howto” story.","content":"\nSo, a quick and necessary rules recap: 12 words in a mixed order, a 5-minute video of a TurtleBot 4 wandering around a lab \nand spoiling the mnemonic phrase word order, 5-20 participants willing to win and a free Sunday to think up a strategy.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nI’m sort of familiar with programming and I have a decent laptop and almost no skill in image recognition. More than that, \nI decided to play it fairly, which means no video downloading, no playback speed abuse, no playbar navigation. \nSo the picked strategy was a good old bruteforce. Sounds more hacking that anything.\nWhat do we have here: a set of 12 words in a mixed order. This gives us 12! (factorial) options of phrases \n(479’001’600 to be precise). Quite an amount to process!\n\n\n## Strategy 1: dumb and straightforward.\n\nWell, what else do I need, just go and sort through! But here is the first trick: 12! mnemonic phrases just didn’t fit in \nmy 64 GB RAM! I got a SIGTERM error in the IDE console. \nSo I created an [iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) and started the process. \nIt took me some time, not sure exactly, how much, but within 30 seconds, to calculate the number of combinations. \nJust an evaluative run. But the thing is: my laptop didn’t even spin its fans at max! A single core was loaded. \n\nI googled a Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) package to load all \nthe logical cores of my CPU (20 of them) to parallel the computations. Otherwise, it would have been an eternal journey. \nBut with that I had to split my iterator in 12 parts. The itertools multiprocessing packages do work together, \nbut when a whole set of options is in the RAM. That was not my case, so the following was performed:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nFrom that moment and ever I would use this strategy to make my CPU load monitor look like this:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nI believe this shortened the execution time down to around 5 seconds. I got the best way to iterate through \nthe combinations but there were just too many of them! The first step involved performing roughly 480 millions \nextrinsics in the network. The node would simply ban me for DDOS and even without that It would take forever!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nJust for a debugging reason I started the script (for node communication I used a \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) package) and noticed that prior to call \nperforming I got errors like _invalid mnemonic phrase_. A clue! If I could validate the combination on prem, \nI would save tons of time! GitHub parsing led me to \n[this](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nline of code and I added a combination validation to my script. This has reduced the number of potential extrinsics down\nto roughly 39’000’000 12 times faster!\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nBut still, 39 million calls would ban me forever, so I needed more digging. How could I significantly cut the \nnumber of calculations? Well, by a little bit betraying my initial strategy. See, I was going to avoid video watching, \n“a hacker, who won’t even need a video”, but the math made me change my mind. Change it to a 132 times faster strategy. \nBelow is the explanation:\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nWith that I only needed to know two correct positions of words in a phrase (one would take too long, experiment-validated). \nI would iterate through a 10! combinations, insert two words in correct positions and validate the phrase, \ncutting down the options to approximately 300’000 quite a decrease! More that, 10! combinations set fitted in my RAM, excellent!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAlso, rather than trying to transfer all the tokens each 300k times and calling a public node for that I decided to set \nup my own local Robonomics node synchronized with the chain and ask it for a resulting account address balance! \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (I’ve set a cache limit so that my \nlaptop won’t blow up with chain data in its ROM) I gave it a try and.. this was a disaster. Network transactions \n(even within a localhost) took too much time. I didn’t even wait till the end, it was obviously way slower than \nwatching a whole video. If only I could know the exact address of the account! But for that I need a mnemonic phrase… **Or do I really?**\n\nLook. The rules say that the desired account has **exactly** 42 XRT. Why wouldn’t I get all the active addresses in the network,\nfilter them by having exactly 42 XRT and compare each generated address with a list of possible targets \n(around 20, decreasing to 1 in the end). Easy to say and to do. \n\nNow, after modifying my script once more I finally made it to only one query and one transaction which would for sure \ngive me the desired prize.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nNow, after I watched 25 seconds of the video (meanwhile filling in the words of a mnemonic), \nI would only need 30 seconds at max to steal the reward. Hacked it.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"تم اختراق مختبر جوني","path":"/blog/ar/hacked-johnnys-lab/","date":"June 25, 2024","description":"كان هناك حدث حديث بعنوان 'Hack Johnny’s Lab' من تنظيم شركة Robonomics وأعتقد أنني نجحت فيه بطريقة ما! وبصرف النظر عن المحاولة الأولى التي خسرتها بسبب سوء فهم القواعد، فقد فزت بكل جولة شاركت فيها، وإليك قصة قصيرة عن كيفية القيام بذلك","content":"\nلذا، إليك ملخص سريع وضروري للقواعد: 12 كلمة بترتيب مختلط، ومقطع فيديو مدته 5 دقائق لـ TurtleBot 4 وهو يتجول في مختبر ويفسد ترتيب الكلمات في العبارة التذكيرية، و5 إلى 20 مشاركًا على استعداد للفوز ويوم الأحد المجاني للتفكير في استراتيجية.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nأنا على دراية بالبرمجة ولدي جهاز كمبيوتر محمول جيد ولا أمتلك أي مهارة تقريبًا في التعرف على الصور. علاوة على ذلك، \nقررت أن ألعب بشكل عادل، وهو ما يعني عدم تنزيل أي فيديو، وعدم إساءة استخدام سرعة التشغيل، وعدم التنقل عبر شريط التشغيل. \nلذا فإن الاستراتيجية المختارة كانت عبارة عن قوة وحشية قديمة جيدة. يبدو الأمر وكأنه اختراق أكثر من أي شيء آخر.\nماذا لدينا هنا: مجموعة من 12 كلمة بترتيب مختلط. وهذا يعطينا 12 خيارًا (عامليًا) من العبارات \n(479’001’600 على وجه التحديد). كمية كبيرة من المال تحتاج إلى معالجتها!\n\n\n## الإستراتيجية 1: غبية ومباشرة.\n\nحسنًا، ��اذا آخر يحتاج، فقط اذهب وانقب! ولكن ها هو الخدعة الأولى: 12! العبارات الذاكرية لم تناسب فقط \n64 جيجابايت من ذاكرة الوصول العشوائي! حصلت على خطأ SIGTERM في وحدة التحكم IDE. \nلذا قمت بإنشاء [مكرر](https://docs.python.org/3/library/itertools.html#itertools.permutations) وبدأت العملية.\nاستغرق الأمر مني بعض الوقت، لست متأكدًا على وجه التحديد، ولكن في غضون 30 ثانية، لحساب عدد التركيبات.\nتشغيل تقييمي فقط. ولكن المشكلة هي: لم تقم الكمبيوتر المحمول بتشغيل مراوحه حتى الحد الأقصى! تم تحميل نواة واحدة فقط. \n\nلقد بحثت عن حزمة Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) لتحميل كل \nالنوى المنطقية لمعالج الكمبيوتر الخاص بي (20 منها) لتوازي الحسابات. وإلا، كان سيكون رحلة أبدية. \nولكن مع ذلك كان علي أن أقسم محدد التكرار الخاص بي إلى 12 جزءًا. تعمل حزم multiprocessing itertools معًا، \nولكن عندما يكون مجموعة كاملة من الخيارات في الذاكرة. لم يكن هذا حالتي، لذا تم تنفيذ ما يلي:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nمنذ ذلك الوقت وحتى الآن سأستخدم هذه الاستراتيجية لجعل مراقبة تحميل معالج الكمبيوتر الخاص بي تبدو هكذا:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nأعتقد أن هذا قصر وقت التنفيذ إلى حوالي 5 ثوانٍ. حصلت على أفضل طريقة للتكرار من خلال \nالمجموعات ولكن كان هناك الكثير منها! الخطوة الأولى تتضمن تنفيذ حوالي 480 مليون \nعملية خارجية في الشبكة. سيحظرني العقد ببساطة لـ DDOS وحتى بدون ذلك سيستغرق الأمر إلى الأبد!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nفقط لسبب تصحيح أخطاء بدأت النص (للتواصل مع العقد استخدمت \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) حزمة) ولاحظت أن قبل الاستدعاء \nالأداء حصلت على أخطاء مثل _عبارة ذاكرية غير صالحة_. إشارة! إذا كنت أستطيع التحقق من الجمع على الأرض، \nسأوفر الكثير من الوقت! توجهت إلى تحليل GitHub \n[هذا](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nسطر الكود وأضفت التحقق من الجمع إلى النص الخاص بي. هذا قلل عدد العمليات الخارجية المحتملة إلى حوالي 39 مليون مرة واحدة!\nولكن لا يزال، 39 مليون استدعاء سيحظرني إلى الأبد، لذا كنت بحاجة إلى المزيد من البحث. كيف يمكنني تقليص بشكل كبير\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nعدد الحسابات؟ حسنًا، بقليل من خيانة استراتيجيتي الأولية. انظر، كنت سأتجنب مشاهدة الفيديو، \n“هاكر، الذي لن يحتاج حتى إلى فيديو”، لكن الرياضيات جعلتني أغير رأيي. غيّرها إلى استراتيجية أسرع 132 مرة. \nأدناه هو التفسير: \nمع ذلك، كان علي أن أعرف مواقع كلمتين صحيحتين في عبارة (سيستغرق واحدًا وقتًا طويلاً، تم التحقق منه بالتجربة).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nسأتكرر من خلال 10! مجموعات، أدخل كلمتين في المواقع الصحيحة وأحقق العبارة، \nمما يقلل من الخيارات إلى حوالي 300’000 انخفاضًا كبيرًا! أكثر من ذلك، مجموعات 10! تناسبت في ذاكرتي، ممتاز! \nأيضًا، بدلاً من محاولة نقل جميع الرموز 300 ألف مرة واستدعاء عقد عام لذلك قررت إعداد\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nعقد Robonomics المحلي الخاص بي متزامنًا مع السلسلة وطلب منه رصيد حساب النتيجة! \nالاستعلام أسهل بكثير من عملية خارجية. بعد ليلة كاملة من المزامنة (لقد وضعت حدًا للذاكرة المؤقتة بحيث) \nالاستعلام \"أسهل\" بكثير من الاستعلام الخارجي. بعد ليلة كاملة من المزامنة (لقد قمت بتعيين حد ذاكرة التخزين المؤقت حتى لا ينفجر الكمبيوتر المحمول الخاص بي ببيانات السلسلة في ذاكرة القراءة فقط الخاصة به) قمت بتجربته وكانت كارثة. معاملات الشبكة\nمشاهدة فيديو كامل. لو كنت أعرف العنوان الدقيق للحساب! ولكن لذلك أحتاج عبارة ذاكرية… **أم حقًا؟** \nانظر. تقول القواعد أن الحساب المطلوب يحتوي على **بالضبط** 42 XRT. لماذا لا أحصل على جميع العناوين النشطة في الشبكة،\n\nفرزها بوجود 42 XRT بالضبط ومقارنة كل عنوان تم إنشاؤه بقائمة الأهداف المحتملة\n(حوالي 20، تنخفض إلى 1 في النهاية). سهلة القول والقيام بها. \nالآن، بعد تعديل النص الخاص بي مرة أخرى أخيرًا وصلت إلى استعلام واحد فقط وعملية واحدة ستمنحني بالتأكيد \n\nالجائزة المرغ��بة. \nالآن، بعد مشاهدة 25 ثانية من الفيديو (في الوقت نفسه ملء كلمات ذاكرية)،\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nسأحتاج فقط إلى 30 ثانية كحد أقصى لسرقة الجائزة. قد نجحت. \nسأحتاج ف��ط 30 ثانية كحد أقصى لسرقة الجائزة. تم اختراقها.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ar"}},{"node":{"title":"Gehacktes Johnny's Labor","path":"/blog/de/hacked-johnnys-lab/","date":"June 25, 2024","description":"Es gab kürzlich eine Veranstaltung „Hack Johnny's Lab“ von Robonomics und ich glaube, ich habe es irgendwie gehackt! Abgesehen vom allerersten Versuch, den ich aufgrund eines Regelmissverständnisses verloren habe, habe ich jede Runde gewonnen, an der ich teilgenommen habe, und hier ist eine kurze „Anleitung“.","content":"\nAlso, eine kurze und notwendige Zusammenfassung der Regeln: 12 Wörter in gemischter Reihenfolge, ein 5-minütiges Video von einem TurtleBot 4, der in einem Labor umherwandert\nund die Wortreihenfolge der Eselsbrücke durcheinanderbringt, 5-20 Teilnehmer, die gewinnen wollen, und ein freier Sonntag, um sich eine Strategie auszudenken.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nIch kenne mich ein wenig mit Programmierung aus und habe einen anständigen Laptop und fast keine Fähigkeiten in der Bilderkennung. Mehr als das, \nIch habe beschlossen, fair zu spielen, was bedeutet, kein Herunterladen von Videos, kein Missbrauch der Wiedergabegeschwindigkeit, keine Navigation durch die Wiedergabefortschrittsleiste. \nAlso war die gewählte Strategie ein guter alter Brute-Force. Klingt mehr nach Hacking als nach irgendetwas anderem.\nWas haben wir hier: eine Menge von 12 Wörtern in gemischter Reihenfolge. Das gibt uns 12! (faktorielle) Möglichkeiten von Phrasen\n(479'001'600 um genau zu sein). Eine ziemliche Menge zu verarbeiten!\n\n\n## Strategie 1: dumm und geradlinig.\n\nNaja, was brauche ich noch, einfach mal durchgehen und sortieren! Aber hier ist der erste Trick: 12! Merksätze passten einfach nicht rein\nmeine 64 GB RAM! Ich habe einen SIGTERM-Fehler in der IDE-Konsole erhalten. \nAlso habe ich einen [Iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) erstellt und den Prozess gestartet.\nIch habe einige Zeit gebraucht, ich weiß nicht genau, wie viel, aber es dauerte ungefähr 30 Sekunden, bis ich die Anzahl der Kombinationen berechnet hatte.\nNur ein evaluativer Lauf. Aber das Ding ist: Mein Laptop hat nicht einmal seine Lüfter auf Maximum gedreht! Ein einziger Kern war belastet. \n\nIch habe ein Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) Paket gegoogelt, um alle \nlogischen Kerne meiner CPU (20 davon) zu parallelisieren. Andernfalls wäre es eine ewige Reise gewesen. \nAber damit musste ich meinen Iterator in 12 Teile aufteilen. Die itertools multiprocessing-Pakete arbeiten zusammen, \naber wenn ein ganzes Set von Optionen im RAM ist. Das war nicht mein Fall, also wurde das Folgende durchgeführt:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nAb diesem Moment und für immer würde ich diese Strategie verwenden, um meinen CPU-Auslastungsmonitor so aussehen zu lassen:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nIch glaube, dass dies die Ausführungszeit auf etwa 5 Sekunden verkürzt hat. Ich habe den besten Weg gefunden, um durch \ndie Kombinationen zu iterieren, aber es gab einfach zu viele davon! Der erste Schritt bestand darin, ungefähr 480 Millionen \nExtrinsiken im Netzwerk durchzuführen. Der Knoten würde mich einfach für DDOS sperren und selbst ohne das würde es ewig dauern!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nNur aus Debugging-Gründen habe ich das Skript gestartet (für die Knotenkommunikation habe ich ein \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) Paket verwendet) und bemerkt, dass vor dem Aufruf \nAusführung erhielt ich Fehler wie _ungültige mnemonische Phrase_. Ein Hinweis! Wenn ich die Kombination vor Ort validieren könnte, \nIch würde Tonnen von Zeit sparen! Das GitHub-Parsing führte mich zu \n[diesem](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nCodezeile und ich habe eine Kombinationsvalidierung zu meinem Skript hinzugefügt. Dies hat die Anzahl der potenziellen Extrinsiken auf ungefähr 39'000'000 12-mal schneller reduziert!\nAber trotzdem würden mich 39 Millionen Anrufe für immer sperren, also musste ich weiter graben. Wie könnte ich die\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nAnzahl der Berechnungen signifikant reduzieren? Nun, indem ich meine ursprüngliche Strategie ein wenig verrate. Sehen Sie, ich wollte das Ansehen von Videos vermeiden, \n„Ein Hacker, der nicht einmal ein Video braucht“, aber die Mathematik hat mich umgestimmt. Ändern Sie es in eine 132-mal schnellere Strategie. \nNachfolgend die Erklärung: \nDafür musste ich nur zwei richtige Positionen von Wörtern in einem Satz kennen (eine würde zu lange dauern, experimentell validiert).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nIch würde durch 10! Kombinationen iterieren, zwei Wörter an richtigen Positionen einfügen und den Satz validieren, \nwodurch die Optionen auf etwa 300'000 reduziert wurden, eine ziemliche Abnahme! Mehr noch, 10! Kombinationen passten in meinen RAM, ausgezeichnet! \nmeinen eigenen lokalen Robonomics-Knoten mit der Kette synchronisiert und ihn nach dem Kontostand einer resultierenden Kontoadresse gefragt!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAnstatt zu versuchen, alle Token jeweils 300.000 Mal zu übertragen und dafür einen öffentlichen Knoten aufzurufen, habe ich beschlossen, Folgendes festzulegen:\nDie Abfrage ist „einfacher“ als eine Extrinsik. Nach einer ganzen Nacht des Synchronisierens (ich habe ein Cache-Limit festgelegt, damit mein \nAbfragen sind viel „einfacher“ als extrinsische Transaktionen. Nach einer ganzen Nacht des Synchronisierens (ich habe ein Cache-Limit festgelegt, damit mein Laptop nicht mit Kettendaten in seinem ROM explodiert) habe ich es versucht und … es war eine Katastrophe. Netzwerktransaktionen\ndas Ansehen eines ganzen Videos. Wenn ich nur die genaue Adresse des Kontos kennen könnte! Aber dafür brauche ich eine mnemonische Phrase… **Oder brauche ich das wirklich?** \nein ganzes Video ansehen. Wenn ich nur die genaue Adresse des Kontos wüsste! Aber dafür brauche ich eine Eselsbrücke… **Oder brauche ich das wirklich?**\n\nSchau. Die Regeln besagen, dass das gewünschte Konto **genau** 42 XRT haben soll. Warum sollte ich nicht alle aktiven Adressen im Netzwerk bekommen,\nfiltere sie nach genau 42 XRT und vergleiche jede generierte Adresse mit einer Liste möglicher Ziele \n(ungefähr 20, die am Ende auf 1 reduziert werden). Leicht gesagt und getan. \n\nJetzt, nachdem ich mein Skript noch einmal modifiziert habe, habe ich es endlich auf nur eine Abfrage und eine Transaktion gebracht, die mir sicherlich \nden gewünschten Preis geben würde.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nJetzt, nachdem ich 25 Sekunden des Videos angesehen habe (währenddessen die Wörter eines Mnemonics ausfüllend), \nbräuchte ich maximal 30 Sekunden, um die Belohnung zu stehlen. Gehackt.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"de"}},{"node":{"title":"Χακαρισμένο το εργαστήριο του Johnny","path":"/blog/el/hacked-johnnys-lab/","date":"June 25, 2024","description":"Υπήρξε πρόσφατο γεγονός “Hack Johnny’s Lab” από την Robonomics και πιστεύω ότι το χάκαρα με έναν τρόπο! Εκτός από την πρώτη προσπάθεια που έχασα λόγω παρεξήγησης των κανόνων, κέρδισα σε κάθε γύρο που συμμετείχα και εδώ είναι μια σύντομη ιστορία “πώς να”.","content":"\nΈτσι, μια γρήγορη και απαραίτητη ανακεφαλαίωση κανόνων: 12 λέξεις με μικτή σειρά, ένα βίντεο 5 λεπτών ενός TurtleBot 4 που περιπλανιέται σε ένα εργαστήριο\nκαι χαλώντας τη μνημονική σειρά λέξεων της φράσης, 5-20 συμμετέχοντες πρόθυμοι να κερδίσουν και μια δωρεάν Κυριακή για να σκεφτούν μια στρατηγική.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nΕίμαι κάπως εξοικειωμένος με την προγραμματισμό και έχω έναν αξιοπρεπή φορητό υπολογιστή και σχεδόν καθόλου δεξιότητα στην αναγνώριση εικόνας. Περισσότερο από αυτό, \nαποφάσισα να παίξω δίκαια, που σημαί��ει χωρίς λήψη βίντεο, χωρίς κατάχρηση ταχύτητας αναπαραγωγής, χωρίς πλοήγηση μπάρας αναπαραγωγής. \nΈτσι η επιλεγμένη στρατηγική ήταν μια καλή παλιά βία. Φαίνεται περισσότερο χάκινγκ από οτιδήποτε.\nΤι έχουμε εδώ: ένα σύνολο 12 λέξεων σε ανάμεικτη σειρά. Αυτό μας δίνει 12! (παραγοντικό) επιλογές φράσεων \n(479.001.600 για να είμαστε ακριβείς). Αρκετό ποσό για επεξεργασία!\n\n\n## Στρατηγική 1: ανόητη και απλοϊκή.\n\nΚαλά, τι ��λλο χρειάζομαι, απλά πήγαινε και ταξινόμησε! Αλλά εδώ είναι το πρώτο κόλπο: 12! μνημονικές φράσεις απλά δεν χωρούσαν \nστα 64 GB RAM μου! Πήρα ένα σφάλμα SIGTERM στην κονσόλα του IDE. \nΔημιούργησα λοιπόν έναν [iterator](https://docs.python.org/3/library/itertools.html#itertools.permutations) και ξεκίνησα τη διαδικασία.\nΜου πήρε λίγο χρόνο, δεν είμαι σίγουρος ακριβώς πόσο, αλλά μέσα σε 30 δευτερόλεπτα, για να υπολογίσω τον αριθμό των συνδυασμών.\nΑπλά μια αξιολογική εκτέλεση. Αλλά το θέμα είναι: το laptop μου ακόμα δεν είχε αναπτύξει τους ανεμιστήρες του στο μέγιστο! Φορτώθηκε μόνο ένας πυρήνας. \n\nΈκανα αναζήτηση στο Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) πακέτο για να φορτώσω όλους \nτους λογικούς πυρήνες της CPU μου (20 από αυτούς) για παράλληλους υπολογισμούς. Διαφορετικά, θα ήταν ένα αιώνιο ταξίδι. \nΑλλά με αυτό έπρεπε να χωρίσω τον επαναληπτή μου σε 12 μέρη. Τα πακέτα multiprocessing του itertools λειτουργούν μαζί, \nαλλά όταν ένα ολόκληρο σύνολο επιλογών βρίσκεται στη RAM. Αυτό δεν ήταν η περίπτωσή μου, οπότε πραγματοποιή��ηκε το ακόλουθο:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nΑπό εκείνη τη στιγμή και μετά θα χρησιμοποιούσα αυτή τη στρατηγική για να κάνω τον φορτίο της CPU μου να μοιάζει με αυτόν τον τρόπο:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nΠιστεύω ότι αυτό μείωσε τον χρόνο εκτέλεσης σε περίπου 5 δευτερόλεπτα. Βρήκα τον καλύτερο τρόπο για να επαναλαμβάνω \nτις συνδυασμούς αλλά υπήρχαν απλά πάρα πολλοί! Το πρώτο βήμα περιλάμβανε την εκτέλεση περίπου 480 εκατομμυρίων \nεξωτερικών στο δίκτυο. Ο κόμβος απλά θα με απαγορεύσει για DDOS και ακόμη και χωρίς αυτό θα πήρε αιώνες!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nΑπλά για λόγους εντοπισμού σφαλμάτων ξεκίνησα το σενάριο (για επικοινωνία με τον κόμβο χρησιμοποίησα ένα \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) πακέτο) και παρατήρησα ότι πριν από την κλήση \nεκτέλεσης πήρα σφάλματα όπως _μη έγκυρη φράση μνημονικού_. Ένα ίχνος! Αν μπορούσα να επικυρώσω τον συνδυασμό στον υπολογιστή μου, \nθα έσωζα πολύ χρόνο! Η ανάλυση του GitHub με οδήγησε σε \n[αυτό](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nκομμάτι κώδικα και πρόσθεσα μια επικύρωση συνδυασμού στο σενάριό μου. Αυτό μείωσε τον αριθμό των πιθανών εξωτερικών\nσε περίπου 39.000.000 12 φορές ταχύτερα!\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nΑλλά ακόμη, 39 εκατομύρια κλήσεις θα με απαγορεύσουν για πάντα, οπότε χρειάστηκε να ψάξω περισσότερο. Πώς θα μπορούσα \nνα μειώσω σημαντικά τον αριθμό των υπολογισμών; Καλά, με λίγη προδοσία της αρχικής μου στρατηγικής. Δείτε, είχα σκοπό να αποφύγω την παρακολούθηση βίντεο, \n“ένας χάκερ, που δεν θα χρειαστεί ούτε ένα βίντεο”, αλλά η μαθηματική με έκανε να αλλάξω γνώμη. Να την αλλάξω σε μια στρατηγική 132 φορές ταχύτερη. \nΠαρακάτω είναι η εξήγηση:\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nΜε αυτό χρειαζόμουν μόνο να γνωρίζω δύο σωστές θέσεις λέξεων σε μια φράση (μία θα πάρει πολύ χρόνο, επιβεβαιωμένο από πείρα). \nΘα επαναλάμβανα μέσα από έναν συνδυασμό 10!, εισήγαγα δύο λέξεις στις σωστές θέσεις και επικύρωνα τη φράση, \nμειώνοντας τις επιλογές σε περίπου 300.000, μια σημαντική μείωση! Επιπλέον, οι συνδυασμοί 10! χωρούσαν στη RAM μου, εξαιρετικό!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nΕπίσης, αντί να προσπαθήσω να μεταφέρω όλα τα tokens κάθε 300k φορές και να καλώ ένα δημόσιο κόμβο γι' αυτό, αποφάσισα να ρυθμίσω \nτον δικό μου τοπικό κόμβο Robonomics συγχρονισμένο με την αλυσίδα και να του ζητήσω το υπόλοιπο λογαριασμού λογαριασμού! \nΤο ερώτημα είναι πολύ πιο «εύκολο» από ένα εξωτερικό. Μετά από μια ολόκληρη νύχτα συγχρονισμού (έχω βάλει ένα όριο προσωρινής μνήμης, έτσι ώστε η μου\nΟ φορητός υπολογιστής δεν θα εκραγεί με δεδομένα αλυσίδας στη ROM του) Το δοκίμασα και... αυτό ήταν μια καταστροφή. Συναλλαγές δικτύου\n(ακόμη και μέσα σε ένα τοπικό υπολογιστή) πήραν πολύ χρόνο. Δεν περίμενα ούτε μέχρι το τέλος, ήταν προφανώς πολύ πιο αργό από \nτο να παρακολουθήσω ένα ολόκληρο βίντεο. Αν μόνο μπορούσα να γνωρίζω την ακριβή διεύθυνση του λογαριασμού! Αλλά γι' αυτό χρειάζομαι μια φράση μνημονικού… **Ή μήπως όχι πραγματικά;**\n\nΔείτε. Οι κανόνες λένε ότι ο επιθυμητός λογαριασμός έχει **ακριβώς** 42 XRT. Γιατί δεν θ�� πάρω όλες τις ενεργές διευθύνσεις στο δίκτυο,\nθα τις φιλτράρω έχοντας ακριβώς 42 XRT και θα συγκρίνω κάθε δημιουργημένη διεύθυνση με μια λίστα πιθανών στόχων \n(περίπου 20, μειώνοντας σε 1 στο τέλος). Εύκολο να πεις και να κάνεις. \n\nΤώρα, μετά την τροποποίηση του σεναρίου μου ακόμη μια φορά, τελικά τα κατάφερα με μόνο μια ερώτηση και μια συναλλαγή που θα μου \nδώσει σίγουρα το επιθυμητό βραβείο.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nΤώρα, μετά από την παρακολούθηση 25 δευτερολέπτων του βίντεο (ταυτόχρονα συμπληρώνοντας τις λέξεις ενός μνημονικού), \nθα χρειαζόμουν μόνο 30 δευτερόλεπτα ως μέγιστο για να κλέψω το έπαθλο. Το κατάφερα.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"el"}},{"node":{"title":"Laboratorio de Johnny hackeado","path":"/blog/es/hacked-johnnys-lab/","date":"June 25, 2024","description":"Hubo un evento reciente “Hack Johnny’s Lab” por Robonomics y creo que lo hackeé de alguna manera! Aparte del primer intento que perdí debido a un malentendido de las reglas, gané cada ronda en la que participé y aquí hay una breve historia de “cómo hacerlo”.","content":"\nEntonces, un rápido y necesario resumen de las reglas: 12 palabras en un orden mixto, un video de 5 minutos de un TurtleBot 4 deambulando por un laboratorio\ny arruinando el orden de palabras de la frase mnemotécnica, entre 5 y 20 participantes dispuestos a ganar y un domingo libre para pensar en una estrategia.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nSoy algo familiarizado con la programación y tengo una computadora portátil decente y casi ninguna habilidad en reconocimiento de imágenes. Más que eso, \nDecidí jugar limpio, lo que significa no descargar videos, no abusar de la velocidad de reproducción, no navegar por la barra de reproducción. \nAsí que la estrategia elegida fue un buen viejo ataque de fuerza bruta. Suena más a hackeo que a cualquier otra cosa.\n¿Qué tenemos aquí? Un conjunto de 12 palabras en orden mixto. Esto nos da 12 opciones (factoriales) de frases\n(479’001’600 para ser precisos). ¡Una cantidad bastante grande para procesar!\n\n\n## Estrategia 1: tonta y directa.\n\nBueno, ¿qué más necesito? ¡Simplemente vaya y ordene! Pero aquí está el primer truco: ¡12! Las frases mnemotécnicas simplemente no encajaban\n¡Mis 64 GB de RAM! Recibí un error SIGTERM en la consola del IDE. \nEntonces creé un [iterador](https://docs.python.org/3/library/itertools.html#itertools.permutations) y comencé el proceso. Me llevó un tiempo, no estoy seguro exactamente de cuánto, pero unos 30 segundos, calcular la cantidad de combinaciones.\nSolo una ejecución de evaluación. ¡Pero la cosa es que mi computadora portátil ni siquiera hizo girar sus ventiladores al máximo! Un solo núcleo estaba cargado. \n\nBusqué un paquete de Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) para cargar todos \nlos núcleos lógicos de mi CPU (20 de ellos) para paralelizar los cálculos. De lo contrario, habría sido un viaje eterno. \nPero con eso tuve que dividir mi iterador en 12 partes. Los paquetes de multiprocessing de itertools funcionan juntos, \npero cuando un conjunto completo de opciones está en la RAM. Ese no era mi caso, así que se realizó lo siguiente:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nA partir de ese momento y siempre usaría esta estrategia para que mi monitor de carga de la CPU se viera así:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nCreo que esto acortó el tiempo de ejecución a alrededor de 5 segundos. Encontré la mejor manera de iterar a través \nde las combinaciones ¡pero había demasiadas! El primer paso implicaba realizar aproximadamente 480 millones \nextrínsecos en la red. ¡El nodo simplemente me prohibiría por DDOS e incluso sin eso tomaría una eternidad!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nSolo por una razón de depuración, comencé el script (para la comunicación del nodo usé un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) paquete) y noté que antes de llamar \nrealizando obtuve errores como _frase mnemotécnica inválida_. ¡Una pista! Si pudiera validar la combinación en prem, \n¡ahorraría toneladas de tiempo! El análisis de GitHub me llevó a \n[esto](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nlínea de código y agregué una validación de combinación a mi script. ¡Esto redujo el número de extrínsecos potenciales a aproximadamente 39’000’000 12 veces más rápido!\nPero aún así, 39 millones de llamadas me prohibirían para siempre, así que necesitaba investigar más. ¿Cómo podría reducir significativamente el\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnúmero de cálculos? Bueno, traicionando un poco mi estrategia inicial. Verás, iba a evitar ver videos, \n“un hacker, que ni siquiera necesitará un video”, pero las matemáticas me hicieron cambiar de opinión. Cambiarlo a una estrategia 132 veces más rápida. \nA continuación se explica: \nCon eso solo necesitaba saber dos posiciones correctas de palabras en una frase (una tomaría demasiado tiempo, validada experimentalmente).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nIteraría a través de 10! combinaciones, insertaría dos palabras en posiciones correctas y validar la frase, \nrecortando las opciones a aproximadamente 300’000 ¡una disminución considerable! ¡Más que eso, el conjunto de combinaciones 10! encajaba en mi RAM, excelente! \nmi propio nodo Robonomics local sincronizado con la cadena y preguntarle por el saldo de una cuenta resultante!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAdemás, en lugar de intentar transferir todos los tokens cada 300k veces y llamar a un nodo público para eso, decidí configurar\nLa consulta es mucho “más fácil” que un extrínseco. Después de toda una noche de sincronización (establecí un límite de caché para que mi \nLa consulta es mucho más \"fácil\" que una extrínseca. Después de una noche entera de sincronización (he establecido un límite de caché para que mi\ncomputadora portátil no explote con datos de la cadena en su ROM), lo intenté y... fue un desastre. Transacciones de red\nver un video completo. ¡Si tan solo pudiera saber la dirección exacta de la cuenta! Pero para eso necesito una frase mnemotécnica… **¿O realmente la necesito?** \nviendo un video completo. ¡Ojalá pudiera saber la dirección exacta de la cuenta! Pero para eso necesito una frase mnemotécnica... **¿O realmente no?**\n\nMira. Las reglas dicen que la cuenta deseada tiene **exactamente** 42 XRT. ¿Por qué no obtendría todas las direcciones activas en la red,\nfiltrarlas teniendo exactamente 42 XRT y comparar cada dirección generada con una lista de posibles objetivos \n(alrededor de 20, disminuyendo a 1 al final). Fácil de decir y de hacer. \n\nAhora, después de modificar mi script una vez más finalmente lo logré con solo una consulta y una transacción que seguramente \nme daría el premio deseado.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nAhora, después de ver 25 segundos del video (mientras llenaba las palabras de un mnemónico), \nsolo necesitaría 30 segundos como máximo para robar la recompensa. Hackeado.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"es"}},{"node":{"title":"Laboratoire de Johnny piraté","path":"/blog/fr/hacked-johnnys-lab/","date":"June 25, 2024","description":"Il y a eu récemment un événement «Hack Johnny's Lab» par Robonomics et je crois l'avoir piraté d'une certaine manière! Mis à part la toute première tentative que j'ai perdue en raison d'une incompréhension des règles, j'ai gagné chaque tour auquel j'ai participé et voici une courte histoire «comment faire».","content":"\nAlors, un petit récapitulatif rapide et nécessaire des règles : 12 mots dans un ordre mixte, une vidéo de 5 minutes d'un TurtleBot 4 se promenant dans un laboratoire\net gâchant l'ordre des mots de la phrase mnémotechnique, 5 à 20 participants prêts à gagner et un dimanche libre pour réfléchir à une stratégie.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nJe suis plutôt familier avec la programmation et j'ai un ordinateur portable décent et presque aucune compétence en reconnaissance d'image. De plus, \nJ'ai décidé de jouer équitablement, ce qui signifie pas de téléchargement vidéo, pas d'abus de vitesse de lecture, pas de navigation dans la barre de lecture. \nDonc la stratégie choisie était une bonne vieille force brute. Ça sonne plus comme du piratage que tout autre chose.\nQu'avons-nous ici : un ensemble de 12 mots dans un ordre mixte. Cela nous donne 12 options (factorielles) de phrases\n(479'001'600 pour être précis). Une quantité assez importante à traiter!\n\n\n## Stratégie 1: bête et directe.\n\nEh bien, de quoi d'autre ai-je besoin, juste d'aller faire le tri ! Mais voici la première astuce : 12 ! les phrases mnémoniques ne rentraient tout simplement pas dans\nmes 64 Go de RAM ! J'ai eu une erreur SIGTERM dans la console de l'IDE.\nJ'ai donc créé un [itérateur](https://docs.python.org/3/library/itertools.html#itertools.permutations) et j'ai commencé le processus.\nIl m'a fallu un certain temps, je ne sais pas exactement combien, mais dans les 30 secondes, pour calculer le nombre de combinaisons.\nJuste une exécution évaluative. Mais le problème est le suivant: mon ordinateur portable n'a même pas fait tourner ses ventilateurs au maximum! Un seul cœur était chargé. \n\nJ'ai googlé un package Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) pour charger tous \nles cœurs logiques de mon CPU (20 d'entre eux) pour paralléliser les calculs. Sinon, cela aurait été un voyage éternel. \nMais avec cela, j'ai dû diviser mon itérateur en 12 parties. Les packages de multiprocessing itertools fonctionnent ensemble, \nmais quand un ensemble complet d'options est dans la RAM. Ce n'était pas mon cas, donc ce qui suit a été effectué:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nÀ partir de ce moment et pour toujours, j'utiliserais cette stratégie pour que mon moniteur de charge CPU ressemble à ceci:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nJe crois que cela a raccourci le temps d'exécution à environ 5 secondes. J'ai trouvé le meilleur moyen d'itérer à travers \nles combinaisons mais il y en avait juste trop! La première étape consistait à effectuer environ 480 millions \nextrinsèques dans le réseau. Le nœud me bannirait simplement pour DDOS et même sans cela, cela prendrait une éternité!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nJuste pour une raison de débogage, j'ai lancé le script (pour la communication avec le nœud j'ai utilisé un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) package) et j'ai remarqué qu'avant d'appeler \nj'ai obtenu des erreurs comme _phrase mnémonique invalide_. Un indice! Si je pouvais valider la combinaison sur place, \nje gagnerais des tonnes de temps! L'analyse de GitHub m'a conduit à \n[ceci](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nligne de code et j'ai ajouté une validation de combinaison à mon script. Cela a réduit le nombre d'extrinsèques potentiels à environ 39'000'000 12 fois plus vite!\nMais encore, 39 millions d'appels me banniraient pour toujours, donc j'avais besoin de creuser davantage. Comment pourrais-je réduire considérablement le\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnombre de calculs? Eh bien, en trahissant un peu ma stratégie initiale. Voyez-vous, j'allais éviter de regarder des vidéos, \n«un pirate informatique, qui n'aura même pas besoin d'une vidéo», mais les mathématiques m'ont fait changer d'avis. Changer pour une stratégie 132 fois plus rapide. \nCi-dessous est l'explication: \nAvec cela, je devais seulement connaître deux positions correctes de mots dans une phrase (une prendrait trop de temps, validée par l'expérience).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nJe parcourrais 10! combinaisons, insérerais deux mots aux bonnes positions et validerais la phrase, \nréduisant les options à environ 300'000 une assez grande diminution! De plus, l'ensemble de combinaisons 10! s'adaptait à ma RAM, excellent! \nmon propre nœud Robonomics local synchronisé avec la chaîne et lui demander un solde de compte résultant!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nDe plus, plutôt que d'essayer de transférer tous les jetons toutes les 300 000 fois et d'appeler un nœud public pour cela, j'ai décidé de définir\nLa requête est bien plus «facile» qu'une extrinsèque. Après une nuit entière de synchronisation (j'ai défini une limite de cache pour que mon \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (J'ai défini une limite de cache pour que mon\nordinateur portable n'explose pas avec des données en chaîne dans sa ROM) J'ai essayé et... c'était un désastre. Transactions réseau\nregarder une vidéo entière. Si seulement je pouvais connaître l'adresse exacte du compte! Mais pour cela j'ai besoin d'une phrase mnémonique... **Ou en ai-je vraiment besoin?** \nje regarde une vidéo entière. Si seulement je pouvais connaître l'adresse exacte du compte ! Mais pour cela, il me faut une phrase mnémotechnique… **Ou est-ce vraiment le cas ?**\n\nRegardez. Les r��gles disent que le compte désiré a **exactement** 42 XRT. Pourquoi ne pas obtenir toutes les adresses actives dans le réseau,\nles filtrer en ayant exactement 42 XRT et comparer chaque adresse générée avec une liste de cibles possibles \n(environ 20, diminuant à 1 à la fin). Facile à dire et à faire. \n\nMaintenant, après avoir modifié mon script une fois de plus, j'ai enfin réussi à n'avoir qu'une seule requête et une seule transaction qui me permettrait à coup sûr \nd'obtenir le prix désiré.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nMaintenant, après avoir regardé 25 secondes de la vidéo (tout en remplissant les mots d'un mnémonique), \nil ne me faudrait que 30 secondes maximum pour voler la récompense. Piraté.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"fr"}},{"node":{"title":"Laboratorio di Johnny violato","path":"/blog/it/hacked-johnnys-lab/","date":"June 25, 2024","description":"C'è stato di recente un evento “Hack Johnny’s Lab” di Robonomics e credo di averlo hackerato in un certo modo! A parte il primo tentativo che ho perso a causa di un fraintendimento delle regole, ho vinto ogni round a cui ho partecipato e qui c'è una breve storia su come ho fatto.","content":"\nQuindi, un breve e necessario riassunto delle regole: 12 parole in un ordine misto, un video di 5 minuti di un TurtleBot 4 che vaga per un laboratorio e rovina l'ordine delle parole della frase mnemonica, 5-20 partecipanti disposti a vincere e una domenica libera per escogitare una strategia.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nSono abbastanza familiare con la programmazione e ho un laptop decente e quasi nessuna competenza nel riconoscimento delle immagini. Oltre a ciò, \nho deciso di giocare in modo leale, il che significa nessun download di video, nessun abuso di velocità di riproduzione, nessuna navigazione nella barra di riproduzione. \nQuindi la strategia scelta è stata una vecchia e buona forza bruta. Suona più come hacking che altro.\nCosa abbiamo qui: un set di 12 parole in un ordine misto. Questo ci dà 12! (fattoriale) opzioni di frasi\n(479’001’600 per essere precisi). Una quantità piuttosto consistente da elaborare!\n\n\n## Strategia 1: stupida e diretta.\n\nBene, cos'altro mi serve, basta andare e fare ordine! Ma ecco il primo trucco: 12! Le frasi mnemoniche non ci stavano proprio\ni miei 64 GB di RAM! Ho ricevuto un errore SIGTERM nella console dell'IDE. \nQuindi ho creato un [iteratore](https://docs.python.org/3/library/itertools.html#itertools.permutations) e ho iniziato il processo.\nMi ci è voluto un po' di tempo, non so esattamente quanto, ma entro 30 secondi, per calcolare il numero di combinazioni.\nSolo una corsa valutativa. Ma la cosa è: il mio laptop non ha nemmeno fatto girare i suoi ventilatori al massimo! Un singolo core era caricato. \n\nHo cercato un pacchetto Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) per caricare tutti \ni core logici della mia CPU (20 di essi) per parallelizzare i calcoli. Altrimenti, sarebbe stato un viaggio eterno. \nMa con questo ho dovuto dividere il mio iteratore in 12 parti. I pacchetti di multiprocessing di itertools funzionano insieme, \nma quando un intero set di opzioni è nella RAM. Questo non era il mio caso, quindi è stato eseguito quanto segue:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nDa quel momento in poi avrei usato questa strategia per far apparire il monitor del carico della CPU in questo modo:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nCredo che questo abbia ridotto il tempo di esecuzione a circa 5 secondi. Ho trovato il modo migliore per iterare attraverso \nle combinazioni ma ce n'erano semplicemente troppe! Il primo passo consisteva nell'eseguire circa 480 milioni \nesterni nella rete. Il nodo mi avrebbe semplicemente bandito per DDOS e anche senza quello ci vorrebbe per sempre!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nSolo per motivi di debug ho avviato lo script (per la comunicazione con il nodo ho usato un \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) pacchetto) e ho notato che prima di chiamare \neseguire ho ottenuto errori come _frase mnemonica non valida_. Un indizio! Se potessi convalidare la combinazione in premessa, \nrisparmierei un sacco di tempo! Il parsing di GitHub mi ha portato a \n[questo](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nriga di codice e ho aggiunto una convalida della combinazione al mio script. Questo ha ridotto il numero di esterni potenziali a circa 39’000’000 12 volte più veloce!\nMa ancora, 39 milioni di chiamate mi bandirebbero per sempre, quindi ho dovuto scavare di più. Come potevo tagliare significativamente il\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnumero di calcoli? Beh, tradendo un po' la mia strategia iniziale. Vedi, stavo per evitare di guardare video, \n“un hacker, che nemmeno avrà bisogno di un video”, ma la matematica mi ha fatto cambiare idea. Cambiarla in una strategia 132 volte più veloce. \nDi seguito è spiegato: \nCon questo dovevo solo conoscere due posizioni corrette delle parole in una frase (una richiederebbe troppo tempo, sperimento convalidato).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nAvrei iterato attraverso un 10! combinazioni, inserito due parole nelle posizioni corrette e convalidato la frase, \nriducendo le opzioni a circa 300’000 una notevole diminuzione! Inoltre, il set di combinazioni 10! si adattava alla mia RAM, eccellente! \nil mio nodo Robonomics locale sincronizzato con la catena e chiedergli il saldo di un account risultante!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nInoltre, invece di provare a trasferire tutti i token ogni 300k volte e chiamare un nodo pubblico per questo, ho deciso di impostare il mio nodo Robonomics locale sincronizzato con la catena e chiedergli un saldo dell'indirizzo del conto risultante! La query è molto più \"facile\" di un'estrinseca. Dopo un'intera notte di sincronizzazione (ho impostato un limite di cache in modo che il mio laptop non esplodesse con i dati della catena nella sua ROM), ci ho provato e... è stato un disastro. Le transazioni di rete (anche all'interno di un localhost) hanno richiesto troppo tempo. Non ho nemmeno aspettato fino alla fine, era ovviamente molto più lento che guardare un intero video. Se solo potessi conoscere l'indirizzo esatto del conto! Ma per quello ho bisogno di una frase mnemonica... **O forse sì?**\n\nGuarda. Le regole dicono che l'account desiderato ha **esattamente** 42 XRT. Perché non dovrei ottenere tutti gli indirizzi attivi nella rete,\nfiltrarli avendo esattamente 42 XRT e confrontare ciascun indirizzo generato con un elenco di possibili obiettivi \n(circa 20, diminuendo a 1 alla fine). Facile da dire e da fare. \n\nOra, dopo aver modificato di nuovo il mio script, sono finalmente riuscito a fare solo una query e una transazione che sicuramente \nmi darebbe il premio desiderato.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nOra, dopo aver guardato 25 secondi del video (nel frattempo compilando le parole di un mnemonico), \navrei bisogno solo di 30 secondi al massimo per rubare la ricompensa. Hacked it.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"it"}},{"node":{"title":"ハッキン���されたジョニーの研究室","path":"/blog/ja/hacked-johnnys-lab/","date":"June 25, 2024","description":"最近、Robonomicsによるイベント「Hack Johnny's Lab」があり、私はある意味でそれをハックしたと思います！最初の試みはルールの誤解により失敗しましたが、参加したすべてのラウンドで勝利し、ここに短い「ハウツー」ストーリーがあります。","content":"\nでは、ルールを簡単にまとめると、12 個の単語が混在した順序で並べられ、TurtleBot 4 がラボ内を歩き回り、記憶術のフレーズの語順を台無しにする 5 分間のビデオ、勝利を目指す 5 ～ 20 人の参加者、戦略を考えるための自由な日曜日です。\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n私はプログラミングにはある程度慣れており、まあまあのラップトップを持っていますが、画像認識のスキルはほとんどありません。それ以上に、 \nビデオのダウンロードや再生速度の乱用、プレイバーのナビゲーションなどは一切行わないと決めました。 \n選択した戦略は古典的なブルートフォースでした。それは何よりもハッキングらしいです。\nここに何��あるのか：順不同の12語のセット。これにより、12！（階乗）のフレーズのオプションが得られます \n（正確に479'001'600）。処理するにはかなりの量です！\n\n\n## 戦略1：愚かで率直なもの。\n\nさて、他に何が必要か、ただ行って整理するだけです！しかし、最初のトリックがここにあります：12！ニーモニックフレーズはうまく収まりませんでした \n私の64GB RAM！IDEコンソール��SIGTERMエラーが発生しました。 \nそこで、[イテレータ](https://docs.python.org/3/library/itertools.html#itertools.permutations) を作成し、プロセスを開始しました。\n組み合わせの数を計算するのに、正確な時間はわかりませんが、30 秒以内で時間がかかりました。\n評価用の実行です。しかし問題は、私のラップトップはさえぎりファンを最大速度で回転させることさえありませんでした！1つのコアが負荷をかけられました。 \n\n私はすべての論理コア（20個）を並列計算するためにPythonの[multiprocessing](https://docs.python.org/3/library/multiprocessing.html)パッケージを調べました。そうしないと、永遠の旅になってしまいます。 \nしかし、そのためにはイテレータを12つに分割する必要がありました。itertools multiprocessingパッケージは一緒に動作しますが、 \nオプションのセット全体がRAMにある場合です。それは私の場合ではなかったので、次のように行いました。 \nその時点から、私は常にこの戦略を使って、CPUの負荷モニターをこのように見せるようにしました。\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nこれにより、実行時間が約5秒に短縮されたと思います。組み合わせを繰り返す最良の方法を得ましたが、それらがあまりにも多すぎました！最初のステップは、おおよそ480百万の\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nネットワーク内の外部入力を実行することでした。ノードは私をDDOSのために単純に禁止し、それさえなくても永遠にかかってしまいます！ \nデバッグのために、スクリプトを開始しました（ノードとの通信には \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/)パッケージを使用しました）\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nそして、呼び出しを行う前に、_無効なニーモニックフレーズ_のようなエラーが発生したことに気づきました。手がかり！プレミアムで組み合わせを検証できれば、 \n多くの時間を節約できると思いました！GitHubの解析により、私は \n[これ](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nコード行にたどり着き、スクリプトに組み合わせの検証を追加しました。これにより、潜在的な外部入力の数がおおよそ39'000'000倍速く減少しました！ \nしかし、それでも、3900万回の呼び出しは永遠に私を禁止するでしょう。だから、もっと掘り下げる必要がありました。どうやって計算の数を大幅に削減できるでしょうか？ \n少し初期の戦略を裏切ることで、それを実現できます。ビデオの視聴を避けるつもりでしたが、\n「ビデオを必要としないハッカー」という考えを変えさせたの���数学でした。132倍速い戦略に変更しました。\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n以下に説明します。 \nそれにより、フレーズ内の単語の2つの正しい位置だけを知る必要がありました（1つだけだと時間がかかりすぎることが実験で確認されました）。 \n10！の組み合わせを繰り返し、2つの単語を正しい位置に挿入し、フレーズを検証し、 \nオプションを約300'000に削減しました。さらに、10！の組み合わせセットは私のRAMに収まりました、素晴らしい！\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n自分のローカルRobonomicsノードをチェーンと同期させ、その結果のアカウントアドレス残高を尋ねました！ \nクエリは外部入力よりも「簡単」です。同期化を一晩中行った後（ROM内のチェーンデータでラップトップが爆発しないようにキャッシュ制限を設定しました）、試してみましたが...これは災難でした。ネットワークトランザクション \n（localhost内でも）時間がかかりすぎました。最後まで待つこともなく、明らかにビデオ全体を見るよりも遅かったです。アカウントの正確なアドレスを知ることができればいいのですが！しかし、そのためにはニーモニックフレーズが必要です... **本当に必要なのでしょうか？**\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nまた、すべてのトークンを300k回転送し、それに対して公開ノードを呼び出す代わりに、私は設定することに決めました \n自分自身のローカルRobonomicsノードをチェーンと同期させ、その結果のアカウントアドレス残高を尋ねます！ \nクエリは、外部のものよりはるかに「簡単」です。一晩中同期した後（ラップトップが ROM 内のチェーン データでクラッシュしないようにキャッシュ制限を設定しました）、試してみましたが、これは大失敗でした。ネットワーク トランザクション\n（ローカル���スト内でも）時間がかかりすぎました。最後まで待つこともなく、明らかにビデオ全体を見るよりも遅かったです \nアカウントの正確なアドレスを知ることができればいいのに！でもそのためにはニーモニックフレーズが必要です... **本当に必要なのか？**\n\n見て。ルー��によると、望ましいアカウントには**正確に**42 XRTが必要です。なぜなら、ネットワーク内のすべてのアクティブなアドレスを取得し、\n正確に42 XRTを持つものをフィルタリングし、生成された各アドレスを可能なターゲットのリストと比較します \n(約20、最後に1に減少)。言うのは簡単ですが、やるのは簡単です。 \n\nさて、スクリプトをもう一度修正した後、確実に望ましい賞品を手に入れることができる \n1つのクエリと1つのトランザクションになりました。\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nさて、ビデオを25秒間見た後（その間にニーモニックの単語を入力している）、 \n報酬を盗むのに最大30秒しかかからないでしょう。ハッキングしました。\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ja"}},{"node":{"title":"해킹된 ��니의 연구소","path":"/blog/ko/hacked-johnnys-lab/","date":"June 25, 2024","description":"최근 Robonomics가 주최한 이벤트 '해킹된 쟈니의 연구소'가 있었고, 제가 어떤 방식으로 해킹했다고 믿습니다! 규칙 오해로 첫 번째 시도에서 실패한 것을 제외하고, 참가한 모든 라운드에서 이겼고 여기에 간단한 '어떻게' 이야기가 있습니다.","content":"\n그럼, 빠르고 필요한 규칙 요약: 혼합된 순서로 된 12개 단어, 실험실을 돌아다니는 TurtleBot 4의 5분 분량의 비디오\n그리고 기억술어구 단어 순서를 망가뜨리고, 이기고자 하는 5~20명의 참가자, 그리고 전략을 생각해낼 수 있는 무료 일요일.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n프로그래밍에 어느 정도 익숙하고 괜찮은 노트북이 있지만 이미지 인식 기술은 거의 없습니다. 그 이상으로 \n나는 공정하게 게임을 하기로 결정했다. 즉, 비디오 다운로드 없이, 재생 속도 남용 없이, 플레이바 네비게이션 없이. \n그래서 선택한 전략은 오래된 브루트포스였다. 무언가를 해킹하는 것보다 더 그럴싸하게 들린다.\n여기에 무엇이 있는가: 섞인 순서의 12개의 단어 세트. 이것은 우리에게 12! (계승) 옵션의 구문을 제공한다. \n(정확히 479,001,600). 처리해야 할 양이 상당하다!\n\n\n## 전략 1: 어���석고 직접적인 것.\n\n음, 무엇이 더 필요한가, 그냥 가서 정리하면 된다! 그러나 여기 첫 번째 속임수가 있다: 12! 기억구문은 내 64GB RAM에 맞지 않았다! IDE 콘솔에서 SIGTERM 오류가 발생했다. \n평가용 실행. 그러나 문제는: 내 노트북은 심지어 최대 속도로 팬을 돌리지 않았다! 단일 코어만 로드되었다. \n그래서 저는 [반복자](https://docs.python.org/3/library/itertools.html#itertools.permutations)를 생성하고 프로세스를 시작했습니다.\n정확히 얼마나 걸렸는지는 모르겠지만, 조합 수를 계산하는 데 30초 안에 걸렸습니다.\n나는 내 CPU의 모든 논리 코어(20개)를 병렬로 계산하기 위해 Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) 패키지를 구글링했다. \n\n그렇지 않으면 영원한 여행이었을 것이다. \n그러나 그것으로 인해 내 이터레이터를 12개의 부분으로 나눠야 했다. itertools multiprocessing 패키지는 함께 작동하지만, \n전체 옵션이 RAM에 있는 경우. 그것은 내 경우가 아니었으므로 다음이 수행되었다: \n그 순간부터 항상 이 전략을 사용하여 내 CPU 로드 모니터가 다음과 같이 보이도록 만들었다:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\n나는 실행 시간을 약 5초로 단축했다고 믿는다. 조합을 반복하는 가장 좋은 방법을 얻었지만 그것들이 너무 많았다! 첫 번째 단계는 대략 480만 개의\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\n네트워크에서 extrinsics를 수행하는 것이었다. 노드는 단순히 DDOS로 나를 금지시킬 ��이고 그렇지 않아도 영원히 걸릴 것이다! \n디버깅 목적으로 스크립트를 시작했고 (노드 통신에는 \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) 패키지를 사용했음) 호출 전에\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\n_유효하지 않은 기억구문_과 같은 오류가 발생했다. 단서! 사전에 조합을 유효성 검사할 수 있다면, \n시간을 많이 절약할 수 있을 것이다! GitHub 파싱을 통해 나는 \n[이](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \n코드 라인을 찾았고 내 스크립트에 조합 유효성 검사를 추가했다. 이로써 잠재적인 extrinsics의 수를 대략 39,000,000으로 줄였다! \n그러나 여전히 39백만 개의 호출은 나를 영원히 금지시킬 것이므로 더 많은 탐구가 필요했다. 어떻게 하면 \n계산량을 크게 줄일 수 있을까? 음, 초기 전략을 조금 배신하는 것으로. 보시다시피, 비디오 시청을 피하려고 했지만,\n수학이 나의 생각을 바꾸게 만들었다. 132배 빠른 전략으로 바꾸었다.\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n아래는 설명이다: \n그렇게 하면 구문의 두 올바른 위치만 알면 된다 (하나는 너무 오래 걸릴 것이라 실험으로 검증됨). \n10! 조합을 반복하고 올바른 위치에 두 단어를 삽입하고 구문을 유효성 검사하여 \n옵션을 대략 300,000으로 줄였다! 더불어, 10! 조합 세트가 내 RAM에 맞았다, 훌륭하다!\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n또한 300k번씩 모든 토큰을 전송하려고 하지 않고 공개 노드를 호출하기 위해 \n로보노믹스 노드를 설정하고 동기화된 결과 계정 주소 잔액을 요청하기로 결정했다! \n쿼리는 extrinsic보다 '쉽다'. 전체 밤을 동기화하는 동안 (내가 설정한 캐시 한도로)\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\n또한, 모든 토큰을 300k번 전송하고 이를 위해 퍼블릭 노드를 호출하는 것보다, 저는 체인과 동기화된 제 로컬 Robonomics 노드를 설정하고 결과 계정 주소 잔액을 요청하기로 했습니다!\n쿼리는 외부 쿼리보다 훨씬 \"쉬웠습니다\". 밤새도록 동기화한 후(저는 캐시 한도를 설정하여 ROM에 체인 데이터가 있는 노트북이 폭발하지 않도록 했습니다) 시도해 보았는데.. 재앙이었습니다. 네트워크 거래\n(심지어 로컬호스트 내에서도) 너무 많은 시간이 걸렸어요. 끝까지 기다리지도 않았어요, 분명히 영상보는 것보다 훨씬 느렸어요 \n계정의 정확한 주소를 알 수만 있다면 좋을텐데! 하지만 그걸 위해서는 니모닉 구절이 필요하죠... **정말 그럴까요?**\n\n보세요. 규칙에 따르면 원하는 계정은 **정확히** 42 XRT를 가지고 있어야 합니다. 왜 나는 네트워크의 모든 활성 주소를 가져오지 않을까요,\n정확히 42 XRT를 가진 주소들을 필터링하고 생성된 각 주소를 가능한 대상 목록과 비교합니다 \n(약 20개, 마지막에는 1개로 줄어듭니다). 말하기 쉽고 할 수도 있죠. \n\n이제, 스크립트를 다시 수정한 후에 마침내 원하는 쿼리와 트랜잭션 하나만으로 \n원하는 상품을 얻을 수 있을 거예요.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\n이제, 비디오를 25초 보고 (그 사이에 니모닉의 단어를 채워넣으며), \n보상을 훔치기 위해 최대 30초만 더 필요할 거예요. 해킹했어요.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ko"}},{"node":{"title":"Laboratório do Johnny Hackeado","path":"/blog/pt/hacked-johnnys-lab/","date":"June 25, 2024","description":"Houve um evento recente “Hack Johnny’s Lab” pela Robonomics e eu acredito que consegui hackeá-lo de alguma forma! Além da primeira tentativa que perdi devido a um mal-entendido das regras, ganhei todas as rodadas das quais participei e aqui está uma breve história de “como fazer”.","content":"\nAssim, uma rápida e necessária recapitulação das regras: 12 palavras em ordem mista, um vídeo de 5 minutos de um TurtleBot 4 a vaguear por um laboratório\ne estragando a ordem das palavras da frase mnemónica, 5 a 20 participantes dispostos a ganhar e um domingo livre para pensar numa estratégia.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nEu sou meio familiarizado com programação e tenho um laptop decente e quase nenhuma habilidade em reconhecimento de imagem. Mais do que isso, \nDecidi jogar de forma justa, o que significa sem baixar vídeos, sem abuso de velocidade de reprodução, sem navegação na barra de reprodução. \nEntão a estratégia escolhida foi um bom e velho bruteforce. Parece mais hacking do que qualquer outra coisa.\nO que temos aqui: um conjunto de 12 palavras em uma ordem misturada. Isso nos dá 12! (fatorial) opções de frases \n(479’001’600 para ser preciso). Uma quantidade considerável para processar!\n\n\n## Estratégia 1: burra e direta.\n\nBem, o que mais eu preciso, apenas vá e ordene! Mas aqui está o primeiro truque: 12! frases mnemônicas simplesmente não se encaixaram \nmeus 64 GB de RAM! Recebi um erro SIGTERM no console do IDE. \nAssim, criei um [iterador](https://docs.python.org/3/library/itertools.html#itertools.permutations) e iniciei o processo.\nDemorei algum tempo, não sei exatamente quanto, mas em 30 segundos, a calcular o número de combinações.\nApenas uma execução avaliativa. Mas o fato é: meu laptop nem chegou a girar seus ventiladores no máximo! Um único núcleo estava carregado. \n\nPesquisei um pacote Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html) para carregar todos \nos núcleos lógicos da minha CPU (20 deles) para paralelizar os cálculos. Caso contrário, teria sido uma jornada eterna. \nMas com isso tive que dividir meu iterador em 12 partes. Os pacotes de multiprocessing do itertools funcionam juntos, \nmas quando um conjunto inteiro de opções está na RAM. Esse não era o meu caso, então o seguinte foi realizado:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nA partir desse momento e sempre eu usaria essa estratégia para fazer meu monitor de carga da CPU parecer assim:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nAcredito que isso reduziu o tempo de execução para cerca de 5 segundos. Descobri a melhor maneira de iterar através \ndas combinações, mas havia simplesmente muitas delas! O primeiro passo envolveu realizar aproximadamente 480 milhões \nextrínsecos na rede. O nó simplesmente me baniria por DDOS e mesmo sem isso levaria uma eternidade!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nApenas por razões de depuração, iniciei o script (para comunicação com o nó usei um \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) pacote) e notei que antes de chamar \nrealizar eu recebia erros como _frase mnemônica inválida_. Uma pista! Se eu pudesse validar a combinação localmente, \neu economizaria toneladas de tempo! A análise do GitHub me levou a \n[este](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nlinha de código e adicionei uma validação de combinação ao meu script. Isso reduziu o número de extrínsecos potenciais para aproximadamente 39’000’000 12 vezes mais rápido!\nMas ainda assim, 39 milhões de chamadas me baniriam para sempre, então eu precisava cavar mais fundo. Como eu poderia cortar significativamente o\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nnúmero de cálculos? Bem, traindo um pouco minha estratégia inicial. Veja, eu ia evitar assistir vídeos, \n“um hacker, que nem precisará de um vídeo”, mas a matemática me fez mudar de ideia. Mudar para uma estratégia 132 vezes mais rápida. \nAbaixo está a explicação: \nCom isso, eu só precisava saber duas posições corretas de palavras em uma frase (uma levaria muito tempo, validada por experimento).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nEu iteraria através de 10! combinações, inseriria duas palavras nas posições corretas e validaria a frase, \nreduzindo as opções para aproximadamente 300’000, uma grande diminuição! Além disso, o conjunto de 10! combinações cabia na minha RAM, excelente! \nmeu próprio nó Robonomics local sincronizado com a cadeia e perguntaria a ele pelo saldo de uma conta resultante!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nAlém disso, em vez de tentar transferir todos os tokens 300 mil vezes a cada e chamar um nó público para isso, decidi definir\nconfigurar o meu próprio nó Robonomics local sincronizado com a cadeia e solicitar o saldo do endereço da conta resultante!\nA consulta é muito “mais fácil” do que uma consulta extrínseca. Depois de uma noite inteira de sincronização (defini um limite de cache para que o meu\nportátil não explode com dados de string na sua ROM). Transações de rede\n(mesmo dentro de um host local) demorava muito tempo. Nem esperei até ao fim, obviamente foi bem mais lento do que\nassistindo a um vídeo inteiro. Se ao menos pudesse saber o endereço exato da conta! Mas para isso preciso de uma frase mnemónica... **Ou preciso mesmo?**\n\nOlha. As regras dizem que a conta desejada tem **exatamente** 42 XRT. Por que eu não pegaria todos os endereços ativos na rede,\nfiltrá-los tendo exatamente 42 XRT e comparar cada endereço gerado com uma lista de possíveis alvos \n(cerca de 20, diminuindo para 1 no final). Fácil de dizer e fazer. \n\nAgora, depois de modificar meu script mais uma vez, finalmente consegui chegar a apenas uma consulta e uma transação que com certeza \nme daria o prêmio desejado.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nAgora, depois de assistir 25 segundos do vídeo (enquanto preenchia as palavras de um mnemônico), \neu só precisaria de 30 segundos no máximo para roubar a recompensa. Hackeado.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"pt"}},{"node":{"title":"Лаборатория Джонни Взломана","path":"/blog/ru/hacked-johnnys-lab/","date":"June 25, 2024","description":"Недавно прошло событие «Взлом Лаборатории Джонни» от Robonomics, и я действительно считаю, что смог взломать ее! За исключением очень первой попытки, которую я проиграл из-за недопонимания правил, я выиграл каждый раунд, в котором принимал участие, и вот небольшая история «как это было».","content":"\nИтак, краткий и необходимый обзор правил: 12 слов в смешанном порядке, 5-минутное видео о том, как TurtleBot 4 бродит по лаборатории и нарушает порядок слов мнемонической фразы, 5–20 участников, желающих победить, и свободное воскресенье для придумывания стратегии.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nЯ довольно хорошо разбираюсь в программировании, у меня есть хороший ноутбук и почти нет навыков распознавания изображений. Более того, \nЯ решил играть честно, что означает отсутствие загрузки видео, злоупотребления скоростью воспроизведения, навигации по плейбару. \nТак что выбранная стратегия была хорошо знакомым методом брутфорса. Звучит больше как взлом, чем что-то еще.\nЧто у нас здесь: набор из 12 слов в перемешанном порядке. Это дает нам 12! (факториал) вариантов фраз \n(479’001’600, чтобы быть точным). Довольно большое количество для обработки!\n\n\n## Стратегия 1: глупая и прямолинейная.\n\nНу что еще мне нужно, просто иди и разберись! Но вот первый трюк: 12! мнемонических фраз просто не помещаются \nмои 64 ГБ ОЗУ! Я получил ошибку SIGTERM в консоли IDE. \nПоэтому я создал [итератор](https://docs.python.org/3/library/itertools.html#itertools.permutations) и запустил процесс.\nМне потребовалось некоторое время, не уверен точно, сколько, но в пределах 30 секунд, чтобы подсчитать количество комбинаций.\nПросто оценочный запуск. Но дело в том, что мой ноутбук даже не включил максимальную скорость вентиляторов! Был загружен только один ядро. \n\nЯ нашел в Интернете пакет Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), чтобы загрузить все \nлогические ядра моего процессора (20 из них) для параллельных вычислений. В противном случае это было бы вечное путешествие. \nНо для этого мне пришлось разделить свой итератор на 12 частей. Пакеты multiprocessing itertools действительно работают вместе, \nно когда вся группа вариантов находится в ОЗУ. Это не было моим случаем, поэтому было выполнено следующее:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nС того момента и далее я использовал бы эту стратегию, чтобы мой монитор загрузки ЦП выглядел так:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nЯ считаю, что это сократило время выполнения до примерно 5 секунд. Я нашел лучший способ перебора \nкомбинаций, но их было просто слишком много! Первым шагом было выполнение примерно 480 миллионов \nэкструзий в сети. Узел просто забанил бы меня за DDOS, и даже без этого это заняло бы вечность!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nПросто из-за отладочной цели я запустил скрипт (для связи с узлом использовал \nпакет [py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) и заметил, что перед вызовом \nвыполнения у меня возникали ошибки, такие как _недопустимая мнемоническая фраза_. Подсказка! Если бы я мог проверить комбинацию на предмет \nвалидации на месте, я бы сэкономил кучу времени! Парсинг GitHub привел меня к \n[этой](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nстроке кода, и я добавил проверку комбинации в свой скрипт. Это сократило количество потенциальных экструзий до примерно 39’000’000 в 12 раз быстрее!\nНо все равно, 39 миллионов вызовов забанили бы меня навсегда, поэтому мне нужно было еще больше копаться. Как я мог существенно сократить\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nНо все равно, 39 миллионов звонков забанят меня навсегда, поэтому мне нужно было больше копать. Как я мог бы значительно сократить количество вычислений? Ну, немного предав свою первоначальную стратегию. Понимаете, я собирался избегать просмотра видео, \n«хакер, который даже не будет нуждаться в видео», но математика заставила меня передумать. Перейти к стратегии в 132 раза быстрее. \nНиже объяснение: \nТеперь мне нужно было знать только два правильных положения слов в фразе (одно заняло бы слишком много времени, проверено экспериментом).\n\nНиже приведено объяснение:\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nПри этом мне нужно было знать только два правильных положения слов во фразе (одно заняло бы слишком много времени, проверено экспериментом).\nЯ бы перебрал 10! комбинаций, вставил два слова в правильные позиции и проверил фразу,\nсократив количество вариантов примерно до 300’000 — это значительное уменьшение! Более того, 10! наборов комбинаций поместились в моей оперативной памяти, отлично!!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nТакже, вместо того, чтобы пытаться передавать все токены каждые 300к раз и вызывать общедоступный узел для этого, я решил установить \nЗапрос намного «проще», чем экструзия. После целой ночи синхронизации (я установил предел кэша, чтобы мой \nQuery is way “easier” than an extrinsic. After a whole night of synchronizing (I’ve set a cache limit so that my \nlaptop won’t blow up with chain data in its ROM) I gave it a try and.. this was a disaster. Network transactions \nпросмотр целого видео. Если бы я только мог знать точный адрес счета! Но для этого мне нужна мнемоническая фраза… **Или действительно нужна?** \nпросмотр видео целиком. Если бы я только мог знать точный адрес счета! Но для этого мне нужна мнемоническая фраза… **Или мне действительно нужно?**\n\nПосмотрите. Правила гласят, что желаемый аккаунт имеет **ровно** 42 XRT. Почему бы мне не получить все активные адреса в сети,\nотфильтровать их, имея ровно 42 XRT и сравнить каждый сгенерированный адрес с возможными целями \n(около 20, уменьшаясь до 1 в конце). Легко сказать и сделать. \n\nТеперь, после еще одной модификации моего скрипта, я наконец-то сделал только один запрос и одну транзакцию, которые, безусловно, \nдали бы мне желаемый приз.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nТеперь, после того, как я посмотрел 25 секунд видео (при этом заполняя слова мнемоники), \nмне было бы нужно всего 30 секунд максимум, чтобы украсть награду. Взломал это.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"ru"}},{"node":{"title":"Взламано Лабораторію Джонні","path":"/blog/uk/hacked-johnnys-lab/","date":"June 25, 2024","description":"Недавно відбулося подія “Взламати Лабораторію Джонні” від Robonomics, і я вважаю, що я взламав її в певному сенсі! Окрім першої спроби, яку я програв через непорозуміння правил, я виграв кожне коло, в якому брав участь, і ось коротка історія “як”.","content":"\nОтже, короткий і необхідний підсумок правил: 12 слів у змішаному порядку, 5-хвилинне відео TurtleBot 4, що блукає лабораторією\nі псування порядку слів мнемонічної фрази, 5-20 учасників, які бажають перемогти, і вільна неділя, щоб придумати стратегію.\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\nЯ дещо знаю про програмування, у мене є непоганий ноутбук і майже жодних навичок у розпізнаванні зображень. Більше того, \nЯ вирішив грати чесно, що означає відсутність завантаження відео, відсутність зловживання швидкістю відтворення, відсутність навігації по плейбару. \nТому вибрана стратегія була добре відомим методом брутфорсу. Звучить більше як хакінг, ніж що інше.\nЩо ми тут маємо: набір з 12 слів у змішаному порядку. Це дає нам 12! (факторіал) варіантів фраз \n(479’001’600 щоб бути точним). Досить велика кількість для обробки!\n\n\n## Стратегія 1: дурний і прямолінійний.\n\nНу що ще мені потрібно, просто йди і сортуй! Але ось перший трюк: 12! мнемонічних фраз просто не влазили \nмої 64 ГБ ОЗУ! Я отримав помилку SIGTERM у консолі IDE. \nТож я створив [ітератор](https://docs.python.org/3/library/itertools.html#itertools.permutations) і розпочав процес.\nМені знадобився деякий час, не знаю точно, скільки, але протягом 30 секунд, щоб обчислити кількість комбінацій.\nПросто оціночний запуск. Але справа в тому, що мій ноутбук навіть не включав свої вентилятори на максимум! Було завантажено лише одне ядро. \n\nЯ шукав в Інтернеті пакет Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html), щоб завантажити всі \nлогічні ядра мого процесора (20 з них) для паралельних обчислень. В іншому випадку це була б вічна подорож. \nАле для цього мені довелося розділити мій ітератор на 12 частин. Пакети multiprocessing itertools дій��но працюють разом, \nале коли весь набір варіантів знаходиться в ОЗУ. Це не було моєю справою, тому було виконано наступне:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\nЗ того моменту і назавжди я буду використовувати цю стратегію, щоб мій монітор завантаження ЦП виглядав так:\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\nЯ вважаю, що це скоротило час виконання до близько 5 секунд. Я отримав найкращий спосіб ітерувати через \nкомбінації, але їх було просто занадто багато! Перший крок пе��едбачав виконання приблизно 480 мільйонів \nекструзій в мережі. Вузол просто забанив би мене за DDOS, і навіть без цього це тривало б вічно!\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\nЛише з метою налагодження я запустив сценарій (для взаємодії з вузлом я використовував пакет \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/) і помітив, що перед викликом \nвиконання я отримував помилки типу _недійсна фраза мнемоніки_. Підказка! Якщо б я міг перевірити комбінацію на місці, \nя б зекономив тонни часу! Парсинг GitHub привів мене до \n[цього](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \nрядка коду, і я додав перевірку комбінації до свого сценарію. Це зменшило кількість потенційних екструзій до приблизно 39’000’000 в 12 разів швидше!\nАле все одно, 39 мільйонів викликів забанили б мене назавжди, тому мені потрібно було ще більше розкопок. Як я можу значно скоротити\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\nкількість обчислень? Ну, трохи зраджуючи свою початкову стратегію. Подивіться, я мав уникати перегляду відео, \n“хакер, який навіть не потребує відео”, але математика змусила мене змінити свою думку. Змінити її на стратегію в 132 рази швидше. \nНижче пояснення: \nЗ цим мені потрібно було знати лише дві правильні позиції слів у фразі (одне зайняло б занадто багато часу, експериментально підтверджено).\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\nЯ б ітерував через 10! комбінацій, вставляв два слова на правильні позиції та перевіряв фразу, \nзменшуючи варіанти до приблизно 300’000, досить значне зменшення! Більше того, набір комбінацій 10! вліз у мою ОЗУ, чудово! \nсвій власний локальний вузол Robonomics, синхронізований з ланцюжком і запитати його про баланс рахунку!\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\nКрім того, замість того, щоб намагатися передавати всі маркери кожні 300 тисяч разів і викликати для цього загальнодоступний вузол, я вирішив встановити\nстворити мій власний локальний вузол Robonomics, синхронізований із ланцюжком, і запитати в нього кінцевий баланс адреси облікового запису!\nЗапит значно «простіший», ніж зовнішній. Після цілої ночі синхронізації (я встановив обмеження кешу, щоб мій\nноутбук не вибухне з даними ланцюга в його ПЗУ) Я спробував і.. це була катастрофа. Мережеві транзакції\n(навіть у локальному хості) зайняло надто багато часу. Я навіть не чекав до кінця, очевидно, це було набагато повільніше, ніж\nперегляд цілого відео. Якби я міг знати точну адресу рахунку! Але для цього мені потрібна мнемонічна фраза… **Чи я справді?**\n\nПодивись. Правила кажуть, що в бажаному обліковому записі **точно** 42 XRT. Чому б мені не отримати всі активні адреси в мережі,\nвідфільтрувати їх, маючи точно 42 XRT і порівняти кожну згенеровану адресу зі списком можливих цілей \n(близько 20, зменшуючись до 1 в кінці). Легко сказати і зробити. \n\nТепер, після ще однієї модифікації мого скрипта, я нарешті зробив лише один запит і одну транзакцію, які безперечно \nдають мені бажаний приз.\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\nТепер, після того, як я переглянув 25 секунд відео (тим часом заповнюючи слова мнемоніки), \nмені б вистачило максимум 30 секунд, щоб вкрасти винагороду. Взламав це.\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"uk"}},{"node":{"title":"黑客约翰尼的实验室","path":"/blog/zh/hacked-johnnys-lab/","date":"June 25, 2024","description":"最近有一个由Robonomics举办的活动“黑客约翰尼的实验室”，我相信我以某种方式黑进去了！除了第一次由于规则误解而输掉之外，我参加的每一轮我都赢了，这里是一个简短的“如何”故事。","content":"\n因此，快速回顾一下必要的规则：12 个单词，顺序不一，一段 5 分钟的视频，视频中 TurtleBot 4 在实验室里徘徊\n并破坏了助记词的词序，5-20 名参与者愿意获胜，并在周日自由思考策略。\n\n<rb-image zoom src=\"hacked-johnnys-lab/0.png\" alt=\"Game Interface\" />\n\n我对编程有点了解，我有一台体面的笔记本电脑，几乎没有图像识别技能。更重要的是， \n我决定公平地玩，这意味着不下载视频，不滥用播放速度，不使用播放栏导航。 \n所以选择的策略是老式的暴力破解。听起来更像是黑客行为。\n我们这里有���么：一个包含12个词的混合顺序集合。这给了我们12！（阶乘）短语选项 \n（准确地说是479’001’600）。要处理的数量相当可观！\n\n\n## 策略1：愚蠢而直接。\n\n嗯，我还需要什么，就去整理一下！但这里有第一个技巧：12！助记短语根本不适用 \n我的64 GB RAM！在IDE控制台中出现了SIGTERM错误。 \n所以我创建了一个 [迭代器](https://docs.python.org/3/library/itertools.html#itertools.permutations) 并启动了该过程。\n我花了一些时间，不确定具体花了多长时间，但在 30 秒内，计算出了组合的数量。\n只是一个评估性运行。但问题是：我的笔记本甚至没有将风扇转到最大转速！只有一个核心被加载。 \n\n我搜索了一个Python [multiprocessing](https://docs.python.org/3/library/multiprocessing.html)包，以加载我的CPU的所有逻辑核心（共20个）以并行计算。否则，这将是一次永恒的旅程。 \n但是为此我必须将我的迭代器分成12部分。itertools multiprocessing包可以一起工作， \n但当整个选项集在RAM中时。这不是我的情况，所以进行了以下操作： \n从那一刻起，我将使用这种策略使我的CPU负载监视器看起来像这样：\n\n<rb-image zoom src=\"hacked-johnnys-lab/1.png\" alt=\"Parallelizing\"/>\n\n\n我相信这将执行时间缩短到大约5秒。我找到了遍历组合的最佳方法，但组合太多了！第一步涉及在网络中执行大约4.8亿次外部操作。节点将简单地因为DDOS而禁止我，即使没有那样，也需要很长时间！\n\n<rb-image zoom src=\"hacked-johnnys-lab/1_1.png\" alt=\"CPU Load\"/>\n\n\n仅出于调试目的，我启动了脚本（用于节点通信我使用了一个 \n[py-substrate-interface](https://pypi.org/project/substrate-interface/1.0.3/)包）并注意到在调用之前 \n执行时我遇到了诸如_无效助记词短语_之类的错误。一个线索！如果我可以在本地验证组合，\n\n<rb-image zoom src=\"hacked-johnnys-lab/2.png\" alt=\"1st Attempt\"/>\n\n\n我将节省大量时间！GitHub解析引导我到 \n[这里](https://github.com/polkascan/py-substrate-interface/blob/master/substrateinterface/keypair.py#L170) \n代码行，并将组合验证添加到我的脚本中。这将将潜在外部操作的数量减少到大约3900万，快了12倍！ \n但是，3900万次调用将永远禁止我，所以我需要更深入挖掘。我如何显着减少 \n计算次数？嗯，稍微背叛我的初始策略。看，我本来打算避免观看视频， \n“一个不需要视频的黑客”，但数学让我改变了主意。将其更改为快132倍的策略。\n以下是解释：\n\n<rb-image zoom src=\"hacked-johnnys-lab/3.png\" alt=\"2nd Attempt\"/>\n\n\n这样我只需要知道短语中两个单词的正确位置（一个将花费太长时间，经过验证的实验）。 \n我将遍历10！组合，将两个单词插入正确的位置并验证短语， \n将选项减少到大约30万，减少了很多！10！组合集适合我的RAM，太棒了！ \n自己的本地Robonomics节点与链同步，并询问其结果账户地址余额！\n\n<rb-image zoom src=\"hacked-johnnys-lab/4.png\" alt=\"2 Words Insertion\"/>\n\n\n查询比外部操作“更容易”。整夜同步后（我设置了一个缓存限制，以便我的 \n笔记本电脑不会因为ROM中的链数据而爆炸），我尝试了一下，结果是灾难性的。网络事务 \n（即使在本地主机内）花费了太多时间。我甚至没有等到结束，显然比\n\n<rb-image zoom src=\"hacked-johnnys-lab/5.png\" alt=\"3rd Attempt\"/>\n\n\n而不是尝试每300k次转移所有令牌并为此调用公共节点，我决定设置 \n观看整个视频要慢得多。如果我只能知道账户的确切地址！但为此我需要助记词短语... **或者我真的需要吗？** \n查询比外部查询“简单”得多。经过一整晚的同步（我设置了缓存限制，这样我的笔记本电脑就不会因为 ROM 中的链式数据而崩溃），我尝试了一下，结果……这是一场灾难。网络交易\n（即使在本地主机内部）花费太多时间。我甚至没有等到结束，显然比 \n看整个视频慢得多。如果我只能知道账户的确切地址！但为此我需要一个助记短语... **或者我真的需要吗？**\n\n看。规则说���所需的帐户**恰好**有42个XRT。为什么我不能获得网络中的所有活动地址，\n通过拥有恰好42个XRT来筛选它们，并将每个生成的地址与可能的目标列表进行比较 \n（大约20个，最终减少到1个）。说起来容易做起来难。 \n\n现在，再次修改我的脚本后，我终于只需要一个查询和一个交易就可以 \n给我想要的奖品。\n\n<rb-image zoom src=\"hacked-johnnys-lab/6.png\" alt=\"4th Attempt\"/>\n\n\n现在，我观看了25秒的视频（同时填写助记词的单词）， \n我只需要最多30秒就可以窃取奖励。已经破解了。\n\n<rb-image zoom src=\"hacked-johnnys-lab/7.png\" alt=\"Discord Bot Notification\"/>\n\n\n\n","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/cover.9ea8d39.433275705be2cb569a72e12c5de34a14.png 480w","/assets/static/cover.6b2ed88.433275705be2cb569a72e12c5de34a14.png 1024w","/assets/static/cover.62c183a.433275705be2cb569a72e12c5de34a14.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-0bd503220c9c48fc9f98ac7065161fdc'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-0bd503220c9c48fc9f98ac7065161fdc)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAIAAACVG/2gAAAACXBIWXMAABYlAAAWJQFJUiTwAAAQN0lEQVRYw31YCXgUVZ6vo6uvuq/uOrqrjyTdnatD7pCQQE5IQjp3QhJOMeDCYhAHxNEdGGeWRR1OnVEHcRbZHXB0vhV1ZpRFVBZFHFYMRwAPBhTPDzk8FpxhZP9VFSLiflvf%2b%2bp79eq9//v97/97CIbQNzQEoVCUcnsZD2k1inG6GHPw%2b9NwlEFRF4KgKEL%2bkIg9YawPa90elqRYj5chGcbjtTo0SzEsxbEkw3rhF8kyPEdzrMNBeykGRuAvDDpwmiBgOWNOo835NM/CWiACZJHrcNuNYgRODvKyzvsNwQedIO8P89DBcRq9DhyCOCPheENdi4sQUIT6f9DbDLAi5wvxks75QzzFMZLGq1EB%2bkpUUCOCBNuFeDXNHHS5GU5ilYgFwODhE9BzMgsTbDx6TIRpwMZ3DDgw2pIBw/tMQpyPI5yj/NiNlTigiH6H3iPwgT/84Y/nzp1ta%2b0BPRA4B%2bMOjIV2A3ocNRuGwSqsNdW7/I67ccIL8gOdgGgt%2biaH1yQ4yvDY7uj3PuFNIogbANhgEHu208lEkqKRJWRXyqFsMbtKBpHAOI6ZeztwFhaDMECJQAKwAuLZMwePwTMy0prqBm24naK1jQcaMOB08BZLYzZJ0yxHy67V961a%2bdMVlOj2BQU5YEk9yhNOxsaHY4y9BFSKo5TJOTbKvwnDFIGHZ7UNGzaWlU5EEJcpylEhYTSQA9DwNvWYJjjdDGoJ2xYq9EE/MAG2IUx%2bHF1dA%2bcvnPvNY1scDhAMPKjTwXKMSnn9CEKY3wiBoxyKMKBrLU3wG7zbSzO06nELCOId0y0ncxlFEuwbzpG8JGdv6nQIGMpdm0NajUZQWwnkml%2bsXbb0TtAnAENuMFwC42wDuN4McJN1WjZ48CpTcagpIfCt8aXVFCWSHmHG9Juf2P7k4cOHz549%2b/HHHx89MrJ%2b3YPxjCSCYlqaCMImHJYeEKDjRU3RMrZQgZrLzSph09b1DMHtNqOFxy1Kkqr4dc0fUP1BTTE0NeSXdZ8clCSD9MoOB%2blyjjoe8n1X81jC82AI8z0GUNbp5IyEfL1948A9gmRn5q1ds/7E8WPffvvt1atXH3jggblz5y5ZsmR4%2bK2/X/l27cb7aBage7FRxMwPg5VleBTEFvBs0wFA/DiZk56mqAHFJ0cMCaKVLMmq388zTEALSqKBmrIYDRtjTgxoiMYprVu2bI2Es2zzGtUDClpzygbtJN1g1mDc0CDyIAheUz1laGho4cIFK1euPHfuHPDw7rvvHj9%2bfNd/7hoeHr5qPdu2/c7lMvX%2bf6LHrumT5jiwInMaBr6i6pLMCooWDAcNvSArlyQFnxJWtJAWSjCMBoF7LHYj16KKl6GUHTueOX36VKqlyzYv3LI5Audz83P/YWjusqV3P/zQpsHBQcvikWAgDazlk08%2buXz5GwBqKeDq383nytVrz5UrZv%2bxzVtABMD8GGggjl1zMNs%2bIVK7PLTHJVdVNZSUlDAQNgUpbKgiJ45LxnNyEjwv%2bNQwRQs8p2laDDztOxOyGHDLUujQoUNvvPFGMJAB/FguTxNOKi3bgGCz77X9hw4dPn369M/vWbV9%2b5Ntrd3bfvsEgPvoo48uXLgI788%2b%2b%2bzEiRPPPvvc83964fdP/ceDDzy8Yf2DEDHnz1s4Y/ocECHQ/EFyIC2LdTjdLi1dBPFTpL9vzuCMm2ZkxOKKRCczZZ6lY9nJaERXRDoQjBSW10%2bqnzqxpiY9lg/zQXvIdYmJrK1pqq1pBGlh5ifF%2b7hgQgJtgAgvXfqfkydPfvrpp2Akr7yyZ9Wq1V2d/U2N7YUFFVMmt94yb5FPDlGkj/TIoJy%2b/oFt255yEp4N6zfufGHXyMixTb/eDOO24O232cGZFSt%2btmvn7sbWWpyApE7FaP/QrJlNvT0lyQJI8Q4Ew3EcdTkwB4o4ULeXrKie3NLT09RUl4hkWWZ5nRNbPOAwEbPSgpZmhlTCAXaJTG1uA2FfunQJ3rt3v9zbM/DMjmd1PWDbUkVF9TfffBMOJ0zDc4Av4ZUV9Vsf35adVWgvgeeDDz6QxaCdIkz6DgiRSCrV88UXF8%2bfP7d1628tVXhLZGNdW0d3dXVJIIA5iGY3WeWCuIKUuzxJDCc87OTUUHVTZ195WSqYYeaNG6IQeCduRV%2bA7iaZayHfnR7NuXDhwqlTp8BN9%2b3bv2fPfwGmwcH5gBVsEVaFjSwrujswlHRgvAOHMI/cMn%2bRzfZf//o38IziwgnAIRA09zLtE29KTTlz5v1Tp/4yexb4FYibnV5S9ccVq6b39IeDOorhnR7aZmA6yTa43G4XXVO7vqake3Xz5NZEAViKYyyRjeV8qFggW0FUFhRIkxC/Tf%2bG9HT%2b/AWwn6%2b//howXbz4xbFjx48fOyEKKlDHcSe8i4rGr1u30UWwtiy7OvouXrxoOfe3gB46VZX11mTW5WGgpIFc6abIqU1d7a29qJnX3MFwbE1X2z%2b19TT292ZlhMCEnDiecLqavZSMOzwI6vV6aspLG5pq1/b1LU914AREBepGBgC9nsEbWSLtcyoZpMfN2Vl9xYp7nnry9y%2b9uOf%2bezdqanTTo49a5vRSW6q7qLBi5vS5wBKMjIyMPL7l31566eUrV/62f//%2bvXv3gn9/9eVX8Ku4yNSAqAp6TICSBBtNqyg06BNmHKc4xNMYiZfm58lmoWY%2bWSi2wOmmMAz6boLIiUdrair71MDM8WWqnmZWLjckXdNsXCwtUhWldQV5lZAQUNQuVFAcd0M14SQJjEJuW7oYMEHIf/rpp/e99trbb78NQOHz/fffBy8/cuTI7t27d%2bzYASMQZyHagg%2bInOGhKD1DHK3YRssbM4zaGEwnRBkOceWlJ6KhYNAI5hSWpycL9VgWxzCiIAgcV1GWWxxJM3AKQaGY80LCtRiw0qHdrOjpDUWie17eNXv%2bbFwi9IgohfhAVOKDvBDkXTIgcEbTc89/bcr1vw8c%2bNPzz%2b/cufPVV199/fXXQerDbw3v27dvz549ly9fBit67733zpz54Je//BWIUItKUOTaqkbNopBxEQyBm7XwmAmABCGTTigrG%2bhpb011zpp589Lb7ujv6JhaXz%2bxrLi7Y7JEQwYgbYZNieOWPBSMZVFWxVkCZRiEUr3%2b/LLquEeoIAWISIab8ziZuJMPIGyVQxznFFmE2PvQJjNzXb0KMj5w4MDRI0dPWM/BgwchXcAg/H3nnXdAG%2bA869Zu1NV02WAJl10jWgU2ClUq6cDNQg2/rlAvLp7UXNc4v79/Sk3D4LS%2b9XfftWL5Xfeu%2bOnSBf/Y2TUbueH45bQq7DWc1uiWNvCagDGbhMC9nMIhxBNCcIsQmEf67me1u2jlHlbdLAcfEvRGD8wMPOMWP7n1dkAJ%2bP5y8iQYyZkzZ8BaPv/88w8//NAOWWBC0IdfMG3xrcvADkOZslk7WJLOStBLFgqL5osCRxI4hY3q39Xd2vPcfat3bP33jT/7%2bdC8BT8eWnL7LQvvWrRo8YKhrmk322XVjQzcy2nPycazspFN8E9JwfW8NodW/pmFIOMN4txRNXJcjTgQ%2bjdCYCOvR3DuF3ygyME8JulXj45ADXHu7NnT1x6ADhUGIP7yy6/efPMg%2bAZwBe9xeSUQhBg4B8UEzscrCv34w8pnp0Mfv22sWwXpjzSPjmbU9hTkFw7OuWne0PL%2badPr65v7ewZ6Orrnz77pxyv%2bpa130DrKkGM8jDKwgdOX0sp6Qb%2bN8e9Vwrv9oTW8dj%2bnVbmEdq%2b0wxd6UgrOpHyPiAGYFnCwvxL0IUZ9jPVXx/Keef4FO1yOlUB236yrR46cOfMhqAg4gURhVpFQ/%2bA0xbOKRr87HPzzK/qJ4eCLz2kcYx2%2bUCjROJbTOUnNCoeq8pM5GenxcCgSCIQCgUAwbERiPn%2bEpjXMtECLAYcVefq9vnwnn3JKQ6Q/D%2bOrCKHDLS0k/Rs5fRzG9zvluIO7zasscPnXclqf29fv8m0W9DonSM5F4GRDXerXj2ze99qfDw8fH37r8Iu7dv/o9juhKjn45vD58%2bchpG7f/jszB1hFBGqWt6TXQy67VTxz3Dh5xJg/i3d6mVihnJwQLZ1UPH5ieTy7oCRZOKdpcqqyoqVifHF2tiyIJCMa0URWTmF%2bUXl6LM/rkdGxPABE4UMM87iXyaz2hfJEUmBJlkHdNGvwapaAOWghyms5Au6iBYMP5AoISqqZvNslGAmJ5MxcllEkVnWmSz44kTlQFOK4s2BCVk9P/%2bZH/xWqLDXTSzhYKcAXNvqDCUjbtKZQE0qZqvFwOKbC2ULT3LzBn9TesrKub3FFU8%2bEcCQRjmYaoXS/31C0qBvSqeDPyy8rL68BajXVjVk5xV44/dkMEJhZlJe2KHmTfPFiKVEs1c7Q9CivR4VxNb5Zq8OwZVlK6V4ejJfKyUm%2boim%2b5CS5tBmwUmpE8Lgh/ckT%2bzU1jYMzLoqwcKqCd3Gr6CJx4A3D3N13G6LOJcqkZLWvrF0R/NaJER090Mby06ubqtoH6uYua561pL6ltzYvWVZaNhHOvqUllSUllbFEMhRJTKxqqK9trp40pbamOTMnXzdiyNipAsgVNftLU4rLS%2bsJrv5mHbaZNEOD/cq7lMpetbjFn6zxVfWpRY1%2bONy2LwvAIdO%2bRLIjYEaxVNSkUAx3LZ9Qpa0qVPAIwoZz5IZBDSbEy6SGeXplr%2bKlWCsVmPHUSQhGKCeRKMzPr6ipbh6Y1dcx0Aynpbqa5vq6qSDvhvqWhvqp9XXNjVPaSkurMrPzoQUjMT2UjgD3ZkSrkJWIUDLVnzleToyX46XSxH5VDPK8woHGMydIxS1K553BtAIps0KatsKAJROm%2bZ0uK/fhJgUlwgfiItDJn%2bwz07l5X0JXTlOhrIItQBaFTb7yTiW/wRfOFYun%2bpWwyTxU1BBSOF6LZ%2beF0%2bLxrGTZ%2bEmp5t72VH9rS3fL1K62VG9bS09rS29394yBaXOaGjsyMvN0I12UdTUQ9elhxEp%2bNCNwQFpQOJsZMBiQsYdinS4GTgWszAHWQFygWBih1TTzxkVUOes0%2bN3dEVgXrLUkYkd6OpwjjqvzgWikgEnZQzFKGg8bwfndsh%2brISSEnUhGVsCIBQKx3GRpbW1jy9TOyZPbO9v6utr6OtsH%2btqmLeid0dbWVzmhLhCJS2qIE/w%2bLST5A6MmxEocSbEMzwIsQEzzLLxBSHIAXIeFxkqs28v4w%2bZdGvzyeM3LPZhGEGZp6TMEJSx4KfMGBYwbzIP3cy4XzclQ23KSxpuUNQ60AWtBTPAX3lZNCmu5aE4olJ4eyQznVcSTJblFJZWTqxuWTGvraB/oaO/va%2b%2b7I9U%2b2NU3qXpKclypPxDx6xFFCwN60aePXmzZF5TQACgggKIatoTtWdFEaTevF7jigVUY93jNu0tADIUGjIgKoOQ4CZabzLs9LOgKKhx4A1CYz4nAgdkXNfP2CUZsucAIKzGZ47KLSyYk4ORbkBFPxrNyC8YVlD8yp2bx9N6W5u6fNKV%2b1NKyen53WWllNJbt18M%2bNZSWnh2KxI1o/H8BADVkTQv6cm4AAAAASUVORK5CYII=' /%3e%3c/svg%3e"},"locale":"zh"}},{"node":{"title":"Robotics Web3 DevOps Stack","path":"/blog/robotics-web3-devops-stack/","date":"June 12, 2024","description":"The DevOps movement has revolutionized the IT world and reshaped our understanding of effective, continuous system improvement. The robotics field is just starting to explore this approach. In this article, we envision the potential future of DevOps for robotics using Web3 technologies. We also highlight a few projects that could lay the foundation for this future.","content":"\n## Origins of Development & Operations\n\nRobots, as moving and sensing the external world devices, are a specific case of computers. As engineers often say, an airplane is a flying computer, emphasizing the importance of the onboard computing device for maintaining the viability of this cyber-physical system. Therefore, we can look at how the world of information systems has developed in the 21st century and identify certain trends that will be inherent in robotics in the very near future.\n\nSoftware and the practices used for its development have significantly changed approaches to work in both engineering and any other activity. First and foremost, the changes affected the so-called waterfall approach, when any project was seen as a series of lengthy alternating stages: Requirements - Development - Verification - Validation - Operation. Over time, it turned out that the division into stages is convenient for managers, but does not quite correspond to how it happens in life and complicates the rapid adaptation of products in the conditions of a constantly changing external world. Agile methodologies, implying synchronous work on the project with small planning intervals, came to replace the waterfall model of activity (and management). Instead of large stages with milestones, there were small sprints with increments - small but frequent changes in the developed systems with a quick release. Such a pace of work is unattainable if the release is accompanied by complex administrative procedures with manual checks. Thus, the Development & Operations movement emerged to implement practices of transferring value from developers to consumers without losses and a new profession of a DevOps engineer, automating the process of quickly putting the system into operation.\n\n![devops origins](./images/web3-devops-stack/devops-evolution.png)\n\nThese practices include automated testing, continuous integration, delivery, deployment, and software monitoring. Automated testing checks for bugs, while continuous integration integrates code changes frequently to detect issues early. Delivery and deployment involve getting the software to users and installation in their environment.\n\nInitially, these practices gained momentum in the area of large web services, which serve millions of users around the world. In such a context, these practices are crucial for maintaining the high performance and reliability expected from such services. However, as time has progressed, and automation tools have become more accessible (partly due to Open Source contributions), DevOps has begun to be used in more traditional types of engineering activities. Therefore, these practices have transcended their initial domain and are now employed across various sectors to improve efficiency, reliability, and quality of software products.\n\n## Key Features of Robots in the Context of DevOps\n\nRobots, unlike stationary servers and data centers, move in space and sense the external environment. More and more of such devices are emerging. We see their computational power growing over time - many technical solutions would simply be impossible without a powerful onboard processor.\n\nWith the increase in edge computing, which refers to computing on the mobile devices themselves, the use of DevOps is becoming more popular. This approach allows for rapid delivery of newly developed features to consumers. Robots can be continuously connected to the network and promptly update their software using Docker and other tools proven in practice.\n\nHowever, additional capabilities create additional risks - by empowering computers with the ability to interact intensively with the external environment and the internet simultaneously, we create prerequisites for potential harm that these devices can inflict if they fall under the control of malefactors. Smart devices, gradually filling our homes, can suddenly go mad! The issue of security here is of paramount importance in a constantly changing world, because all these devices are in close proximity to our bodies. Mistakes can cost too much.\n\nWhat makes robotics special and sets it apart from other computers? These special features include:\n\n1. A variety of hardware platforms (compared to a relatively small number of central processor architecture types)\n2. Working in unpredictable environments, which implies the presence of emergency situations - for example, unavailability over communication channels\n3. Limited resources of on-board computing devices - weak processor, relatively small amount of memory and low network bandwidth\n4. Increased safety requirements\n5. A large number of devices that require updates and new features\n\nConsidering these restrictions, we will try to formulate a conceptual basis for DevOps for robots based on web3 technologies, at least, for writing code, building, and deploying. We will try to present the most interesting Web3 projects capable of ensuring the functioning of a decentralized DevOps conveyor and show how Robonomics can become an integral part of it in the final phase of the life cycle - when implementing programs in the external world.\n\n## Web3 and Blockchain\n\nWhen we talk about Web3, we primarily mean Blockchain technology. These are of course closely related concepts, but not exactly identical. Often under this concept a whole set of technologies is implied - elliptic curve cryptography, p2p networks, consensus algorithm. The first two points are not something unique and are widely used in the IT industry, while the latter really endows the blockchain with a special feature, making this solution such a powerful tool. But do we need consensus for all life situations (and parts of the DevOps conveyor)? Let's try to figure it out.\n\nConsensus has different meanings in different contexts, but its essence is always unchanged - systems, actors, or autonomous agents that make up a decentralized network come to an agreement on which protocol they use in work and the state of common data. If the parties do not come to an agreement, this leads to the so-called Fork. Historically, a fork implied a split of the blockchain, which led to the division of the network nodes into two parts - some nodes remained \"loyal\" to the old version of the protocol, while the rest switched to the new version. This event always had a negative context - the community was decreasing instead of consolidating, which made the project somehow weaker. At the same time, as in biological evolution, as well as in its techno-version observed by us now in the form of economy, branching occurs constantly and, moreover, it leads to the emergence of new forms of life. Look at the tree of life. Each branch on it is a Fork that occurred in ancient times - a mutation gave birth to a new species that became incompatible with its tribesmen. Without this mechanism, life in its modern understanding would be impossible. It is the ability of organisms to mutate that allows them to adapt to changing environmental conditions.\n\nThus, we come to the conclusion that consensus is both good, because it allows for the coordination of many actors and scalability, but at the same time it is bad, because it hinders the emergence of the new, as those who deviate from the consensus are always considered outcasts and the system kind of \"pushes\" them out.\n\nUnlike biological evolution, we humans carry out techno-evolution, and it depends on us how this evolution takes place. The source of mutations in technology is engineers, applying the scientific method and creative thinking to produce new, more promising and viable versions of technology. We benefit from more frequent mutations, we benefit from decentralization in the sphere of generating new effective solutions both in relation to technology and organizations. On the contrary - a situation where one point of view \"wins\" and full and unconditional consensus is achieved, is fraught with the risk of collapse under certain circumstances. That is why nature did not go the way of creating super-organisms the size of a planet, but went the way of decentralization - when all living beings are scattered across ecological niches and ecosystems, which makes life as a whole stable and even stabilizes the planet Earth according to the [Daisyworld model](https://en.wikipedia.org/wiki/Daisyworld) (in short, thanks to the biosphere and its diversity, the planet becomes more stable).\n\nSo, why this digression? Primarily, I want to emphasize that not all data requires mandatory consensus, making blockchain inappropriate for every scenario. Consensus becomes necessary when uncoordinated actions could result in irreversible consequences. For instance, it's crucial at road intersections. If there's no agreement on traffic rules regarding when to go and when to stop, you can imagine the potential chaos!\n\nReturning to the main topic of the article, it can be assumed that consensus is appropriate where the risks are high and, conversely, in cases where the risks are small, it is more appropriate to choose a completely decentralized system without consensus. Code development itself is a relatively safe activity, as long as it remains in the state of source or even executable files on the build server. However, when it comes to deploying these files in the physical infrastructure of the real world, it is very important to be consistent. That is why for the first two points of our DevOps stack (development and build) we chose like-minded projects without consensus.\n\n## First Phase - Development - Radicle\n\n![](./images/web3-devops-stack/1st-phase-development.png)\n\nSo, in code development, complete freedom and decentralization are needed to stimulate the generation of the best solutions directly from the authors. Fortunately for us, in the code development industry, the de-facto standard has become a decentralized by design version control system. I am talking, of course, about git. git a priori does not imply the presence of a single \"source of truth\" - any user, before using the code, needs to clone the repository to their computer and work with their local copy. In addition, the data storage method in git is nothing more than a chain of blocks (fixed facts of code changes - commits), which guarantee the immutability of history. That is, git itself is a kind of blockchain, the consensus between which is achieved manually by the authors themselves through branching and merge requests.\n\nNevertheless, despite the decentralized nature of git, web2 platforms have taken their place. Now, code development is almost entirely centralized around a relatively small number of platforms like Github, Bitbucket, Gitlab. And this happened precisely because of the introduction of additional tools: DevOps (CI/CD pipelines, built-in functions for detecting vulnerabilities in source code dependencies and much more) and Social Networking (developer reward systems, issue tracking, project management). These tools are not part of the original git protocol and complicate the migration of projects from platform to platform.\n\nThe project [Radicle](https://radicle.xyz/) was founded specifically with the aim of freeing code developers from the need to depend on large platforms, which we consider as the first component of our web3-DevOps stack. The project has a quite [long history](https://docs.radworks.org/community/our-story) and a number of significant transformations on its way to its current moment. Initially, Radicle was built on top of the then gaining popularity Inter Planetary File System (IPFS), but at some point developers realized that the ways of storing and hashing code repository data in IPFS were incompatible with the ways of storing in git, leading to duplication of information and excessive traffic consumption even in the case of small updates. Gradually, a decision was made to switch to a more minimalist solution - to exchange git patches directly, using the native [pack protocol](https://git-scm.com/docs/pack-protocol/en), to make this the main way of data transmission in the \"codekeeper\" network. This decision served as the beginning of a major refactoring and rewriting of the project from Go to Rust. The new version of the protocol, called Heartwood, draws inspiration from projects such as Secure Scuttlebutt (SSB) and Bitcoin's [Lightning Network](https://en.wikipedia.org/wiki/Lightning_Network).\n\nLater, in 2021, the Decentralized Autonomous Organization (or simply DAO) Radworks was founded on the Ethereum blockchain, the RAD governance token was issued, and the necessary funds were raised for further development of the project. Apparently, the project team does not deny the importance of social and economic components in code development, but at the same time does not try to integrate all supporting tools into their implementation. One such initiative is their project and eponymous smart contract [Drips](https://www.drips.network/), which is aimed at automatic distribution of donations among open source developers under the slogan \"Fund your dependencies\". Within this smart contract, each development project can set up automatic redistribution of received donations for its set of dependencies (packages, libraries).\n\nJust recently, in March 2024, the 1.0.0 release of the Heartwood protocol implementation was released, which means it can already be considered for production scenarios of decentralized development pipelines.\n\n## Second Phase - Build, Test, Continuous Integration - Fluence\n\n![web3 build software](./images/web3-devops-stack/2nd-phase-build.png)\n\nThe next step in our simplified DevOps pipeline is the build stage, which includes more than just code compilation. It involves a range of processes with varying computational resource intensities. However, these computations do not always lead to tangible changes. In other words, not every code change or build initiation results in a release. Often, Continuous Integration (CI) pipelines run on a schedule. The artifacts they produce are typically short-lived and are deleted if not included in a release. Hence, we don't consider this stage in the development lifecycle as requiring consensus, similar to numerous cloud computing projects that use blockchain for result verification.\n\nThe developers of [Fluence](https://fluence.dev/) hold a similar position. This is a project very close to Robonomics, which also intensively uses libp2p as a transport layer and ipfs as a storage layer in its use cases, while focusing on the orchestration of peers and calculations on them without the need for centralized platforms. Let's take a closer look at them.\n\nFluence consists of two key components - Aqua and Marine. The former is a domain-specific language (DSL) and is used to manage the sequence of tasks on computing devices, i.e. to orchestrate peers. On the one hand, mastering another language can deter many users, on the other hand, it is an honest step that immediately sets you up for the inevitable future. The fact is that most CI platforms usually offer configuration files in some common formats like YAML or JSON for managing and setting up pipelines. At first, this is really convenient and allows any user without programming skills to start working, but over time, as the needs and, accordingly, the number of configs grow, the lack of so familiar tools for programmers leads to the growth of boilerplate code and the inability to manage complexity. Attempts to make YAML a configuration language using templates also do not solve the problem, which contributes to the emergence of Ad-hoc configuration description languages like HCL (HashiCorp Configuration Language). Aqua offers an immediate solution in the form of an application programming language for the flow of computations, which has a reliable theoretical basis in the form of Pi-calculus, into which Aqua-code is compiled for further execution on peers. This makes the entry threshold into the technology a bit higher, but should ideally provide more stable and maintainable work in the future. Now Aqua is a fairly low-level language, but over time libraries may appear that implement best practices for designing computational flows using convenient mathematical abstractions, which will speed up the development of distributed computations.\n\nAqua sets the order of computations, but the computations themselves are prepared and carried out using Marine - a component also developed by Fluence. Marine is an SDK (Software Developers Kit) - a set of tools for assembling mutually compatible Webassembly modules, as well as a Runtime - a general-purpose environment for their execution. Modules are relatively independent software components, each of which stores its own state, but can interact with each other through function import/export. A set of interacting modules forms a service, which implements complex behavior and acts as an actor in the Fluence peer network.\n\nTogether, Aqua and Marine fully provide what can be called the thinking of a cyber-physical system - that is, all the variety of computations that help make decisions about what actions to take in the outside world to increase the chances of success in the evolutionary race.\n\n[Model-based](https://en.wikipedia.org/wiki/Model-based_systems_engineering) robotics development requires resource-intensive computations. A significant part of the tests of the developed software for robots are carried out in simulators, and reinforcement learning-based algorithms launch such virtual environments hundreds of thousands of times before they achieve the desired agent behavior. Various physics and rendering engines, as well as game engines based on them, can serve as virtual environments. Recently, the Entity Component System design pattern has become widespread in these environments. By the way, the modern version of the well-known in narrow circles robotic simulator Gazebo/ex-Ignition from Open Robotics (they also develop ROS) also [uses ECS](https://gazebosim.org/docs/harmonic/architecture) to increase performance and flexibility. In fact, according to the developers of Fluence, their execution model is well suited for the implementation of distributed architectures built on this principle.\n\nOf course, for compiled and tested software to bring value, it must be deployed on hardware platforms. Hypothetically, it is also possible to deploy software using Fluence. In fact, the developers themselves say that their stack also allows for deployment on peers, and this is indeed the case. However, we believe that consensus is needed and important in the area of interaction with the external environment and physical equipment.\n\n## Third Phase - Deployment - Robonomics\n\n![robotics deployment art](./images/web3-devops-stack/3rd-phase-deploy.png)\n\nAn important feature of software is the fact that it does not change the outside world by itself, but serves as a model of the surrounding reality and helps to make some reasoning about it - to build hypotheses, propose a plan of action, launch processes in the outside world using equipment or people. For example, an issue tracker itself is not a system that changes the outside world, it can be called a digital twin of the development team, which in turn brings changes to life. Thanks to the issue tracker, the team can coordinate actions with each other, help each other. In other words, the issue tracker allows maintaining a consensus within the development team - who does what tasks and when - but the change itself is made by people.\n\nWhen discussing world-changing systems, we refer to physical entities operating in the real world such as smart devices, robots, and autonomous factories. Essentially, Robonomics serves as a bridge from information systems and people to the external world via robotic systems. The importance of safety cannot be overstated, as neglecting it could lead not only to capital losses, but also real disasters.\n\nDespite the critical nature of these systems, the first secure decentralized storage systems appeared not in the industrial sector, but in the financial sector. Bank accounts proved to be a more enticing target for computer criminals than household appliances, most of which lacked network connectivity. The technology used to secure banking information systems has evolved significantly, from SWIFT to Ethereum, and is now gradually being implemented in other economic sectors.\n\nRobonomics is at the forefront of these secure, decentralized networks, taking charge of the final phase of the web3 DevOps conveyor - deployment.\n\nIn general terms, a deploy is putting a system into operation. A more familiar synonym for this term is installation (install) - an event after which the produced and delivered system (an instance of a certain type of equipment, an executable file of software) begins its functioning inside a higher-level system. What is good about blockchain in this case? First of all, when releasing any version of the program to the outside world, it is always important for us to understand what exactly was released. During development, versions can change very often and this is normal, so it is not advisable to put all information about them in the blockchain. However, the event of release or launch requires fixation, so that when receiving feedback we can clearly understand with which exact version of source codes or drawings we need to compare this feedback. The blockchain can serve as a reliable repository of information on all software updates of devices connected to it.\n\nMoreover, the installation process must be consistent, as discrepancies can lead to configuration collisions. These collisions can arise from mismatching software module versions, deploying different systems within the same space, and other related issues. For instance, the previously mentioned car collision at an unregulated intersection is an example of such a collision. In the context of software deployment, collisions may manifest as API violations, insufficient hardware capabilities, or writing to prohibited or unsafe memory locations. Robonomics can store the configurations of connected equipment and, at the consensus algorithm level, prevent such states.\n\nYou can use a special [launch](https://wiki.robonomics.network/docs/launch/) call to deploy software in the Robonomics parachain, which allows you to start a node connected to the blockchain with additional parameters. The parameter can be a unique identifier in the IPFS content distribution network, from which you can get a software image, a binary file, source code for the operating system configuration, or even a bash script! Since each transaction in the network is signed with a cryptographic key, in essence such a call in the parachain is equivalent to a public release signature.\n\nFor more complex scenarios, you can use a [digital twin](https://wiki.robonomics.network/docs/digital-twins/), which allows to set a correspondence table between arbitrary data 256 bits long and an account in the Robonomics network. Thus, you can keep a log of configuration version changes for device accounts in the Robonomics network. In traditional configuration and deployment systems, hosts are usually specified as nodes - these are computers with a DNS name or IP address. In the case of web3, hosts are identified thanks to their public cryptographic keys, to which accounts are attached. To change the configuration, you can add a new content identifier, from which the device will receive a new version of the software and update.\n\n## Putting it all together\n\n![web3 devops stack](./images/web3-devops-stack/devop-stack-full-art.png)\n\nSo, let's try to look at this from a bird's eye view. People make up the core of our large cyber-physical system. People are chaotic, unpredictable... and that's good! They generate new meanings, ideas, products. They actualize their will to change the world. Now, in the 21st century, it is not necessary to change the world with your own hands. There are tasks in front of humanity for which human hands are not the most suitable tool. Instead, there are machines, which now serve as the conductor of our will. Machines, on the contrary, are strictly deterministic and predictable. And people love this, yes. They love it when the train arrives at the station on time, and the quality of the products they consume is always predictably excellent. For this, people use networks. Lots of networks! They generate ideas on the Radicle network, machines gather and test them into executable modules on the Fluence network, and then deploy them on robots on the Robonomics network. The robots, in turn, transform the environment, and their sensors, also through Robonomics, provide feedback to people to make a decision - the cycle is closed. This is a cycle of continuous improvements, where everyone has their place. There is no contradiction between the machine and the human - both of them in harmony create a new order of humanity - interplanetary humanity.","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/web3-devops-stack-Cover.62c183a.b2f25ce8c2dfd72dc88e17b4c6eccad2.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/web3-devops-stack-Cover.9ea8d39.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 480w","/assets/static/web3-devops-stack-Cover.6b2ed88.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 1024w","/assets/static/web3-devops-stack-Cover.62c183a.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-eba128a2ee4e659bb2b197550931d0f4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-eba128a2ee4e659bb2b197550931d0f4)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAATBklEQVRYw4VXeXiU5bWfP277PLeL7a1etbaouNS1eEWUWkFZUyAkLFagKAEBNaAtm2U17EKFsEgWDUIACSQESCAhJCH7ZJsteyaTbZLJ7JPZt0wy2%2b%2be95tJQijWeZ4z37ue97zn/M7y8koNAblgAKh2BgNEqLIHwbcFUeMIwj4UBPsFg0GOhtvsF6Bvv8OPPpMPnY4Aat1BVDpC%2bxkxXowqWd8xtl8d7lfZA1y7ivYzGpl33n8917eF%2bFVSu9EdgMLih8rsg2socF9Zg6EG2l1BVNhD%2b4d5MT68GldQ3kBrhIMISPwAo9ohwBTiMcLs7rY/EITOFrq83BVAgxdoDoRI7CNetF/sD5HIGyI2zvWHwm1fEM3Eq8pJ%2b%2blbFwiNjc7fw4v1vaF%2bPfVbaH0DfaWDQSjDsjg8gR80GPtvYft9oTsymejO4FU7A/ImTgHBgIiYCUiIHn%2bQ09qIBu93ebOftB6aD4TnBmlfI40JhkKXGSbiPdIWealPa%2bppyy3lIA7dMOFCnRMCT5BTwr1rRUN39aldS2PKoZB87Fx2ZSaugRCk%2bE9KIHKT7JJhGcLn8PjWAIcA6gRqSSMNJLz/nkvf/dXb/XSQH1aXF17vEPx%2b/whC/MRQRohgCOIOCFtfMDiKBMFg6PJX2wfw%2btI2fHJMjbdi2rEhWQtmiFpPSEBx2EIcAryhMY4P7e93B8I2HT7XB8/gELRWX8gwg4Gx6OWUEWpqSdxqTwhNjBgCuplAdEhASJMm/8ge7pC7NWlykuUtAejMTui0aqg1auh0Wng8Hm7eSwroJXSIOSuD0zYHN2ZFL2uHrM%2bgnyp04PUlbfgoXoVZsZ1Y%2bWUf5wpjLR5CEuPB8WSuNhCA2eEfiUMWixUajQZaIp2%2bH0qzFyqKC4O%2b4A8YkdyGyRR2R161IyBvpInqgWBA5h29/L0bHXSw0krBRGHCnSIRKqulqKpuQzm/BcUlQg4NPlI8C0hNZEWGpuGLM2Uw4UW%2b0JdzEVqbzLcjpcaB43esKNB7UY8QQtg6RlzbG778YEgBHaRgkz2kAJvNDqVSBbVaQ6SFRq2GRm8kFPigpXWB4P2VYKOzazzhGFBpCylARC5gD9xt/dENXrKckphqaCfTslzeg/LyShQXl6G2VgiFQgm73cb5opplBQpsLNgwBUiYX1MEFlpIGfYQiUiRYuLVShdqoOzRRH5b72LjARqnPSSI0BrkBGSo4eIIC36kCDX5utMXks9o6YfBqIXZrOPIaNQREtTQm91QkCuYXf4x8WA0K5AimTH8YQQwa8jIBUasfw/0WbpjAcbl8cPpsIPP5yMych5mz56NmJgY9PX1wUHjDAFqUpScLMQUIGT%2bzKBGbqNwDEE5QOQepV6HBxq6mJbWsn6fy4M%2b%2bqoHBtFi9FFqDSlAFA6szUyhbW6IG1zo6XKjqkqJ6spe1FYpUMXvRZ2kl5CghsvlgoGU2GMYhMcb%2bEEU1BIKeJSL5Qx6Zv%2boAu5eOECHshSjpkuxBf0GA/R6PXoVvejp6eEO1Gi0sNtsYG7HFNBNa0Xh6M%2bgLCbLsguqhwahGiTyDJIyBmAhfpdyc7FzTxy0xFzjD0BNwUwz5IHUQgoYCClgmE898eDz9ci6ocGNm4zUuJ6tQl6eBnk39Si6oyWZ%2bjDocYPFSRIbJtfYy9%2bNAinN8/j2QHdbKKAEEBxrefYz2EPW7yBrMkAZ6PJms5n8TQuRSESwM0Kr1ZI/WkcUwBAg4AJZ2PdJAX2uQbrcIDSD5EoUtRkajMTvm7jN%2bPiNZ9CV/R06SLl9TrIezbdRIBujADq8mYJts9yEKyVaFDaakCMwIk9iQnaZakRejVYDDyFA7R7AydTLaOnup/Q8GtBD3/DdmAuUEwL0IfUE7g0abqqulHT5LgoojSQEl28NepiMVjQpSqBQd8HYb4ZKpRqDgC7y8xaWWl1uLiUyn1e6hqAnH%2bGr%2bKhuLYTRKkIHKbIn/Qh0HXXozLuE0t2xKMrPRrPRgEazC6xCHa4FGAKaCRnXS9TYur8JqbfasOtwC87nd2LD9gYo7U7UtlBMMBhx5rvT%2bM2Dv8HjzzyLunYNzAPc9cbEAq5uCbIgaA/KB0IKCWDMLwgr%2bYiWglIrBSNpeJTB32SyoN%2bihsVqhts1wLkBpwCWBcjfu7QWxB/eDlH2KTTJW1BBcBaYu1BkEuO84nvkSTOR35MKSdX36Dq7G7eVTajxduG2%2bAru9FbihkyMEm0vxCxSe8OZxMcCpgcl9Vrkt1ggoVtlC/SU0gJIz5MjV2bAuhIVmlu6yT0VSE3LwPXWDlByQZ9xaExaHHYBpgeexOmXs77VYg0sW7YMk/80GR0d7dzipk4j6rtMKNbaUKoyw2x1clBva2uFXqfj1shkrXRgD5xOB3wEEY2D4oTFgc8%2biYGIX4qWni6UmTwoNohwS89Hjq4UWao7yBeV4KOZU/CvXQuRUydFRo4Khf0tyBZ24WpxB0r7eyB0g6sbWD3BgmDjgAdljRrw%2bxyoVmhx%2bntCEQgV5QoUt2pxMKsesvZu6Dol0IquQWhQo42sqzR6YXUH7hsHeO0OH6eAkpLSwEsvvYTCwjJKJToO/kKJHIX59cjNFaOgoAHyHi0UvUoU3G5AJb8bwto%2blJd2oqiwjhRo5iDUqx/A1%2bfSkS%2bsg8nmQK3Fhmpyi4bebticVrgHXDDRWHu3FEkxc5Dy7WHcphLvaoYfN8tsyK1T4RZZsUxrhXCAFUIBDgFcFhj04HaNDudyVdi%2bXYYPF9fjTFYfUq53Q9Nvh0FlgqL%2bDqRXdkJ15e8QKaTcO0Vp8nLl%2b9hMEIoFPJ0rwCnA5XYHKioqqKqjgsbnhcHmhYWsWtJ4Dtk1x1Ary%2bY2C4SN5GMCpKe1Iu1CIy5flOLM6XKKA30hRCjNeG3SDBzY2YCM6zauuBET9VncYxwsR67F9HG/Qtze/WB1iMAfKkzE4dJZSClR6HZxDyEhlbYsCIrtLqQkKLB3hxL/XK/GpyuU2L9Ljbit3WhttpFy6T1BgVl06StILiWixmzn9veSC7ICbeie6pD9eG5PoJsrdrzegMPhQLtMBjt9DeT7TrsZGa2f4XTTu8hq2QNVrxa1gkakX6lEY0Mj6uoaIBDU48L5EiipFqC3BrRUBK1evRtnv25FarIQGaV8pFfWorVFShnDjOaqMpxITMC1ikq8t3wF4lPOQEblbKNKh1qbGzVMCQ49wfgQtLIvIbQbUMNcgfJ5hcaNeoqMTZJBSJs8aBBb0CgO9SW0UVTlQ1lpNTJTi5BywoHCLgcErHokBbBg7hz894cSj1W5XL4fGAgSwWq1ckGuVevAOUk3ztSsQ0pDNNIFu5CZfgN9VHoKBA0U%2bJQUcXWQStuRfolP2cBIGgZ09MbOzKvAzpOXse/cZZzKy8KlqmJktjaQYMeREr8XO1Mv4erVDEqlPZB3tUEiroFEowSLPDIiibEJuh4B9JouiC293BijhgEf6mq9ENd4Iaz2o7rCDQn16wQ0TlGySRhAqaANyedluPiNB3VUYbJ9PX4WB3xUE/hxd6pnxBRAkPcFbRTFnZSDB6gKs5lMyOLLEJ9bDpGkCjqrGqUVhRQP8qgO0OKrI0fw/ooYvPjyy8gvKEV%2bXvMIpPqp8Pg8rgxTFyYi7koL9mbKsT2hB5uSzUjdcRCqjMMQ5F5C4c18NLXoUF%2bnQL1Ug8ulSnx2QIrY/e3Iyi2DTc6Hs7sE17JLuLENh6T44pgUwpohdNa1QiOpRE25kbt8PZm5nhQgqh4i1A6iutiGf%2b3XYMOXrYjd24qUTBWV8fSGCHuhPzCKBKaAIHvSOp1OwgR7DfnQz/Iz%2bfL1yyKcPV2LrCs9BPNq8CVdaAtVDVz0X//ZOpSWlSLnRj26uuyQ97rw8af1%2bMXPr%2bPhhy9iwp8T8dyrJ/HgrzPxyMN5ePq3p/DZ63/DtchxmPv8R/jlQ3l49JFMPProNTzyUCZ%2b%2bpPreOb3F9FQmIXzSZWwiW6i8uJ5PPDzTPB46Xj5hTxIRC44FBQ1pBmQlMshqqEsQcUGQ4KYFNAmteBWthEnvjRg3GPZ3L6o6CoYKaV2KC0jL9dAWAk8vz8Y9Pn89Kx0BrMydbhwRoEmqY1K3yHcvt2J7KttyMmSITVVgFWbkrF%2b5wUcSbyBby8UIflcPjKvVWLb1gL8btxNPP5kDh56OAvjnsihdjYeeTQTT49Pwp8nR1J6jcDESR/gmT/OwCuvP4dXJ0Rj3LgcPPZ4Hu29hXHj8/Dgo7cRPe8GrDVJuJN5A7rGYnTdScXkyblYtCgPU6YUoKLahQpRDeT1uagq64OMwNfWFOCosxWY%2bnYxFkVJcOXsAFa%2b34yf/iwTSz9oxMnkM/jVr/8HTz31ND3k%2bKFHntcfcoHQz4WraUYcoqja0zeAbv0Qdu%2bvw7z5hVj8XiUio5IxcWIE3pi8BG9OWYs//t9iPPfCNDz57FH8bnw5HiP639%2bX48mXqvHYs5V4cByNPS1GxKStWPjONLz19geYOXM5Zs3%2bEDOnx2Al1QCv/fE7jHu2FOP/kE9UgCeeuYPnXspF06UjsN3ZDXPxl/h2fypefq0IN282Ye1HpbhY34d0mxmZbjsyZGZ8/S8VEo5rEH9Ihds5elRWqVBc1IfGOgO6OsyI%2bZCPCZOKkXb5BuK%2b2E6I4GHDP2JHs8C2uDZs3CZFQlILbl4x47tTVqzf2IyJU/l49Kk7eGR8AR5%2bsgyPP5uECRNX4MnnTuCJ59Mw/vmTeOW1GLwy6RRenniRlBKPqKgULI6Kx7IFx7A0OhGTXk/GnHcOY/IbaaSUGjz%2bXDl%2b/4dy%2bpZhwoR0PPViHvEqwRMvFGH8i0V45OlSzJpBls87CFPhIbhLdhGv7/HL35Xi9SmlyMvuwuWSDtz0enHVZMfpkh789glC31PF%2bNlv8hGzRsQ8nLLREPm5j2vfyJXjvx/MxvmLYno%2bG/DAA7/An9/ejt0HVfh8Vwt4b84Q4tUpNfhwtQyXT3uQcNSA6XOEmBohQsQCCWYTRSyow%2bzoOsyaX4NZUc2YFd1CREqaIcPm9SdQ9e1P0PodDz2pPCjP8tCVwoPwKA9nd/wcXed52Pr3JEyZ24qIaCHtF3M0bX4TZkYRT4Iro4hoMf4U0Yj9WzLgKd0GY8FBXD5%2bEQveE2DG3Dq8vUyAdw/UY2NaG25jEPuu9OJ6RgeWr5Fg%2bjwRps0TY836JnqWWyk7aWE29bPcBoWiH1P/UoPIBYm4dvY4HnzgvwixG/HW7Ba8Ma0GvF371Ni2uw8njxmQluJG0nEjtsb1YMdeNq68h9TYTmu3xfVhxx56g187gM7sd3Dmi0nYHrsVJ%2bNSkLgrDjtWzsalfRMgvzIee7ccpOduB/Ecy4/jM6avxJYvNDh7sha1F5KQf/p7xG7RYCudueMLBfbV9SOOSuw9KjsOO53YeEaJcxesyL7twqYdRpJHxfEsKLFAIGpHYXEbSqssKCrvxxcHDTh6uAmeinhsWf4m/vTOLhw86sR2ugNvydoOLIxpwYF9OlxKceHEV/1YvKoN761pvw/JsGRNGxasUmDL5qu4dORDLF6ahhmRJ/DeJ0YsXK3C4rV6TFuQjqoLc3D0QA7mxlhoj%2bwH%2bI3SEqLFq2TYsVOJpGN6rN/UjnfZ%2bEoZlu7uwE6ZBVuo7N1D9cn2kn4s31CL9Sv/gVuUVt9dtB7RK9rpHk2YND0N8cfTsXRVBia8lYaZ0RewYu1ZfP7PRBSlnUTWsXWYMe8C/harxl9Xt4GXkGTCqQSy/hkbzib2U6nZj4RvTGDjCUnGf6NTYUpIIoG2VWDrjiJs/jwbhw5LkJTMxq34JrEZifs%2bxY44IZKT9dzaU4nGH%2bQ5zDeBaoX44yoiNU4mmDg5TsX340SVHgf4Bqo/1NhLD7STOXZ8f/QUNi/nIWEdD5m7eTjz9RUcP2XDwS8bqLxuxJ59jTh4qAmHv2rGAXKdXSTrpnUXsTk2HkeOdiLxGysnEy8yVoHIj%2bVY/b4ci%2bZLMXOqDLOWtWP%2behr/pBeRsfen%2beuUiIrtxPxVBYiiunzmBxWIWJ5Dc32YTzT13UwaK8Wc97Mx76M2bvyHeI3lq0AU0fx1vbRPgUXburG7TI6lO7swe4UCHyW1Y1eBEnNXVWFa9F6sXb0eK9ccwLxVZSSHBgs%2b02DR37VYSMTaUZ/q8NdPu/Hxxia8u7oSExcUYt4ncpJRwZ3Hm79Ri/mbNHhznhwTJ0sx7b1uzIrpQdRmGt/4Y6TBnDWFmL9BiejNBsyNlYyMR65vxILP7ZjzcTXmflJL/Izc%2bI/zDNMmog10ia3Ee3t43wYdFu4iBX%2buway1LYjc2I/pa9sQsU6OeRv0I2cPU%2bQGNZ1rQMTHDZi%2b/AYiVldgwRY9ojaNnsNbuseCpXut%2bNtBK33N3HfZARuW7rFy4/%2bRuL320FrW3uccndvnwJI95tA8t8by4/zG8A59l%2bwmihset3B9Nrdsn52Td0mcHsv22ri5%2b8rMyWXHsv0DIfmGZQ3P/z/Enrtua640vwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"locale":"en"}},{"node":{"title":"Web3 DevOps-стек робототехники","path":"/blog/ru/robotics-web3-devops-stack/","date":"June 12, 2024","description":"DevOps-движение полностью изменило мир IT и наши представления о том как должна быть устроена эффективная разработка непрерывно улучшающихся систем. Мир робототехники только начинает знакомство с этим подходом, поэтому в новой статье мы попробовали изобразить концептуальное будущее DevOps для робототехники на базе Web3 технологий и выбрали пару близких к нам проектов, которые могли бы составить его основу.","content":"\n## Истоки Development & Operations\n\nРоботы, как движущиеся и чувствующие внешний мир устройства, являются частным случаем компьютеров. Как часто говорят инженеры, самолёт - это летающий компьютер, подчеркивая значимость бортового вычислительного устройства для поддержания жизнеспособности этой кибер-физической системы. Поэтому мы можем взглянуть на то как развивался мир информационных систем в 21 веке и выявить определённые тренды, которые будет присущи и робототехнике в самое ближайшее время.\n\nПрограммное обеспечение и применяемые для его разработки практики существенно изменили подходы к работе как в инженерии, так и в любой другой деятельности. В первую очередь изменения коснулись так называемого водопадного подхода, когда любой проект представлялся в виде продолжительных последовательно чередующихся стадий: Требования - Разработка - Верификация - Валидация - Эксплуатация. Со временем оказалось, что разделение на стадии удобно для менеджеров, но не очень соответствует тому как это происходит в жизни и затрудняет быструю адаптацию продуктов в условиях постоянно меняющегося внешнего мира. На смену водопадной модели деятельности (и менеджмента) пришли гибкие методологии, предполагающие синхронную работу над проектом с небольшими интервалами планирования. Вместо больших стадий с вехами появились небольшие спринты с инкрементами - небольшими, но частыми изменениями в разрабатываемых системах с быстрым выходом в релиз. Такой темп работы недостижим, если сопровождать выпуск релиза сложными административными процедурами с ручными проверками. Так возникло движение Development & Operations по внедрению практик передачи ценности (value) от разработчикам к потребителям без потерь и новая профессия инженера DevOps, автоматизирующего процесс быстрого ввода системы в эксплуатацию. \n\n![devops origins](../images/web3-devops-stack/devops-evolution.png)\n\nЭти практики работы включают в себя автоматизированное тестирование, непрерывную интеграцию, доставку, развёртывание и мониторинг работы программного обеспечения. Изначально они получили распространение в сфере крупных веб-сервисов, обслуживающих миллионы пользователей по всему миру, но со временем, по мере того как инструменты автоматизации стали доступнее (в том числе благодаря Open Source), DevOps стали применяться в более классических видах инженерной деятельности.\n\n## Особенности роботов в отношении DevOps\n\nРоботы, в отличие от неподвижных серверов и дата-центров, движутся в пространстве и чувствуют внешнюю среду. Такого рода устройств становится всё больше и больше. Мы видим как со временем растёт их вычислительная мощность - многие технические решения были бы попросту невозможны без производительного процессора на борту. По мере роста объёмов edge-вычислений (то есть вычислений на самих мобильных устройствах), использование DevOps набирает популярность, что позволяет быстро доносить новые разработанные функции до потребителей. Роботы могут быть непрерывно подключены к сети и оперативно обновлять своё программное обеспечения, используя Docker и другие зарекомендовавшие себя в практической деятельности инструменты.\n\nВпрочем, дополнительные возможности создают и дополнительные риски - наделяя компьютеры способностью к интенсивному взаимодействию с внешней средой и с интернет одновременно, мы создаём и предпосылки для потенциального вреда, который эти устройства могут нанести, если попадут под контроль злоумышленников. Умные устройства, постепенно наполняющие наши дома, могут в один момент стать безумными! Вопрос безопасности тут имеет первостепенное значение в условиях непрерывно меняющегося мира, потому что все эти устройства находятся в непосредственной близости к нашим телам. Ошибки могут стоить слишком дорого.\n\nЧто же делает робототехнику особенной и выделяет её от остальных компьютеров? К этим особенностям можно отнести:\n\n1. Разнообразие аппаратных платформ (в отличие от сравнительно небольшого числа типов архитектуры центральных процессоров)\n2. Работа в слабо предсказуемых средах, что подразумевает наличие нештатных ситуаций - например, недоступность по каналам связи\n3. Ограниченные ресурсы бортовых вычислительных устройств - слабый процессор, сравнительное небольшое количество оперативной памяти и низкая пропускная способность сети\n4. Повышенные требования к безопасности\n5. Большое количество устройств, которым требуются обновления и новые функции\n\nС учётом этих ограничений мы попробуем сформулировать концептуальную основу DevOps для роботов на базе web3-технологий, как минимум, для написания кода, сборки и деплоя. Мы попробуем представить наиболее интересные Web3-проекты, способные обеспечить функционирование децентрализованного DevOps-конвейера и показать как Робономика может стать органичной его частью на заключительной фазе жизненного цикла - при воплощении программ во внешнем мире.\n\n## Web3 и Blockchain\n\nКогда речь идёт о Web3, то подразумевается прежде всего технология Блокчейн. Это конечно близкие понятия, но всё-же не совсем тождественные. Часто под этим понятием подразумевается целое множество технологий - криптография на эллиптических кривых, p2p-сети, алгоритм консенсуса. Первые два пункта не являются чем-то уникальным и применяются широко в IT-индустрии, тогда как последнее действительно наделяет блокчейн особым свойством, делающим это решение столь мощным инструментом. Но нужен ли нам консенсус для всех случаев жизни (и частей DevOps-конвейера)? Давайте попробуем разобраться.\n\nКонсенсус имеет разные значения в разных контекстах, но смысл его всегда неизменен - системы, акторы или автономные агенты, составляющие децентрализованную сеть, приходят согласию по поводу того какой используют в работе протокол и состояние общих данных. Если стороны не приходят к согласию, то это приводит к так называемому Fork’у. Исторически под fork’ом подразумевалось раздвоение цепочки блоков, которое приводило к разделению сети узлов на две части - часть узлов оставалась “верна” старой версии протокола, тогда как остальная часть переходила на новую версию. Это событие всегда имело отрицательный контекст - сообщество вместо консолидации уменьшалось, что делало проект как-бы более слабым. В тоже время, как биологической эволюции, так и в её техно-версии, наблюдаемой нами сейчас в форме экономики, разветвление происходит постоянно и, более того, именно оно приводит к появлению новых форм жизни. Взгляните на древо жизни. Каждая ветка на ней - это произошедший в древние времени Fork - мутация породила новый вид, который стал несовместим со своими соплеменниками. Не будь этого механизма, то жизнь в её современном понимания была бы невозможна. Именно возможность организмов мутировать позволяет приспосабливаться к изменяющимся условиям окружающей среды.\n\nТаким образом, мы приходим к выводу о том, что консенсус - это одновременно хорошо, потому что позволяет согласовывать поведения многих акторов и масштабироваться, но в тоже время и плохо, потому что затрудняет появление нового, ведь отошедшие от консенсуса всегда считаются изгоями и система как бы “выдавливает” их.\n\nВ отличие от биологической эволюции, техноэволюцию осуществляем мы, люди, и именно от нас зависит то, каким образом эта эволюция осуществляется. Источником мутаций в технике являются инженеры, применяющие научный метод и творческое мышление для порождения новых, более перспективных и жизнеспособных версий техники. Нам выгодно, чтобы мутации происходили чаще, нам выгодна децентрализация в сфере порождения новых эффективных решений как в отношении техники, так и в отношении организаций. И напротив - ситуация, когда “побеждает” одна точка зрения и достигается полный и безоговорочный консенсус, чревата рисками обрушения всего при определённом стечении обстоятельств. Именно поэтому природа пошла не по пути создания сверх-организмов размером с планету, а по пути децентрализации - когда все живые существа рассредоточены по экологическим нишам и экосистемам, что делает устойчивой жизнь в целом и даже стабилизирует саму планету Земля согласно модели [Маргаритковый мир](https://ru.wikipedia.org/wiki/%D0%9C%D0%B0%D1%80%D0%B3%D0%B0%D1%80%D0%B8%D1%82%D0%BA%D0%BE%D0%B2%D1%8B%D0%B9_%D0%BC%D0%B8%D1%80) (если коротко, то благодаря биосфере и её разнообразию планета становится более устойчивой).\n\nК чему это отступление? Прежде всего хотелось бы донести до читателя мысль о том, что не все данные требуют обязательного консенсуса, поэтому далеко не во всех сценариях целесообразно применять блокчейн. Консенсус нужен в тех случаях, когда мы действуем в условиях когда несогласованные действия могут привести к непоправимым последствиям. Например, он остро необходим на перекрёстке автомобильных дорог. Если нет согласия по части правил дорожного движения на какой цвет можно ехать, а на какой нельзя, то можно представить к чему может довольно скоро привести такая ситуация!\n\nВозвращаясь к основной теме статьи, можно сделать предположение, что консенсус уместен там, где высоки риски и, наоборот, в случаях, когда риски невелики, то уместнее выбрать полностью децентрализованную систему без консенсуса. Разработка кода сама по себе - относительно безопасное мероприятие, пока она остаётся в состоянии исходных или даже исполняемых файлов на сборочном сервере. Однако, когда речь идёт о развёртывании этих файлов в физической инфраструктуре реального мира, то очень важно быть согласованными. Именно поэтому для первых двух пунктов нашего DevOps-стека (разработка и сборка) мы подобрали близкие по духу проекты без консенсуса.\n\n## Первая фаза - Разработка - Radicle\n\n![](../images/web3-devops-stack/1st-phase-development.png)\n\nИтак, в сфере разработки кода нужны полная свобода и децентрализация, чтобы стимулировать генерацию лучших решений напрямую от авторов. К нашему с вами счастью, в индустрии разработки кода и так де-факто победила децентрализованная по своей природе система хранения и управления версиями. Речь, разумеется, о git. git априори не подразумевает наличия единого “источника правды” - любому пользователю, прежде чем воспользоваться кодом, нужно клонировать репозиторий на свой компьютер и работать уже со своей локальной копией. В добавок ко всему, сама структура хранения данных в хранилище является ничем иным как цепочкой блоков (зафиксированных фактов изменений кода - коммитов), которые гарантируют неизменяемость истории. То есть git сам по себе является своеобразным блокчейном, консенсус между которым достигается вручную самими авторами посредством ответвлений и запросов на слияние.\n\nТем не менее, несмотря на децентрализованную природу git, платформы из мира второго поколения веб-технологий взяли своё. Сейчас разработка кода практически полностью централизована относительно небольшим числом платформ вроде Github, Bitbucket, Gitlab. И произошло это как раз таки за счёт внедрения дополнительных  инструментов: DevOps (CI/CD конвейеры, встроенные функции выявления уязвимостей в зависимостях исходного кода и многое другое) и Social Networking (системы вознаграждения разработчиков, issue tracking, project management). Эти инструменты не входят в состав исходного протокола git и затрудняют миграцию проектов от платформы к платформе.\n\nИменно с целью освободить разработчиков кода от необходимости зависеть от крупных платформ был основан проект [Radicle](https://radicle.xyz/), который мы рассматриваем в качестве первого компонента нашего web3-DevOps-стека. Проект имеет довольно [продолжительную историю](https://docs.radworks.org/community/our-story) и ряд значимых трансформаций на пути к его текущему моменту. Первоначально Radicle был построен поверх только набиравшей тогда популярность Inter Planetary File System (IPFS), но в какой-то момент разработчики поняли, что способы хранения и хеширования данных репозитория кода в IPFS несовместимы со способами хранения в git, что приводило к дублированию информации и избыточному расходованию трафика даже в случае небольших обновлений. Постепенно было принято решение перейти на более минималистичное решение - обмениваться напрямую патчами git, используя нативный [pack протокол](https://git-scm.com/docs/pack-protocol/en), сделать это основным способом передачи данных в сети “хранителей кода”. Это решение послужило началом большого рефакторинга и переписывания проекта с Go на Rust. Новая версия протокола под названием Heartwood черпает вдохновение из таких проектов как Secure Scuttlebutt (SSB) и Bitcoin’s [Lightning Network](https://en.wikipedia.org/wiki/Lightning_Network).\n\nЧуть позже, в 2021 году была основана Децентрализованная Автономная Организация (или просто DAO) Radworks на блокчейне Ethereum, выпущен токен управления RAD и привлечены необходимые средства на дальнейшее развитие проекта. Судя по всему, команда проекта не отрицает значимость социальной и экономической составляющих в разработке кода, но при этом не пытается интегрировать все поддерживающие инструменты внутрь своей имплементации. Одной из такого рода инициатив является их проект и одноимённый смарт-контракт [Drips](https://www.drips.network/), который ориентирован на автоматическое распределение пожертвований между разработчиками открытого исходного кода под слоганом “Fund your dependencies”. В рамках этого смарт-контракта каждый проект разработки может настроить автоматическое перераспределение полученных пожертвований для своего набора зависимостей (пакетов, библиотек).\n\nСовсем недавно, в марте 2024 года вышел релиз 1.0.0 имплементации протокола Heartwood, а значит уже можно рассматривать его для продакшн сценариев децентрализованных конвейеров разработки.\n\n## Вторая фаза - Сборка, тестирование, непрерывная интеграция - Fluence\n\n![web3 build software](../images/web3-devops-stack/2nd-phase-build.png)\n\nДалее в нашем упрощённом DevOps-конвейере следует этап сборки, который, конечно же, не исчерпывается компиляцией кода. На самом деле сюда входит целая россыпь процессов, требующих вычислений разной степени ресурсоёмкости. Причём эти вычисления далеко не всегда приводят к каким-то изменениям во внешнем мире. Иными, словами не каждое изменение кода и запуск сборки приводит в выпуску релиза. Часто CI-конвейеры запускаются по расписанию, а порождаемые ими артефакты имеют крайне небольшой срок жизни и удаляются, если их не добавляют в релиз. Именно по этой причине мы также не рассматриваем данную стадию в жизненном цикле разработки как требующую консенсуса, так же как и многочисленные проекты облачных вычислений через верификацию результатов в блокчейне.\n\nПохожей позиции придерживаются и разработчики [Fluence](https://fluence.dev/). Это очень близкий к Robonomics проект, который также интенсивно использует libp2p как слой транспорта и ipfs как слой хранения в своих сценариях использования, при этом сосредотачиваясь на оркестрации пиров и вычислениях на них без потребности в централизованных платформах. Давайте рассмотрим их подробнее.\n\nFluence состоит из двух ключевых компонентов - Aqua и Marine. Первый представляет собой предметно-специфичный язык (так называемый, DSL) и служит для управления очерёдностью исполнения заданий на вычислительных устройствах, то есть для оркестрации пиров. С одной стороны, освоение очередного языка может оттолкнуть многих пользователей, с другой стороны это честный шаг, который сразу настраивает на неизбежное будущее. Дело в том, что большинство CI-платформ обычно предлагает для управления и настройки конвейеров конфигурационные файлы в каком-то из распространённых форматов вроде YAML или JSON. Поначалу это действительно удобно и позволяет любому пользователю без навыков программирования начать работу, но со временем, по мере роста потребностей и, соответственно, количества конфигов, отсутствие столько привычных для программистов инструментов приводит к росту boilerplate-кода и невозможности управлять сложностью. Попытки сделать из YAML язык конфигурации с помощью шаблонов тоже не решает проблемы, что способствует появлению Ad-hoc языков описания конфигурации как HCL (HashiCorp Configuration Language). Aqua предлагает сразу решение в виде прикладного языка программирования для потока вычислений, имеющего надёжную теоретическую основу в виде Пи-исчисления, в которое компилируется в Aqua-код для дальнейшего исполнения на пирах. Это делает порог вхождения в технологию чуть выше, но по идее должен обеспечить более стабильную и поддерживаемую работу в будущем. Сейчас Aqua является достаточно низкоуровневым языком, но со временем могут появиться библиотеки, реализующие лучшие практики проектирования потоков вычислений с использованием удобных математических абстракций, что ускорит разработку распределённых вычислений.\n\nAqua задаёт порядок вычислений, но сами вычисления подготавливаются и осуществляются с помощью Marine - компонента, также разрабатываемого Fluence. Marine представляет собой SDK (Software Developers Kit) - набор инструментов для сборки совместимых  между собой Webassembly модулей, а также Runtime - среду общего назначения для их исполнения. Модули являются относительно независимыми программными компонентами, каждый из которых хранит собственное состояние, но при этом могут взаимодействовать друг с другом с помощью импорта/экспорта функций. Набор взаимодействующих модулей образует собой сервис, который реализует сложное поведение и является актором в Fluence сети пиров.\n\nСовместно Aqua и Marine обеспечивают в полной мере то, что можно назвать мышлением кибер-физической системы - то есть всё многообразие вычислений, помогающее принимать решения о том какие действия предпринять во внешнем мире, чтобы повысить шансы на успех в эволюционной гонке. \n\nМоделе-ориентированная робототехника нуждается в ресурсоёмких вычислениях. Значительная часть тестов разрабатываемого программного обеспечения для роботов выполняется в симуляторах, а алгоритмы, построенные на обучении с подкреплением, запускают такие виртуальные среды сотни тысяч раз, прежде чем получить желаемое поведение агента. В качестве виртуальных сред могут выступать самые разнообразные движки физики и рендеринга, а также основанные на них игровые движки. В этих средах в последнее время получил распространение паттерн проектирования Entity Component System. К слову, современная версия широко известного в узких кругах симулятора робототехники Gazebo/ex-Ignition от Open Robotics (они же разрабатывают ROS) также [использует ECS](https://gazebosim.org/docs/harmonic/architecture) для повышения производительности и гибкости. Собственно, по словам разработчиков Fluence, их модель исполнения как раз хорошо подходит именно для реализации распределённых архитектур, построенных по такому принципу.\n\nКонечно, чтобы собранное и протестированное программное обеспечение дало свои плоды, оно должно быть развёрнуто на аппаратных платформах. Гипотетически разворачивать программное обеспечение возможно конечно и с помощью Fluence. Собственно, сами разработчики говорят о том, что их стек в том числе позволяет выполнять деплой на пирах и это действительно так. Однако, мы считаем, что в области взаимодействия с внешней средой и физическим оборудованием нужен и важен консенсус.\n\n## Третья фаза - Развёртывание - Robonomics\n\n![robotics deployment art](../images/web3-devops-stack/3rd-phase-deploy.png)\n\nВажной особенностью программного обеспечения является тот факт, то само по себе оно не меняет внешний мир, а служит моделью окружающей реальности и помогает осуществлять какие-то рассуждения о ней - строить гипотезы, предлагать план действий, запускать процессы во внешнем мире с помощью оборудования или людей. Например, issue tracker сам по себе не является системой, меняющий внешний мир, его можно назвать цифровым двойником команды разработки, которая в свою очередь и проводит изменения в жизнь. Благодаря issue tracker команда может может согласовывать действия друг с другом, помогать в этом. Иными словами, issue tracker позволяет поддерживать консенсус внутри команд разработки - кто какие задачи делает и когда - но само изменение проводится людьми.\n\nКогда мы говорим о системах меняющих мир, то подразумеваем физически существующих и действующих в реальном мире агентов - умные устройства, роботы, автономные фабрики. Собственно, Робономика по своей изначальной задумке и является своеобразным мостом от информационных систем и людей к внешнему миру через робототехнические системы. Безопасность тут крайне важна и пренебрежение ей сулит не только потери капиталов, но и настоящие техногенные катастрофы. Несмотря критическую значимость этих систем, первые защищённые децентрализованные хранилища появились всё-таки не в сфере промышленности, а в сфере финансов. Наши счета в банках оказались куда более лакомым кусочком для компьютерных преступников, нежели бытовые приборы, подавляющая часть которых не имела подключения к сети. Технологии обеспечения безопасности банковских информационных систем прошли большой путь - от SWIFT до Ethereum - и теперь постепенно внедряются в другие сектора экономики. Робономика действует в этом фронтире безопасных децентрализованных сетей и мы делегируем ей заключительную часть web3 DevOps-конвейера - деплой.\n\nВ общем случае, деплой - это ввод системы в эксплуатации. Более привычным синонимом этого термина является установка (install) - некое событие, после которого произведённая и доставленная в нужное место система (экземпляр определённого вида оборудования, исполняемого файла программного обеспечения) начинает своё функционирование и выполнение роли в системе более высокого уровня. Чем именно хорош в данном случае блокчейн? Прежде всего тем, что выпуская какую-то версию программы во внешний мир, нам всегда важно понимать что именно было выпущено. В ходе разработки версии могут меняться очень часто и это нормально, поэтому фиксировать их в цепочке блоков нецелесообразно. Однако, событие выпуска наружу или релиза требует фиксации, чтобы при получении обратной связи мы могли однозначно понять с какой именно версией исходных кодов или чертежей нам нужно эту обратную связь сопоставить. Блокчейн может служить надёжным хранилищем информации о всех обновлениях программного обеспечения подключённых к нему устройств.\n\nТакже установка должна быть согласованной - рассогласования в установке чреваты так называемыми конфигурационным коллизиями. К коллизиям можно отнести несоответствие версий взаимодействующих программных модулей системы, разворачивание разных систем в одной области пространства и тому подобные негативные явления. Собственно, упомянутое выше столкновение автомобилей на нерегулируемом перекрёстке является как раз примером такой коллизии. В случае с разворачиванием программного обеспечения коллизиями могут являться нарушение API, нехватка аппаратных возможностей, запись в запрещённые или небезопасные места в памяти. Робономика может хранить конфигурацию подключённого к ней оборудования и на уровне алгоритма консенсуса запрещать подобные состояния.\n\nДля разворачивания программного обеспечения в парачейне Робономики можно использовать специальный вызов [launch](https://wiki.robonomics.network/docs/launch/), который позволяет осуществлять запуск подключённого к блокчейну узла с дополнительными параметрами. В качестве параметра может выступать уникальный идентификатор в сети дистрибьюции контента IPFS, по которому можно получить образ программного обеспечения, бинарный файл, исходный код конфигурации операционной системы или даже bash-скрипт! Так как каждая транзакция в сети подписывается криптографическим ключом, то по сути такой вызов в парачейне эквивалентен публичной подписи релиза.\n\nДля более сложных сценариев можно использовать [digital twin](https://wiki.robonomics.network/docs/digital-twins/), который позволяет задать таблицу соответствия между произвольными данными длиной в 256 бит и аккаунтом в сети Робономики. Тем самым, можно вести журнал изменений версий конфигурации для аккаунтов устройств в сети Робономики. В традиционных системах конфигурации и развёртывания в качестве узлов обычно указываются хосты - это компьютеры с DNS именем или IP-адресом. В случае web3 хосты идентифицируются благодаря своим публичным криптографическим ключам, к которым привязаны аккаунты. Для изменения конфигурации, можно добавить новый идентификатор контента, из которого устройство получит новую версию ПО и обновится.\n\n## Собираем всё вместе\n\n![web3 devops stack](../images/web3-devops-stack/devop-stack-full-art.png)\n\nИтак, давайте попробуем посмотреть на это свысока. Люди составляют ядро нашей большой кибер-физической системы. Люди хаотичны, непредсказуемы… и это хорошо! Они порождают новые смыслы, идеи, продукты. Они реализуют свою волю по изменению мира. Теперь, в 21 веке изменять мир собственными руками не требуется. Перед человечеством стоят такие задачи, для которых человеческие руки - не слишком подходящий инструмент. Вместо них есть машины, которые и служат сейчас проводником нашей воли. Машины же, напротив, строго детерминированы и предсказуемы. И люди любят это, да. Они любят, когда поезд приходит на станцию вовремя, а качество потребляемых ими продуктов всегда предсказуемо отменное. Для этого люди используют сети. Много сетей! Они порождают идеи в сети Radicle, машины собирают и тестируют их в исполняемые модули в сети Fluence, после чего разворачивают их на роботах в сети Robonomics. Роботы, в свою очередь, осуществляют преобразование среды, а их датчики, также через Robonomics, дают обратную связь людям, чтобы те приняли решение - цикл замыкается. Это цикл непрерывных улучшений, где у каждого своё место. Тут нет противоречий между машиной и человеком - оба они в гармонии создают человечество нового порядка - межпланетное человечество.","cover_image":{"type":"image","mimeType":"image/png","src":"/assets/static/web3-devops-stack-Cover.62c183a.b2f25ce8c2dfd72dc88e17b4c6eccad2.png","size":{"width":1500,"height":676},"sizes":"(max-width: 1500px) 100vw, 1500px","srcset":["/assets/static/web3-devops-stack-Cover.9ea8d39.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 480w","/assets/static/web3-devops-stack-Cover.6b2ed88.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 1024w","/assets/static/web3-devops-stack-Cover.62c183a.b2f25ce8c2dfd72dc88e17b4c6eccad2.png 1500w"],"dataUri":"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1500 676' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-eba128a2ee4e659bb2b197550931d0f4'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='15'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-eba128a2ee4e659bb2b197550931d0f4)' width='1500' height='676' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAAdCAYAAAAaeWr3AAAACXBIWXMAABYlAAAWJQFJUiTwAAATBklEQVRYw4VXeXiU5bWfP277PLeL7a1etbaouNS1eEWUWkFZUyAkLFagKAEBNaAtm2U17EKFsEgWDUIACSQESCAhJCH7ZJsteyaTbZLJ7JPZt0wy2%2b%2be95tJQijWeZ4z37ue97zn/M7y8koNAblgAKh2BgNEqLIHwbcFUeMIwj4UBPsFg0GOhtvsF6Bvv8OPPpMPnY4Aat1BVDpC%2bxkxXowqWd8xtl8d7lfZA1y7ivYzGpl33n8917eF%2bFVSu9EdgMLih8rsg2socF9Zg6EG2l1BVNhD%2b4d5MT68GldQ3kBrhIMISPwAo9ohwBTiMcLs7rY/EITOFrq83BVAgxdoDoRI7CNetF/sD5HIGyI2zvWHwm1fEM3Eq8pJ%2b%2blbFwiNjc7fw4v1vaF%2bPfVbaH0DfaWDQSjDsjg8gR80GPtvYft9oTsymejO4FU7A/ImTgHBgIiYCUiIHn%2bQ09qIBu93ebOftB6aD4TnBmlfI40JhkKXGSbiPdIWealPa%2bppyy3lIA7dMOFCnRMCT5BTwr1rRUN39aldS2PKoZB87Fx2ZSaugRCk%2bE9KIHKT7JJhGcLn8PjWAIcA6gRqSSMNJLz/nkvf/dXb/XSQH1aXF17vEPx%2b/whC/MRQRohgCOIOCFtfMDiKBMFg6PJX2wfw%2btI2fHJMjbdi2rEhWQtmiFpPSEBx2EIcAryhMY4P7e93B8I2HT7XB8/gELRWX8gwg4Gx6OWUEWpqSdxqTwhNjBgCuplAdEhASJMm/8ge7pC7NWlykuUtAejMTui0aqg1auh0Wng8Hm7eSwroJXSIOSuD0zYHN2ZFL2uHrM%2bgnyp04PUlbfgoXoVZsZ1Y%2bWUf5wpjLR5CEuPB8WSuNhCA2eEfiUMWixUajQZaIp2%2bH0qzFyqKC4O%2b4A8YkdyGyRR2R161IyBvpInqgWBA5h29/L0bHXSw0krBRGHCnSIRKqulqKpuQzm/BcUlQg4NPlI8C0hNZEWGpuGLM2Uw4UW%2b0JdzEVqbzLcjpcaB43esKNB7UY8QQtg6RlzbG778YEgBHaRgkz2kAJvNDqVSBbVaQ6SFRq2GRm8kFPigpXWB4P2VYKOzazzhGFBpCylARC5gD9xt/dENXrKckphqaCfTslzeg/LyShQXl6G2VgiFQgm73cb5opplBQpsLNgwBUiYX1MEFlpIGfYQiUiRYuLVShdqoOzRRH5b72LjARqnPSSI0BrkBGSo4eIIC36kCDX5utMXks9o6YfBqIXZrOPIaNQREtTQm91QkCuYXf4x8WA0K5AimTH8YQQwa8jIBUasfw/0WbpjAcbl8cPpsIPP5yMych5mz56NmJgY9PX1wUHjDAFqUpScLMQUIGT%2bzKBGbqNwDEE5QOQepV6HBxq6mJbWsn6fy4M%2b%2bqoHBtFi9FFqDSlAFA6szUyhbW6IG1zo6XKjqkqJ6spe1FYpUMXvRZ2kl5CghsvlgoGU2GMYhMcb%2bEEU1BIKeJSL5Qx6Zv%2boAu5eOECHshSjpkuxBf0GA/R6PXoVvejp6eEO1Gi0sNtsYG7HFNBNa0Xh6M%2bgLCbLsguqhwahGiTyDJIyBmAhfpdyc7FzTxy0xFzjD0BNwUwz5IHUQgoYCClgmE898eDz9ci6ocGNm4zUuJ6tQl6eBnk39Si6oyWZ%2bjDocYPFSRIbJtfYy9%2bNAinN8/j2QHdbKKAEEBxrefYz2EPW7yBrMkAZ6PJms5n8TQuRSESwM0Kr1ZI/WkcUwBAg4AJZ2PdJAX2uQbrcIDSD5EoUtRkajMTvm7jN%2bPiNZ9CV/R06SLl9TrIezbdRIBujADq8mYJts9yEKyVaFDaakCMwIk9iQnaZakRejVYDDyFA7R7AydTLaOnup/Q8GtBD3/DdmAuUEwL0IfUE7g0abqqulHT5LgoojSQEl28NepiMVjQpSqBQd8HYb4ZKpRqDgC7y8xaWWl1uLiUyn1e6hqAnH%2bGr%2bKhuLYTRKkIHKbIn/Qh0HXXozLuE0t2xKMrPRrPRgEazC6xCHa4FGAKaCRnXS9TYur8JqbfasOtwC87nd2LD9gYo7U7UtlBMMBhx5rvT%2bM2Dv8HjzzyLunYNzAPc9cbEAq5uCbIgaA/KB0IKCWDMLwgr%2bYiWglIrBSNpeJTB32SyoN%2bihsVqhts1wLkBpwCWBcjfu7QWxB/eDlH2KTTJW1BBcBaYu1BkEuO84nvkSTOR35MKSdX36Dq7G7eVTajxduG2%2bAru9FbihkyMEm0vxCxSe8OZxMcCpgcl9Vrkt1ggoVtlC/SU0gJIz5MjV2bAuhIVmlu6yT0VSE3LwPXWDlByQZ9xaExaHHYBpgeexOmXs77VYg0sW7YMk/80GR0d7dzipk4j6rtMKNbaUKoyw2x1clBva2uFXqfj1shkrXRgD5xOB3wEEY2D4oTFgc8%2biYGIX4qWni6UmTwoNohwS89Hjq4UWao7yBeV4KOZU/CvXQuRUydFRo4Khf0tyBZ24WpxB0r7eyB0g6sbWD3BgmDjgAdljRrw%2bxyoVmhx%2bntCEQgV5QoUt2pxMKsesvZu6Dol0IquQWhQo42sqzR6YXUH7hsHeO0OH6eAkpLSwEsvvYTCwjJKJToO/kKJHIX59cjNFaOgoAHyHi0UvUoU3G5AJb8bwto%2blJd2oqiwjhRo5iDUqx/A1%2bfSkS%2bsg8nmQK3Fhmpyi4bebticVrgHXDDRWHu3FEkxc5Dy7WHcphLvaoYfN8tsyK1T4RZZsUxrhXCAFUIBDgFcFhj04HaNDudyVdi%2bXYYPF9fjTFYfUq53Q9Nvh0FlgqL%2bDqRXdkJ15e8QKaTcO0Vp8nLl%2b9hMEIoFPJ0rwCnA5XYHKioqqKqjgsbnhcHmhYWsWtJ4Dtk1x1Ary%2bY2C4SN5GMCpKe1Iu1CIy5flOLM6XKKA30hRCjNeG3SDBzY2YCM6zauuBET9VncYxwsR67F9HG/Qtze/WB1iMAfKkzE4dJZSClR6HZxDyEhlbYsCIrtLqQkKLB3hxL/XK/GpyuU2L9Ljbit3WhttpFy6T1BgVl06StILiWixmzn9veSC7ICbeie6pD9eG5PoJsrdrzegMPhQLtMBjt9DeT7TrsZGa2f4XTTu8hq2QNVrxa1gkakX6lEY0Mj6uoaIBDU48L5EiipFqC3BrRUBK1evRtnv25FarIQGaV8pFfWorVFShnDjOaqMpxITMC1ikq8t3wF4lPOQEblbKNKh1qbGzVMCQ49wfgQtLIvIbQbUMNcgfJ5hcaNeoqMTZJBSJs8aBBb0CgO9SW0UVTlQ1lpNTJTi5BywoHCLgcErHokBbBg7hz894cSj1W5XL4fGAgSwWq1ckGuVevAOUk3ztSsQ0pDNNIFu5CZfgN9VHoKBA0U%2bJQUcXWQStuRfolP2cBIGgZ09MbOzKvAzpOXse/cZZzKy8KlqmJktjaQYMeREr8XO1Mv4erVDEqlPZB3tUEiroFEowSLPDIiibEJuh4B9JouiC293BijhgEf6mq9ENd4Iaz2o7rCDQn16wQ0TlGySRhAqaANyedluPiNB3VUYbJ9PX4WB3xUE/hxd6pnxBRAkPcFbRTFnZSDB6gKs5lMyOLLEJ9bDpGkCjqrGqUVhRQP8qgO0OKrI0fw/ooYvPjyy8gvKEV%2bXvMIpPqp8Pg8rgxTFyYi7koL9mbKsT2hB5uSzUjdcRCqjMMQ5F5C4c18NLXoUF%2bnQL1Ug8ulSnx2QIrY/e3Iyi2DTc6Hs7sE17JLuLENh6T44pgUwpohdNa1QiOpRE25kbt8PZm5nhQgqh4i1A6iutiGf%2b3XYMOXrYjd24qUTBWV8fSGCHuhPzCKBKaAIHvSOp1OwgR7DfnQz/Iz%2bfL1yyKcPV2LrCs9BPNq8CVdaAtVDVz0X//ZOpSWlSLnRj26uuyQ97rw8af1%2bMXPr%2bPhhy9iwp8T8dyrJ/HgrzPxyMN5ePq3p/DZ63/DtchxmPv8R/jlQ3l49JFMPProNTzyUCZ%2b%2bpPreOb3F9FQmIXzSZWwiW6i8uJ5PPDzTPB46Xj5hTxIRC44FBQ1pBmQlMshqqEsQcUGQ4KYFNAmteBWthEnvjRg3GPZ3L6o6CoYKaV2KC0jL9dAWAk8vz8Y9Pn89Kx0BrMydbhwRoEmqY1K3yHcvt2J7KttyMmSITVVgFWbkrF%2b5wUcSbyBby8UIflcPjKvVWLb1gL8btxNPP5kDh56OAvjnsihdjYeeTQTT49Pwp8nR1J6jcDESR/gmT/OwCuvP4dXJ0Rj3LgcPPZ4Hu29hXHj8/Dgo7cRPe8GrDVJuJN5A7rGYnTdScXkyblYtCgPU6YUoKLahQpRDeT1uagq64OMwNfWFOCosxWY%2bnYxFkVJcOXsAFa%2b34yf/iwTSz9oxMnkM/jVr/8HTz31ND3k%2bKFHntcfcoHQz4WraUYcoqja0zeAbv0Qdu%2bvw7z5hVj8XiUio5IxcWIE3pi8BG9OWYs//t9iPPfCNDz57FH8bnw5HiP639%2bX48mXqvHYs5V4cByNPS1GxKStWPjONLz19geYOXM5Zs3%2bEDOnx2Al1QCv/fE7jHu2FOP/kE9UgCeeuYPnXspF06UjsN3ZDXPxl/h2fypefq0IN282Ye1HpbhY34d0mxmZbjsyZGZ8/S8VEo5rEH9Ihds5elRWqVBc1IfGOgO6OsyI%2bZCPCZOKkXb5BuK%2b2E6I4GHDP2JHs8C2uDZs3CZFQlILbl4x47tTVqzf2IyJU/l49Kk7eGR8AR5%2bsgyPP5uECRNX4MnnTuCJ59Mw/vmTeOW1GLwy6RRenniRlBKPqKgULI6Kx7IFx7A0OhGTXk/GnHcOY/IbaaSUGjz%2bXDl%2b/4dy%2bpZhwoR0PPViHvEqwRMvFGH8i0V45OlSzJpBls87CFPhIbhLdhGv7/HL35Xi9SmlyMvuwuWSDtz0enHVZMfpkh789glC31PF%2bNlv8hGzRsQ8nLLREPm5j2vfyJXjvx/MxvmLYno%2bG/DAA7/An9/ejt0HVfh8Vwt4b84Q4tUpNfhwtQyXT3uQcNSA6XOEmBohQsQCCWYTRSyow%2bzoOsyaX4NZUc2YFd1CREqaIcPm9SdQ9e1P0PodDz2pPCjP8tCVwoPwKA9nd/wcXed52Pr3JEyZ24qIaCHtF3M0bX4TZkYRT4Iro4hoMf4U0Yj9WzLgKd0GY8FBXD5%2bEQveE2DG3Dq8vUyAdw/UY2NaG25jEPuu9OJ6RgeWr5Fg%2bjwRps0TY836JnqWWyk7aWE29bPcBoWiH1P/UoPIBYm4dvY4HnzgvwixG/HW7Ba8Ma0GvF371Ni2uw8njxmQluJG0nEjtsb1YMdeNq68h9TYTmu3xfVhxx56g187gM7sd3Dmi0nYHrsVJ%2bNSkLgrDjtWzsalfRMgvzIee7ccpOduB/Ecy4/jM6avxJYvNDh7sha1F5KQf/p7xG7RYCudueMLBfbV9SOOSuw9KjsOO53YeEaJcxesyL7twqYdRpJHxfEsKLFAIGpHYXEbSqssKCrvxxcHDTh6uAmeinhsWf4m/vTOLhw86sR2ugNvydoOLIxpwYF9OlxKceHEV/1YvKoN761pvw/JsGRNGxasUmDL5qu4dORDLF6ahhmRJ/DeJ0YsXK3C4rV6TFuQjqoLc3D0QA7mxlhoj%2bwH%2bI3SEqLFq2TYsVOJpGN6rN/UjnfZ%2bEoZlu7uwE6ZBVuo7N1D9cn2kn4s31CL9Sv/gVuUVt9dtB7RK9rpHk2YND0N8cfTsXRVBia8lYaZ0RewYu1ZfP7PRBSlnUTWsXWYMe8C/harxl9Xt4GXkGTCqQSy/hkbzib2U6nZj4RvTGDjCUnGf6NTYUpIIoG2VWDrjiJs/jwbhw5LkJTMxq34JrEZifs%2bxY44IZKT9dzaU4nGH%2bQ5zDeBaoX44yoiNU4mmDg5TsX340SVHgf4Bqo/1NhLD7STOXZ8f/QUNi/nIWEdD5m7eTjz9RUcP2XDwS8bqLxuxJ59jTh4qAmHv2rGAXKdXSTrpnUXsTk2HkeOdiLxGysnEy8yVoHIj%2bVY/b4ci%2bZLMXOqDLOWtWP%2behr/pBeRsfen%2beuUiIrtxPxVBYiiunzmBxWIWJ5Dc32YTzT13UwaK8Wc97Mx76M2bvyHeI3lq0AU0fx1vbRPgUXburG7TI6lO7swe4UCHyW1Y1eBEnNXVWFa9F6sXb0eK9ccwLxVZSSHBgs%2b02DR37VYSMTaUZ/q8NdPu/Hxxia8u7oSExcUYt4ncpJRwZ3Hm79Ri/mbNHhznhwTJ0sx7b1uzIrpQdRmGt/4Y6TBnDWFmL9BiejNBsyNlYyMR65vxILP7ZjzcTXmflJL/Izc%2bI/zDNMmog10ia3Ee3t43wYdFu4iBX%2buway1LYjc2I/pa9sQsU6OeRv0I2cPU%2bQGNZ1rQMTHDZi%2b/AYiVldgwRY9ojaNnsNbuseCpXut%2bNtBK33N3HfZARuW7rFy4/%2bRuL320FrW3uccndvnwJI95tA8t8by4/zG8A59l%2bwmihset3B9Nrdsn52Td0mcHsv22ri5%2b8rMyWXHsv0DIfmGZQ3P/z/Enrtua640vwAAAABJRU5ErkJggg==' /%3e%3c/svg%3e"},"locale":"ru"}}]}},"allPostsTags":{"edges":[{"node":{"locale":"ru","tags":[{"id":"Цифровой двойник","title":"Цифровой двойник","path":"/blog/tag/%D0%A6%D0%B8%D1%84%D1%80%D0%BE%D0%B2%D0%BE%D0%B9%20%D0%B4%D0%B2%D0%BE%D0%B9%D0%BD%D0%B8%D0%BA/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"en","tags":[{"id":"Digital Twin","title":"Digital Twin","path":"/blog/tag/Digital%20Twin/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"},{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"zh","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"uk","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"pt","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ko","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ja","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"it","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"fr","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"es","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"el","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"de","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ar","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"en","tags":[{"id":"DevOps","title":"DevOps","path":"/blog/tag/DevOps/"},{"id":"Web3","title":"Web3","path":"/blog/tag/Web3/"}]}},{"node":{"locale":"ru","tags":[{"id":"Анонсы","title":"Анонсы","path":"/blog/tag/%D0%90%D0%BD%D0%BE%D0%BD%D1%81%D1%8B/"},{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Consensus","title":"Consensus","path":"/blog/tag/Consensus/"},{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Buidl","title":"Buidl","path":"/blog/tag/Buidl/"}]}},{"node":{"locale":"ru","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ru","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"zh","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"uk","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ru","tags":[{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"},{"id":"Умный дом","title":"Умный дом","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BC/"}]}},{"node":{"locale":"pt","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ko","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ja","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"it","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"fr","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"es","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"el","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"de","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"ar","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"}]}},{"node":{"locale":"zh","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"ar","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"},{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Мерч","title":"Мерч","path":"/blog/tag/%D0%9C%D0%B5%D1%80%D1%87/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"NFT","title":"NFT","path":"/blog/tag/NFT/"},{"id":"Merch","title":"Merch","path":"/blog/tag/Merch/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"ROS 2","title":"ROS 2","path":"/blog/tag/ROS%202/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Announcements","title":"Announcements","path":"/blog/tag/Announcements/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Robonomics в Ethereum","title":"Robonomics в Ethereum","path":"/blog/tag/Robonomics%20%D0%B2%20Ethereum/"},{"id":"Сотрудничество","title":"Сотрудничество","path":"/blog/tag/%D0%A1%D0%BE%D1%82%D1%80%D1%83%D0%B4%D0%BD%D0%B8%D1%87%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"},{"id":"Умные контракты","title":"Умные контракты","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B5%20%D0%BA%D0%BE%D0%BD%D1%82%D1%80%D0%B0%D0%BA%D1%82%D1%8B/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Smart Contracts","title":"Smart Contracts","path":"/blog/tag/Smart%20Contracts/"},{"id":"Neon","title":"Neon","path":"/blog/tag/Neon/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"},{"id":"Умный дом","title":"Умный дом","path":"/blog/tag/%D0%A3%D0%BC%D0%BD%D1%8B%D0%B9%20%D0%B4%D0%BE%D0%BC/"},{"id":"Интернет вещей","title":"Интернет вещей","path":"/blog/tag/%D0%98%D0%BD%D1%82%D0%B5%D1%80%D0%BD%D0%B5%D1%82%20%D0%B2%D0%B5%D1%89%D0%B5%D0%B9/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"},{"id":"Smart Home","title":"Smart Home","path":"/blog/tag/Smart%20Home/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"}]}},{"node":{"locale":"ru","tags":[{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"pt","tags":[{"id":"Filosofia da Robonomia","title":"Filosofia da Robonomia","path":"/blog/tag/Filosofia%20da%20Robonomia/"}]}},{"node":{"locale":"it","tags":[{"id":"Filosofia della Robonomics","title":"Filosofia della Robonomics","path":"/blog/tag/Filosofia%20della%20Robonomics/"}]}},{"node":{"locale":"es","tags":[{"id":"Filosofía de la Robonomía","title":"Filosofía de la Robonomía","path":"/blog/tag/Filosof%C3%ADa%20de%20la%20Robonom%C3%ADa/"}]}},{"node":{"locale":"en","tags":[{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"XRT токен","title":"XRT токен","path":"/blog/tag/XRT%20%D1%82%D0%BE%D0%BA%D0%B5%D0%BD/"}]}},{"node":{"locale":"pt","tags":[{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"it","tags":[{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"},{"id":"Gettone XRT","title":"Gettone XRT","path":"/blog/tag/Gettone%20XRT/"}]}},{"node":{"locale":"fr","tags":[{"id":"Parachaîne Robonomics","title":"Parachaîne Robonomics","path":"/blog/tag/Paracha%C3%AEne%20Robonomics/"},{"id":"Jeton XRT","title":"Jeton XRT","path":"/blog/tag/Jeton%20XRT/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Token XRT","title":"Token XRT","path":"/blog/tag/Token%20XRT/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"}]}},{"node":{"locale":"pt","tags":[{"id":"Colaborações","title":"Colaborações","path":"/blog/tag/Colabora%C3%A7%C3%B5es/"},{"id":"Paracadeia de Robonomics","title":"Paracadeia de Robonomics","path":"/blog/tag/Paracadeia%20de%20Robonomics/"}]}},{"node":{"locale":"it","tags":[{"id":"Collaborazioni","title":"Collaborazioni","path":"/blog/tag/Collaborazioni/"},{"id":"Robonomics paracatena","title":"Robonomics paracatena","path":"/blog/tag/Robonomics%20paracatena/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"События","title":"События","path":"/blog/tag/%D0%A1%D0%BE%D0%B1%D1%8B%D1%82%D0%B8%D1%8F/"},{"id":"Полкадот","title":"Полкадот","path":"/blog/tag/%D0%9F%D0%BE%D0%BB%D0%BA%D0%B0%D0%B4%D0%BE%D1%82/"}]}},{"node":{"locale":"es","tags":[{"id":"Eventos","title":"Eventos","path":"/blog/tag/Eventos/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"de","tags":[{"id":"Veranstaltungen","title":"Veranstaltungen","path":"/blog/tag/Veranstaltungen/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"},{"id":"Polkadot","title":"Polkadot","path":"/blog/tag/Polkadot/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"},{"id":"Mapa ruta","title":"Mapa ruta","path":"/blog/tag/Mapa%20ruta/"},{"id":"Nuevo lanzamiento","title":"Nuevo lanzamiento","path":"/blog/tag/Nuevo%20lanzamiento/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Fahrplan","title":"Fahrplan","path":"/blog/tag/Fahrplan/"},{"id":"Neue Version","title":"Neue Version","path":"/blog/tag/Neue%20Version/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Сообщество","title":"Сообщество","path":"/blog/tag/%D0%A1%D0%BE%D0%BE%D0%B1%D1%89%D0%B5%D1%81%D1%82%D0%B2%D0%BE/"}]}},{"node":{"locale":"de","tags":[{"id":"Robonomics Parachain","title":"Robonomics Parachain","path":"/blog/tag/Robonomics%20Parachain/"},{"id":"Gemeinschaft","title":"Gemeinschaft","path":"/blog/tag/Gemeinschaft/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Community","title":"Community","path":"/blog/tag/Community/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Philosophy of Robonomics","title":"Philosophy of Robonomics","path":"/blog/tag/Philosophy%20of%20Robonomics/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"},{"id":"Философия Робономики","title":"Философия Робономики","path":"/blog/tag/%D0%A4%D0%B8%D0%BB%D0%BE%D1%81%D0%BE%D1%84%D0%B8%D1%8F%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B8/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"},{"id":"Demo","title":"Demo","path":"/blog/tag/Demo/"}]}},{"node":{"locale":"ru","tags":[{"id":"Онлайн школа","title":"Онлайн школа","path":"/blog/tag/%D0%9E%D0%BD%D0%BB%D0%B0%D0%B9%D0%BD%20%D1%88%D0%BA%D0%BE%D0%BB%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"ru","tags":[{"id":"Дорожная карта","title":"Дорожная карта","path":"/blog/tag/%D0%94%D0%BE%D1%80%D0%BE%D0%B6%D0%BD%D0%B0%D1%8F%20%D0%BA%D0%B0%D1%80%D1%82%D0%B0/"},{"id":"Сценарии использования","title":"Сценарии использования","path":"/blog/tag/%D0%A1%D1%86%D0%B5%D0%BD%D0%B0%D1%80%D0%B8%D0%B8%20%D0%B8%D1%81%D0%BF%D0%BE%D0%BB%D1%8C%D0%B7%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"ko","tags":[{"id":"로봇공학 파라체인","title":"로봇공학 파라체인","path":"/blog/tag/%EB%A1%9C%EB%B4%87%EA%B3%B5%ED%95%99%20%ED%8C%8C%EB%9D%BC%EC%B2%B4%EC%9D%B8/"}]}},{"node":{"locale":"es","tags":[{"id":"Paracaídas Robonomics","title":"Paracaídas Robonomics","path":"/blog/tag/Paraca%C3%ADdas%20Robonomics/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"zh","tags":[{"id":"Robonomics 平行链","title":"Robonomics 平行链","path":"/blog/tag/Robonomics%20%E5%B9%B3%E8%A1%8C%E9%93%BE/"},{"id":"XRT 代币","title":"XRT 代币","path":"/blog/tag/XRT%20%E4%BB%A3%E5%B8%81/"},{"id":"RWS 令牌","title":"RWS 令牌","path":"/blog/tag/RWS%20%E4%BB%A4%E7%89%8C/"},{"id":"质押","title":"质押","path":"/blog/tag/%E8%B4%A8%E6%8A%BC/"},{"id":"新版本","title":"新版本","path":"/blog/tag/%E6%96%B0%E7%89%88%E6%9C%AC/"}]}},{"node":{"locale":"ru","tags":[{"id":"Токен XRT","title":"Токен XRT","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20XRT/"},{"id":"Токен RWS","title":"Токен RWS","path":"/blog/tag/%D0%A2%D0%BE%D0%BA%D0%B5%D0%BD%20RWS/"},{"id":"Парачейн Робономика","title":"Парачейн Робономика","path":"/blog/tag/%D0%9F%D0%B0%D1%80%D0%B0%D1%87%D0%B5%D0%B9%D0%BD%20%D0%A0%D0%BE%D0%B1%D0%BE%D0%BD%D0%BE%D0%BC%D0%B8%D0%BA%D0%B0/"},{"id":"Новый релиз","title":"Новый релиз","path":"/blog/tag/%D0%9D%D0%BE%D0%B2%D1%8B%D0%B9%20%D1%80%D0%B5%D0%BB%D0%B8%D0%B7/"},{"id":"Стейкинг","title":"Стейкинг","path":"/blog/tag/%D0%A1%D1%82%D0%B5%D0%B9%D0%BA%D0%B8%D0%BD%D0%B3/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"New release","title":"New release","path":"/blog/tag/New%20release/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Internet of Things","title":"Internet of Things","path":"/blog/tag/Internet%20of%20Things/"},{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Staking","title":"Staking","path":"/blog/tag/Staking/"},{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Events","title":"Events","path":"/blog/tag/Events/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"XRT token","title":"XRT token","path":"/blog/tag/XRT%20token/"},{"id":"Robonomics in Ethereum","title":"Robonomics in Ethereum","path":"/blog/tag/Robonomics%20in%20Ethereum/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"},{"id":"RWS token","title":"RWS token","path":"/blog/tag/RWS%20token/"},{"id":"Subscription","title":"Subscription","path":"/blog/tag/Subscription/"}]}},{"node":{"locale":"en","tags":[{"id":"Roadmap","title":"Roadmap","path":"/blog/tag/Roadmap/"},{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}},{"node":{"locale":"en","tags":[{"id":"Online school","title":"Online school","path":"/blog/tag/Online%20school/"}]}},{"node":{"locale":"en","tags":[{"id":"Collaborations","title":"Collaborations","path":"/blog/tag/Collaborations/"}]}},{"node":{"locale":"en","tags":[{"id":"Use Cases","title":"Use Cases","path":"/blog/tag/Use%20Cases/"}]}},{"node":{"locale":"en","tags":[{"id":"Talk with team","title":"Talk with team","path":"/blog/tag/Talk%20with%20team/"}]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[]}},{"node":{"locale":"en","tags":[{"id":"Robonomics parachain","title":"Robonomics parachain","path":"/blog/tag/Robonomics%20parachain/"}]}}]}},"context":{}}